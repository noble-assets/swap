syntax = "proto3";

package noble.swap.stableswap.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "swap.noble.xyz/types/stableswap";

service Query {
  // Retrieves all the positions by a specific provider, including bonded/unbonded positions and rewards.
  rpc PositionsByProvider(QueryPositionsByProvider) returns (QueryPositionsByProviderResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/swap/stableswap/v1/positions/{provider}";
  }

  // Retrieves all the bonded positions by a specific provider.
  rpc BondedPositionsByProvider(QueryBondedPositionsByProvider) returns (QueryBondedPositionsByProviderResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/swap/stableswap/v1/bonded-positions/{provider}";
  }

  // Retrieves all the unbonding positions by a specific provider.
  rpc UnbondingPositionsByProvider(QueryUnbondingPositionsByProvider) returns (QueryUnbondingPositionsByProviderResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/swap/stableswap/v1/unbonding-positions/{provider}";
  }

  // Retrieves all the rewards by a specific provider.
  rpc RewardsByProvider(QueryRewardsByProvider) returns (QueryRewardsByProviderResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/swap/stableswap/v1/rewards/{provider}";
  }
}

message QueryPositionsByProvider {
  string provider = 1;
}
message QueryPositionsByProviderResponse {
  repeated QueryBondedPositionResponseEntry bonded_positions = 1 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
  repeated QueryUnbondingPositionResponseEntry unbonding_positions = 2 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
  repeated QueryRewardsResponseEntry rewards = 3 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
}

message QueryBondedPositionsByProvider {
  string provider = 1;
}
message QueryBondedPositionsByProviderResponse {
  repeated QueryBondedPositionResponseEntry bonded_positions = 1 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
}

message QueryUnbondingPositionsByProvider {
  string provider = 1;
}
message QueryUnbondingPositionsByProviderResponse {
  repeated QueryUnbondingPositionResponseEntry unbonding_positions = 1 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
}

message QueryRewardsByProvider {
  string provider = 1;
}
message QueryRewardsByProviderResponse {
  repeated QueryRewardsResponseEntry rewards = 1 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false
  ];
}

//

message QueryBondedPositionResponseEntry {
  uint64 pool_id = 1 [(amino.dont_omitempty) = true];
  string shares = 2 [
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp timestamp = 3 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message QueryUnbondingPositionResponseEntry {
  uint64 pool_id = 1 [(amino.dont_omitempty) = true];
  string unbonding_shares = 2 [
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  google.protobuf.Timestamp end_time = 3 [
    (amino.dont_omitempty) = true,
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message QueryRewardsResponseEntry {
  uint64 pool_id = 1 [(amino.dont_omitempty) = true];
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
