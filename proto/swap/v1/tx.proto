syntax = "proto3";

package swap.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "swap/v1/algorithm.proto";
import "swap/v1/swap.proto";

option go_package = "swap.noble.xyz/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  // Swap allows a user to swap one type of token for another, using multiple routes.
  rpc Swap(MsgSwap) returns (MsgSwapResponse);

  // WithdrawProtocolFees allows the protocol to withdraw accumulated fees and move them to another account.
  rpc WithdrawProtocolFees(MsgWithdrawProtocolFees) returns (MsgWithdrawProtocolFeesResponse);
  // WithdrawRewards allows a user to claim their accumulated rewards.
  rpc WithdrawRewards(MsgWithdrawRewards) returns (MsgWithdrawRewardsResponse);

  // PauseByAlgorithm pauses all pools using a specific algorithm.
  rpc PauseByAlgorithm(MsgPauseByAlgorithm) returns (MsgPauseByAlgorithmResponse);
  // PauseByPoolIds pauses specific pools identified by their pool IDs.
  rpc PauseByPoolIds(MsgPauseByPoolIds) returns (MsgPauseByPoolIdsResponse);

  // UnpauseByAlgorithm unpauses all pools using a specific algorithm.
  rpc UnpauseByAlgorithm(MsgUnpauseByAlgorithm) returns (MsgUnpauseByAlgorithmResponse);
  // UnpauseByPoolIds unpauses specific pools identified by their pool IDs.
  rpc UnpauseByPoolIds(MsgUnpauseByPoolIds) returns (MsgUnpauseByPoolIdsResponse);
}

// Message for withdrawing protocol fees from the protocol's fee pool.
message MsgWithdrawProtocolFees {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/RemoveLiquidity";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting the fee withdrawal.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Address to which the withdrawn fees will be sent.
  string to = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
message MsgWithdrawProtocolFeesResponse {}

// Message for withdrawing rewards accumulated by a user.
message MsgWithdrawRewards {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/RemoveLiquidity";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting the reward withdrawal.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Response message for MsgWithdrawRewards, which returns the withdrawn rewards.
message MsgWithdrawRewardsResponse {
  // List of rewards withdrawn by the user.
  repeated cosmos.base.v1beta1.Coin rewards = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// Message for swapping tokens from one type to another.
message MsgSwap {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/Swap";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is initiating the swap.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The coin to be swapped.
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  // The routes through which the swap will occur.
  repeated swap.v1.Route routes = 3 [(gogoproto.nullable) = false];
  // The minimum amount of tokens expected after the swap.
  cosmos.base.v1beta1.Coin min = 4 [(gogoproto.nullable) = false];
}

// Response message for MsgSwap, which includes the result of the swap and details of each individual swap.
message MsgSwapResponse {
  // The resulting amount of tokens after the swap.
  cosmos.base.v1beta1.Coin result = 1 [(gogoproto.nullable) = false];
  // Details of each individual swap involved in the process.
  repeated Swap swaps = 2;
}

// Message for pausing all pools that use a specific algorithm.
message MsgPauseByAlgorithm {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/PauseByAlgorithm";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to pause the pools.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The algorithm used by the pools to be paused.
  swap.v1.Algorithm algorithm = 2;
}

// Response message for MsgPauseByAlgorithm, containing the IDs of the paused pools.
message MsgPauseByAlgorithmResponse {
  // List of IDs of the paused pools.
  repeated uint64 paused_pools = 1;
}

// Message for pausing specific pools identified by their pool IDs.
message MsgPauseByPoolIds {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/PauseByPoolIds";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to pause the pools.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // List of IDs of the pools to be paused.
  repeated uint64 pool_ids = 2;
}

// Response message for MsgPauseByPoolIds, containing the IDs of the paused pools.
message MsgPauseByPoolIdsResponse {
  // List of IDs of the paused pools.
  repeated uint64 paused_pools = 1;
}

// Message for unpausing all pools that use a specific algorithm.
message MsgUnpauseByAlgorithm {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/UnpauseByAlgorithm";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to unpause the pools.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The algorithm used by the pools to be unpaused.
  swap.v1.Algorithm algorithm = 2;
}

// Response message for MsgUnpauseByAlgorithm, containing the IDs of the unpaused pools.
message MsgUnpauseByAlgorithmResponse {
  // List of IDs of the unpaused pools.
  repeated uint64 unpaused_pools = 1;
}

// Message for unpausing specific pools identified by their pool IDs.
message MsgUnpauseByPoolIds {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "swap/UnpauseByPoolIds";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to unpause the pools.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // List of IDs of the pools to be unpaused.
  repeated uint64 pool_ids = 2;
}

// Response message for MsgUnpauseByPoolIds, containing the IDs of the unpaused pools.
message MsgUnpauseByPoolIdsResponse {
  // List of IDs of the unpaused pools.
  repeated uint64 unpaused_pools = 1;
}
