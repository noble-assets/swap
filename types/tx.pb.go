// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swap/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgWithdrawProtocolFees struct {
	// Address of the signer who is requesting the fee withdrawal.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Address to which the withdrawn fees will be sent.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *MsgWithdrawProtocolFees) Reset()         { *m = MsgWithdrawProtocolFees{} }
func (m *MsgWithdrawProtocolFees) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawProtocolFees) ProtoMessage()    {}
func (*MsgWithdrawProtocolFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{0}
}
func (m *MsgWithdrawProtocolFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawProtocolFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawProtocolFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawProtocolFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawProtocolFees.Merge(m, src)
}
func (m *MsgWithdrawProtocolFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawProtocolFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawProtocolFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawProtocolFees proto.InternalMessageInfo

type MsgWithdrawProtocolFeesResponse struct {
}

func (m *MsgWithdrawProtocolFeesResponse) Reset()         { *m = MsgWithdrawProtocolFeesResponse{} }
func (m *MsgWithdrawProtocolFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawProtocolFeesResponse) ProtoMessage()    {}
func (*MsgWithdrawProtocolFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{1}
}
func (m *MsgWithdrawProtocolFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawProtocolFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawProtocolFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawProtocolFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawProtocolFeesResponse.Merge(m, src)
}
func (m *MsgWithdrawProtocolFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawProtocolFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawProtocolFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawProtocolFeesResponse proto.InternalMessageInfo

type MsgWithdrawRewards struct {
	// Address of the signer who is requesting the reward withdrawal.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgWithdrawRewards) Reset()         { *m = MsgWithdrawRewards{} }
func (m *MsgWithdrawRewards) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRewards) ProtoMessage()    {}
func (*MsgWithdrawRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{2}
}
func (m *MsgWithdrawRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRewards.Merge(m, src)
}
func (m *MsgWithdrawRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRewards proto.InternalMessageInfo

type MsgWithdrawRewardsResponse struct {
	// List of rewards withdrawn by the user.
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
}

func (m *MsgWithdrawRewardsResponse) Reset()         { *m = MsgWithdrawRewardsResponse{} }
func (m *MsgWithdrawRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawRewardsResponse) ProtoMessage()    {}
func (*MsgWithdrawRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{3}
}
func (m *MsgWithdrawRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawRewardsResponse.Merge(m, src)
}
func (m *MsgWithdrawRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawRewardsResponse proto.InternalMessageInfo

func (m *MsgWithdrawRewardsResponse) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type MsgSwap struct {
	// Address of the signer who is initiating the swap.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The coin to be swapped.
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	// The routes through which the swap will occur.
	Routes []Route `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes"`
	// The minimum amount of tokens expected after the swap.
	Min types.Coin `protobuf:"bytes,4,opt,name=min,proto3" json:"min"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{4}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

type MsgSwapResponse struct {
	// The resulting amount of tokens after the swap.
	Result types.Coin `protobuf:"bytes,1,opt,name=result,proto3" json:"result"`
	// Details of each individual swap involved in the process.
	Swaps []*Swap `protobuf:"bytes,2,rep,name=swaps,proto3" json:"swaps,omitempty"`
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{5}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

func (m *MsgSwapResponse) GetResult() types.Coin {
	if m != nil {
		return m.Result
	}
	return types.Coin{}
}

func (m *MsgSwapResponse) GetSwaps() []*Swap {
	if m != nil {
		return m.Swaps
	}
	return nil
}

type MsgPauseByAlgorithm struct {
	// Address of the signer who is requesting to pause the pools.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The algorithm used by the pools to be paused.
	Algorithm Algorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=swap.v1.Algorithm" json:"algorithm,omitempty"`
}

func (m *MsgPauseByAlgorithm) Reset()         { *m = MsgPauseByAlgorithm{} }
func (m *MsgPauseByAlgorithm) String() string { return proto.CompactTextString(m) }
func (*MsgPauseByAlgorithm) ProtoMessage()    {}
func (*MsgPauseByAlgorithm) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{6}
}
func (m *MsgPauseByAlgorithm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseByAlgorithm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseByAlgorithm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseByAlgorithm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseByAlgorithm.Merge(m, src)
}
func (m *MsgPauseByAlgorithm) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseByAlgorithm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseByAlgorithm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseByAlgorithm proto.InternalMessageInfo

type MsgPauseByAlgorithmResponse struct {
	// List of IDs of the paused pools.
	PausedPools []uint64 `protobuf:"varint,1,rep,packed,name=paused_pools,json=pausedPools,proto3" json:"paused_pools,omitempty"`
}

func (m *MsgPauseByAlgorithmResponse) Reset()         { *m = MsgPauseByAlgorithmResponse{} }
func (m *MsgPauseByAlgorithmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseByAlgorithmResponse) ProtoMessage()    {}
func (*MsgPauseByAlgorithmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{7}
}
func (m *MsgPauseByAlgorithmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseByAlgorithmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseByAlgorithmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseByAlgorithmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseByAlgorithmResponse.Merge(m, src)
}
func (m *MsgPauseByAlgorithmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseByAlgorithmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseByAlgorithmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseByAlgorithmResponse proto.InternalMessageInfo

func (m *MsgPauseByAlgorithmResponse) GetPausedPools() []uint64 {
	if m != nil {
		return m.PausedPools
	}
	return nil
}

type MsgPauseByPoolIds struct {
	// Address of the signer who is requesting to pause the pools.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// List of IDs of the pools to be paused.
	PoolIds []uint64 `protobuf:"varint,2,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *MsgPauseByPoolIds) Reset()         { *m = MsgPauseByPoolIds{} }
func (m *MsgPauseByPoolIds) String() string { return proto.CompactTextString(m) }
func (*MsgPauseByPoolIds) ProtoMessage()    {}
func (*MsgPauseByPoolIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{8}
}
func (m *MsgPauseByPoolIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseByPoolIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseByPoolIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseByPoolIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseByPoolIds.Merge(m, src)
}
func (m *MsgPauseByPoolIds) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseByPoolIds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseByPoolIds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseByPoolIds proto.InternalMessageInfo

type MsgPauseByPoolIdsResponse struct {
	// List of IDs of the paused pools.
	PausedPools []uint64 `protobuf:"varint,1,rep,packed,name=paused_pools,json=pausedPools,proto3" json:"paused_pools,omitempty"`
}

func (m *MsgPauseByPoolIdsResponse) Reset()         { *m = MsgPauseByPoolIdsResponse{} }
func (m *MsgPauseByPoolIdsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseByPoolIdsResponse) ProtoMessage()    {}
func (*MsgPauseByPoolIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{9}
}
func (m *MsgPauseByPoolIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseByPoolIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseByPoolIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseByPoolIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseByPoolIdsResponse.Merge(m, src)
}
func (m *MsgPauseByPoolIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseByPoolIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseByPoolIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseByPoolIdsResponse proto.InternalMessageInfo

func (m *MsgPauseByPoolIdsResponse) GetPausedPools() []uint64 {
	if m != nil {
		return m.PausedPools
	}
	return nil
}

type MsgUnpauseByAlgorithm struct {
	// Address of the signer who is requesting to unpause the pools.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The algorithm used by the pools to be unpaused.
	Algorithm Algorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=swap.v1.Algorithm" json:"algorithm,omitempty"`
}

func (m *MsgUnpauseByAlgorithm) Reset()         { *m = MsgUnpauseByAlgorithm{} }
func (m *MsgUnpauseByAlgorithm) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseByAlgorithm) ProtoMessage()    {}
func (*MsgUnpauseByAlgorithm) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{10}
}
func (m *MsgUnpauseByAlgorithm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseByAlgorithm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseByAlgorithm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseByAlgorithm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseByAlgorithm.Merge(m, src)
}
func (m *MsgUnpauseByAlgorithm) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseByAlgorithm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseByAlgorithm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseByAlgorithm proto.InternalMessageInfo

type MsgUnpauseByAlgorithmResponse struct {
	// List of IDs of the unpaused pools.
	UnpausedPools []uint64 `protobuf:"varint,1,rep,packed,name=unpaused_pools,json=unpausedPools,proto3" json:"unpaused_pools,omitempty"`
}

func (m *MsgUnpauseByAlgorithmResponse) Reset()         { *m = MsgUnpauseByAlgorithmResponse{} }
func (m *MsgUnpauseByAlgorithmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseByAlgorithmResponse) ProtoMessage()    {}
func (*MsgUnpauseByAlgorithmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{11}
}
func (m *MsgUnpauseByAlgorithmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseByAlgorithmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseByAlgorithmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseByAlgorithmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseByAlgorithmResponse.Merge(m, src)
}
func (m *MsgUnpauseByAlgorithmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseByAlgorithmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseByAlgorithmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseByAlgorithmResponse proto.InternalMessageInfo

func (m *MsgUnpauseByAlgorithmResponse) GetUnpausedPools() []uint64 {
	if m != nil {
		return m.UnpausedPools
	}
	return nil
}

type MsgUnpauseByPoolIds struct {
	// Address of the signer who is requesting to unpause the pools.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// List of IDs of the pools to be unpaused.
	PoolIds []uint64 `protobuf:"varint,2,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *MsgUnpauseByPoolIds) Reset()         { *m = MsgUnpauseByPoolIds{} }
func (m *MsgUnpauseByPoolIds) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseByPoolIds) ProtoMessage()    {}
func (*MsgUnpauseByPoolIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{12}
}
func (m *MsgUnpauseByPoolIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseByPoolIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseByPoolIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseByPoolIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseByPoolIds.Merge(m, src)
}
func (m *MsgUnpauseByPoolIds) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseByPoolIds) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseByPoolIds.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseByPoolIds proto.InternalMessageInfo

type MsgUnpauseByPoolIdsResponse struct {
	// List of IDs of the unpaused pools.
	UnpausedPools []uint64 `protobuf:"varint,1,rep,packed,name=unpaused_pools,json=unpausedPools,proto3" json:"unpaused_pools,omitempty"`
}

func (m *MsgUnpauseByPoolIdsResponse) Reset()         { *m = MsgUnpauseByPoolIdsResponse{} }
func (m *MsgUnpauseByPoolIdsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseByPoolIdsResponse) ProtoMessage()    {}
func (*MsgUnpauseByPoolIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9de1f8e03c77723b, []int{13}
}
func (m *MsgUnpauseByPoolIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseByPoolIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseByPoolIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseByPoolIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseByPoolIdsResponse.Merge(m, src)
}
func (m *MsgUnpauseByPoolIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseByPoolIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseByPoolIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseByPoolIdsResponse proto.InternalMessageInfo

func (m *MsgUnpauseByPoolIdsResponse) GetUnpausedPools() []uint64 {
	if m != nil {
		return m.UnpausedPools
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgWithdrawProtocolFees)(nil), "swap.v1.MsgWithdrawProtocolFees")
	proto.RegisterType((*MsgWithdrawProtocolFeesResponse)(nil), "swap.v1.MsgWithdrawProtocolFeesResponse")
	proto.RegisterType((*MsgWithdrawRewards)(nil), "swap.v1.MsgWithdrawRewards")
	proto.RegisterType((*MsgWithdrawRewardsResponse)(nil), "swap.v1.MsgWithdrawRewardsResponse")
	proto.RegisterType((*MsgSwap)(nil), "swap.v1.MsgSwap")
	proto.RegisterType((*MsgSwapResponse)(nil), "swap.v1.MsgSwapResponse")
	proto.RegisterType((*MsgPauseByAlgorithm)(nil), "swap.v1.MsgPauseByAlgorithm")
	proto.RegisterType((*MsgPauseByAlgorithmResponse)(nil), "swap.v1.MsgPauseByAlgorithmResponse")
	proto.RegisterType((*MsgPauseByPoolIds)(nil), "swap.v1.MsgPauseByPoolIds")
	proto.RegisterType((*MsgPauseByPoolIdsResponse)(nil), "swap.v1.MsgPauseByPoolIdsResponse")
	proto.RegisterType((*MsgUnpauseByAlgorithm)(nil), "swap.v1.MsgUnpauseByAlgorithm")
	proto.RegisterType((*MsgUnpauseByAlgorithmResponse)(nil), "swap.v1.MsgUnpauseByAlgorithmResponse")
	proto.RegisterType((*MsgUnpauseByPoolIds)(nil), "swap.v1.MsgUnpauseByPoolIds")
	proto.RegisterType((*MsgUnpauseByPoolIdsResponse)(nil), "swap.v1.MsgUnpauseByPoolIdsResponse")
}

func init() { proto.RegisterFile("swap/v1/tx.proto", fileDescriptor_9de1f8e03c77723b) }

var fileDescriptor_9de1f8e03c77723b = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0x77, 0xd3, 0x2c, 0xfb, 0xda, 0xa6, 0x5b, 0x37, 0x55, 0x1d, 0xb7, 0x38, 0xbb, 0x6e,
	0x41, 0x51, 0xe8, 0xda, 0x4d, 0x38, 0x54, 0xca, 0x01, 0xd1, 0x80, 0x56, 0x42, 0x22, 0x52, 0xe4,
	0x15, 0x20, 0x21, 0xa4, 0xc8, 0x89, 0x47, 0x5e, 0x8b, 0xd8, 0x63, 0x3c, 0x4e, 0xd2, 0xc0, 0x05,
	0x71, 0x42, 0x48, 0x48, 0x70, 0x84, 0x53, 0x25, 0x2e, 0x15, 0xe2, 0x90, 0x03, 0x7f, 0x44, 0x8f,
	0x15, 0x27, 0xb8, 0x00, 0xda, 0x3d, 0x84, 0x3f, 0x81, 0x23, 0x9a, 0x1f, 0x76, 0xa3, 0xc4, 0x49,
	0xbb, 0x91, 0x50, 0x2f, 0xbb, 0xc9, 0xfb, 0xde, 0x8f, 0xef, 0x7b, 0xef, 0xcd, 0x4c, 0x60, 0x8f,
	0x8c, 0xed, 0xd0, 0x1c, 0xd5, 0xcd, 0xf8, 0xa1, 0x11, 0x46, 0x38, 0xc6, 0xf2, 0x0e, 0xb5, 0x18,
	0xa3, 0xba, 0x7a, 0xd5, 0xf6, 0xbd, 0x00, 0x9b, 0xec, 0x2f, 0xc7, 0x54, 0xad, 0x8f, 0x89, 0x8f,
	0x89, 0xd9, 0xb3, 0x09, 0x32, 0x47, 0xf5, 0x1e, 0x8a, 0xed, 0xba, 0xd9, 0xc7, 0x5e, 0x20, 0xf0,
	0x1b, 0x02, 0xf7, 0x89, 0x4b, 0x73, 0xfa, 0xc4, 0x15, 0x40, 0x99, 0x03, 0x5d, 0xf6, 0xcd, 0xe4,
	0x5f, 0x04, 0x54, 0x72, 0xb1, 0x8b, 0xb9, 0x9d, 0x7e, 0x4a, 0x32, 0x25, 0xbc, 0xec, 0x81, 0x8b,
	0x23, 0x2f, 0x3e, 0xf1, 0x05, 0x20, 0x27, 0x00, 0xa3, 0xc9, 0x6c, 0xfa, 0x4f, 0x12, 0xdc, 0x68,
	0x13, 0xf7, 0x23, 0x2f, 0x3e, 0x71, 0x22, 0x7b, 0xdc, 0xa1, 0xc6, 0x3e, 0x1e, 0x1c, 0x21, 0x44,
	0xe4, 0x7b, 0x50, 0x20, 0x9e, 0x1b, 0xa0, 0x48, 0x91, 0xf6, 0xa5, 0xea, 0x6e, 0x4b, 0xf9, 0xed,
	0xd7, 0xc3, 0x92, 0x20, 0xf0, 0xc0, 0x71, 0x22, 0x44, 0xc8, 0x71, 0x1c, 0x79, 0x81, 0x6b, 0x09,
	0x3f, 0xb9, 0x0a, 0x5b, 0x31, 0x56, 0xb6, 0x9e, 0xe3, 0xbd, 0x15, 0xe3, 0xe6, 0xdd, 0xaf, 0x1f,
	0x55, 0x72, 0xff, 0x3c, 0xaa, 0xe4, 0xbe, 0x9a, 0x4d, 0x6b, 0x22, 0xfc, 0x9b, 0xd9, 0xb4, 0x56,
	0x62, 0x1c, 0x2d, 0xe4, 0xe3, 0x11, 0x7a, 0xdf, 0xfb, 0x6c, 0xe8, 0x39, 0x5e, 0x3c, 0xd1, 0x0f,
	0xa0, 0xb2, 0x82, 0xa4, 0x85, 0x48, 0x88, 0x03, 0x82, 0xf4, 0x18, 0xe4, 0x39, 0x17, 0x0b, 0x8d,
	0xed, 0xc8, 0xd9, 0x40, 0xc2, 0x39, 0x89, 0xfd, 0x20, 0x81, 0xba, 0x5c, 0x36, 0x21, 0x25, 0x7f,
	0x01, 0x3b, 0x11, 0x37, 0x29, 0xd2, 0xfe, 0x76, 0xf5, 0x62, 0xa3, 0x6c, 0x88, 0xe2, 0x74, 0x0d,
	0x0c, 0xb1, 0x06, 0xc6, 0x3b, 0xd8, 0x0b, 0x5a, 0x47, 0x4f, 0xfe, 0xac, 0xe4, 0x7e, 0xfe, 0xab,
	0x52, 0x75, 0xbd, 0xf8, 0x64, 0xd8, 0x33, 0xfa, 0xd8, 0x17, 0xd3, 0x16, 0xff, 0x0e, 0x89, 0xf3,
	0xa9, 0x19, 0x4f, 0x42, 0x44, 0x58, 0x00, 0xf9, 0x71, 0x36, 0xad, 0x5d, 0x1a, 0x20, 0xd7, 0xee,
	0x4f, 0xba, 0x74, 0x91, 0xc8, 0xe3, 0xd9, 0xb4, 0x26, 0x59, 0x49, 0x45, 0xfd, 0x5f, 0x09, 0x76,
	0xda, 0xc4, 0x3d, 0x1e, 0xdb, 0xe1, 0x06, 0xa3, 0xbc, 0x0f, 0x05, 0xdb, 0xc7, 0xc3, 0x20, 0x66,
	0xe3, 0x5c, 0xcb, 0x3c, 0x4f, 0x99, 0x5b, 0xc2, 0x5d, 0xbe, 0x0b, 0x85, 0x08, 0x0f, 0x63, 0x44,
	0x94, 0x6d, 0x26, 0xb9, 0x68, 0x88, 0x53, 0x61, 0x58, 0xd4, 0x9c, 0x78, 0x73, 0x1f, 0xb9, 0x0e,
	0xdb, 0xbe, 0x17, 0x28, 0xf9, 0x17, 0xab, 0x41, 0x7d, 0x9b, 0x07, 0x2b, 0x26, 0xb4, 0xcb, 0x26,
	0x44, 0xe5, 0xea, 0x18, 0xae, 0x08, 0xe5, 0xe9, 0x28, 0xee, 0x43, 0x21, 0x42, 0x64, 0x38, 0x88,
	0x59, 0x07, 0x5e, 0x44, 0x0f, 0x77, 0x97, 0x6f, 0xc3, 0x05, 0x9a, 0x98, 0x28, 0x5b, 0x4c, 0xce,
	0xe5, 0x54, 0x0e, 0x4b, 0xcf, 0x31, 0xfd, 0xb1, 0x04, 0xd7, 0xda, 0xc4, 0xed, 0xd8, 0x43, 0x82,
	0x5a, 0x93, 0x07, 0xc9, 0xc1, 0xdb, 0xa0, 0xef, 0xf7, 0x60, 0x37, 0x3d, 0xb7, 0xac, 0xf5, 0xc5,
	0x86, 0x9c, 0x96, 0x4c, 0x13, 0x5b, 0xcf, 0x9c, 0x9a, 0x87, 0x2b, 0xfa, 0x71, 0x9d, 0xf5, 0x63,
	0x91, 0x92, 0xfe, 0x36, 0xdc, 0xcc, 0x60, 0x9a, 0xf6, 0xe9, 0x00, 0x2e, 0x85, 0x14, 0x73, 0xba,
	0x21, 0xc6, 0x03, 0xbe, 0xb7, 0x79, 0xeb, 0x22, 0xb7, 0x75, 0xa8, 0x49, 0xff, 0x56, 0x82, 0xab,
	0xcf, 0x52, 0x50, 0xdb, 0x7b, 0x9b, 0x1c, 0x35, 0xb9, 0x0c, 0xaf, 0xd0, 0x1a, 0x5d, 0xcf, 0xe1,
	0xcd, 0xcd, 0x5b, 0x3b, 0x21, 0x4f, 0xd6, 0x7c, 0x63, 0x85, 0xa6, 0x6b, 0xf3, 0x9a, 0x44, 0x65,
	0xfd, 0x2d, 0x28, 0x2f, 0xd1, 0x39, 0x8f, 0x9e, 0x5f, 0x24, 0xb8, 0xde, 0x26, 0xee, 0x07, 0x41,
	0xf8, 0x32, 0xc6, 0x67, 0xae, 0x90, 0xca, 0xaf, 0xf1, 0x65, 0x52, 0xfa, 0x11, 0xbc, 0x9a, 0xc9,
	0x36, 0x95, 0xfc, 0x1a, 0x14, 0x87, 0x41, 0x86, 0xe8, 0xcb, 0x89, 0x95, 0xcb, 0xfe, 0x9e, 0xef,
	0x6c, 0x9a, 0xe8, 0x7f, 0x19, 0xe4, 0xfa, 0xe5, 0x5c, 0xac, 0xad, 0xbf, 0xcb, 0x96, 0x73, 0xd1,
	0x7c, 0x4e, 0x65, 0x8d, 0x3f, 0xf2, 0xb0, 0xdd, 0x26, 0xae, 0xdc, 0x80, 0x3c, 0xbb, 0xfd, 0xf6,
	0xd2, 0x09, 0x88, 0x5b, 0x41, 0x55, 0x16, 0x2d, 0x69, 0x89, 0x1e, 0x94, 0x32, 0x1f, 0xc3, 0xfd,
	0xf9, 0x88, 0x2c, 0x0f, 0xb5, 0xfa, 0x3c, 0x8f, 0xb4, 0xc6, 0x31, 0x5c, 0x59, 0x7c, 0xa8, 0x6e,
	0x66, 0x05, 0x0b, 0x50, 0xbd, 0xbd, 0x06, 0x4c, 0x93, 0x7e, 0x08, 0x7b, 0x4b, 0xd7, 0xcf, 0xad,
	0xf9, 0xc0, 0x45, 0x54, 0xbd, 0xb3, 0x0e, 0x4d, 0xf3, 0x76, 0xa0, 0xb8, 0x70, 0xd2, 0xd5, 0x8c,
	0x38, 0x81, 0xa9, 0xfa, 0x6a, 0x2c, 0xcd, 0xf8, 0x09, 0xc8, 0x19, 0x67, 0x4d, 0x9b, 0x8f, 0x5c,
	0xc6, 0xd5, 0xd7, 0xd7, 0xe3, 0xf3, 0x7d, 0x58, 0x5a, 0xe9, 0x5b, 0x99, 0xb1, 0x09, 0xe7, 0x3b,
	0xeb, 0xd0, 0x24, 0xaf, 0x7a, 0xe1, 0x4b, 0xfa, 0xbc, 0xb6, 0x8c, 0x27, 0xa7, 0x9a, 0xf4, 0xf4,
	0x54, 0x93, 0xfe, 0x3e, 0xd5, 0xa4, 0xef, 0xce, 0xb4, 0xdc, 0xd3, 0x33, 0x2d, 0xf7, 0xfb, 0x99,
	0x96, 0xfb, 0x98, 0xfd, 0x42, 0x30, 0x02, 0xdc, 0x1b, 0x20, 0xe3, 0xe1, 0xe4, 0x73, 0xfe, 0x54,
	0xf7, 0x0a, 0xec, 0x77, 0xd6, 0x9b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x18, 0x6c, 0xfb, 0xd2,
	0x2e, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Swap allows a user to swap one type of token for another, using multiple routes.
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
	// WithdrawProtocolFees allows the protocol to withdraw accumulated fees and move them to another account.
	WithdrawProtocolFees(ctx context.Context, in *MsgWithdrawProtocolFees, opts ...grpc.CallOption) (*MsgWithdrawProtocolFeesResponse, error)
	// WithdrawRewards allows a user to claim their accumulated rewards.
	WithdrawRewards(ctx context.Context, in *MsgWithdrawRewards, opts ...grpc.CallOption) (*MsgWithdrawRewardsResponse, error)
	// PauseByAlgorithm pauses all pools using a specific algorithm.
	PauseByAlgorithm(ctx context.Context, in *MsgPauseByAlgorithm, opts ...grpc.CallOption) (*MsgPauseByAlgorithmResponse, error)
	// PauseByPoolIds pauses specific pools identified by their pool IDs.
	PauseByPoolIds(ctx context.Context, in *MsgPauseByPoolIds, opts ...grpc.CallOption) (*MsgPauseByPoolIdsResponse, error)
	// UnpauseByAlgorithm unpauses all pools using a specific algorithm.
	UnpauseByAlgorithm(ctx context.Context, in *MsgUnpauseByAlgorithm, opts ...grpc.CallOption) (*MsgUnpauseByAlgorithmResponse, error)
	// UnpauseByPoolIds unpauses specific pools identified by their pool IDs.
	UnpauseByPoolIds(ctx context.Context, in *MsgUnpauseByPoolIds, opts ...grpc.CallOption) (*MsgUnpauseByPoolIdsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawProtocolFees(ctx context.Context, in *MsgWithdrawProtocolFees, opts ...grpc.CallOption) (*MsgWithdrawProtocolFeesResponse, error) {
	out := new(MsgWithdrawProtocolFeesResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/WithdrawProtocolFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawRewards(ctx context.Context, in *MsgWithdrawRewards, opts ...grpc.CallOption) (*MsgWithdrawRewardsResponse, error) {
	out := new(MsgWithdrawRewardsResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/WithdrawRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseByAlgorithm(ctx context.Context, in *MsgPauseByAlgorithm, opts ...grpc.CallOption) (*MsgPauseByAlgorithmResponse, error) {
	out := new(MsgPauseByAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/PauseByAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseByPoolIds(ctx context.Context, in *MsgPauseByPoolIds, opts ...grpc.CallOption) (*MsgPauseByPoolIdsResponse, error) {
	out := new(MsgPauseByPoolIdsResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/PauseByPoolIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseByAlgorithm(ctx context.Context, in *MsgUnpauseByAlgorithm, opts ...grpc.CallOption) (*MsgUnpauseByAlgorithmResponse, error) {
	out := new(MsgUnpauseByAlgorithmResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/UnpauseByAlgorithm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseByPoolIds(ctx context.Context, in *MsgUnpauseByPoolIds, opts ...grpc.CallOption) (*MsgUnpauseByPoolIdsResponse, error) {
	out := new(MsgUnpauseByPoolIdsResponse)
	err := c.cc.Invoke(ctx, "/swap.v1.Msg/UnpauseByPoolIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Swap allows a user to swap one type of token for another, using multiple routes.
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
	// WithdrawProtocolFees allows the protocol to withdraw accumulated fees and move them to another account.
	WithdrawProtocolFees(context.Context, *MsgWithdrawProtocolFees) (*MsgWithdrawProtocolFeesResponse, error)
	// WithdrawRewards allows a user to claim their accumulated rewards.
	WithdrawRewards(context.Context, *MsgWithdrawRewards) (*MsgWithdrawRewardsResponse, error)
	// PauseByAlgorithm pauses all pools using a specific algorithm.
	PauseByAlgorithm(context.Context, *MsgPauseByAlgorithm) (*MsgPauseByAlgorithmResponse, error)
	// PauseByPoolIds pauses specific pools identified by their pool IDs.
	PauseByPoolIds(context.Context, *MsgPauseByPoolIds) (*MsgPauseByPoolIdsResponse, error)
	// UnpauseByAlgorithm unpauses all pools using a specific algorithm.
	UnpauseByAlgorithm(context.Context, *MsgUnpauseByAlgorithm) (*MsgUnpauseByAlgorithmResponse, error)
	// UnpauseByPoolIds unpauses specific pools identified by their pool IDs.
	UnpauseByPoolIds(context.Context, *MsgUnpauseByPoolIds) (*MsgUnpauseByPoolIdsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Swap(ctx context.Context, req *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (*UnimplementedMsgServer) WithdrawProtocolFees(ctx context.Context, req *MsgWithdrawProtocolFees) (*MsgWithdrawProtocolFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawProtocolFees not implemented")
}
func (*UnimplementedMsgServer) WithdrawRewards(ctx context.Context, req *MsgWithdrawRewards) (*MsgWithdrawRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawRewards not implemented")
}
func (*UnimplementedMsgServer) PauseByAlgorithm(ctx context.Context, req *MsgPauseByAlgorithm) (*MsgPauseByAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseByAlgorithm not implemented")
}
func (*UnimplementedMsgServer) PauseByPoolIds(ctx context.Context, req *MsgPauseByPoolIds) (*MsgPauseByPoolIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseByPoolIds not implemented")
}
func (*UnimplementedMsgServer) UnpauseByAlgorithm(ctx context.Context, req *MsgUnpauseByAlgorithm) (*MsgUnpauseByAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseByAlgorithm not implemented")
}
func (*UnimplementedMsgServer) UnpauseByPoolIds(ctx context.Context, req *MsgUnpauseByPoolIds) (*MsgUnpauseByPoolIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseByPoolIds not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawProtocolFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawProtocolFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawProtocolFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/WithdrawProtocolFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawProtocolFees(ctx, req.(*MsgWithdrawProtocolFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/WithdrawRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawRewards(ctx, req.(*MsgWithdrawRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseByAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseByAlgorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseByAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/PauseByAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseByAlgorithm(ctx, req.(*MsgPauseByAlgorithm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseByPoolIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseByPoolIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseByPoolIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/PauseByPoolIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseByPoolIds(ctx, req.(*MsgPauseByPoolIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseByAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseByAlgorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseByAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/UnpauseByAlgorithm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseByAlgorithm(ctx, req.(*MsgUnpauseByAlgorithm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseByPoolIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseByPoolIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseByPoolIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swap.v1.Msg/UnpauseByPoolIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseByPoolIds(ctx, req.(*MsgUnpauseByPoolIds))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swap.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
		{
			MethodName: "WithdrawProtocolFees",
			Handler:    _Msg_WithdrawProtocolFees_Handler,
		},
		{
			MethodName: "WithdrawRewards",
			Handler:    _Msg_WithdrawRewards_Handler,
		},
		{
			MethodName: "PauseByAlgorithm",
			Handler:    _Msg_PauseByAlgorithm_Handler,
		},
		{
			MethodName: "PauseByPoolIds",
			Handler:    _Msg_PauseByPoolIds_Handler,
		},
		{
			MethodName: "UnpauseByAlgorithm",
			Handler:    _Msg_UnpauseByAlgorithm_Handler,
		},
		{
			MethodName: "UnpauseByPoolIds",
			Handler:    _Msg_UnpauseByPoolIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swap/v1/tx.proto",
}

func (m *MsgWithdrawProtocolFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawProtocolFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawProtocolFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawProtocolFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawProtocolFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawProtocolFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Min.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Swaps) > 0 {
		for iNdEx := len(m.Swaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgPauseByAlgorithm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseByAlgorithm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseByAlgorithm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseByAlgorithmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseByAlgorithmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseByAlgorithmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PausedPools) > 0 {
		dAtA5 := make([]byte, len(m.PausedPools)*10)
		var j4 int
		for _, num := range m.PausedPools {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintTx(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseByPoolIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseByPoolIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseByPoolIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		dAtA7 := make([]byte, len(m.PoolIds)*10)
		var j6 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintTx(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseByPoolIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseByPoolIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseByPoolIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PausedPools) > 0 {
		dAtA9 := make([]byte, len(m.PausedPools)*10)
		var j8 int
		for _, num := range m.PausedPools {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTx(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseByAlgorithm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseByAlgorithm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseByAlgorithm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseByAlgorithmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseByAlgorithmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseByAlgorithmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnpausedPools) > 0 {
		dAtA11 := make([]byte, len(m.UnpausedPools)*10)
		var j10 int
		for _, num := range m.UnpausedPools {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTx(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseByPoolIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseByPoolIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseByPoolIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		dAtA13 := make([]byte, len(m.PoolIds)*10)
		var j12 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintTx(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseByPoolIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseByPoolIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseByPoolIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnpausedPools) > 0 {
		dAtA15 := make([]byte, len(m.UnpausedPools)*10)
		var j14 int
		for _, num := range m.UnpausedPools {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintTx(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgWithdrawProtocolFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawProtocolFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.Min.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Result.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Swaps) > 0 {
		for _, e := range m.Swaps {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPauseByAlgorithm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovTx(uint64(m.Algorithm))
	}
	return n
}

func (m *MsgPauseByAlgorithmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PausedPools) > 0 {
		l = 0
		for _, e := range m.PausedPools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgPauseByPoolIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgPauseByPoolIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PausedPools) > 0 {
		l = 0
		for _, e := range m.PausedPools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgUnpauseByAlgorithm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovTx(uint64(m.Algorithm))
	}
	return n
}

func (m *MsgUnpauseByAlgorithmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnpausedPools) > 0 {
		l = 0
		for _, e := range m.UnpausedPools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgUnpauseByPoolIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgUnpauseByPoolIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnpausedPools) > 0 {
		l = 0
		for _, e := range m.UnpausedPools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgWithdrawProtocolFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawProtocolFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawProtocolFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawProtocolFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawProtocolFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawProtocolFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Min.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swaps = append(m.Swaps, &Swap{})
			if err := m.Swaps[len(m.Swaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseByAlgorithm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseByAlgorithm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseByAlgorithm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseByAlgorithmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseByAlgorithmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseByAlgorithmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PausedPools = append(m.PausedPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PausedPools) == 0 {
					m.PausedPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PausedPools = append(m.PausedPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PausedPools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseByPoolIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseByPoolIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseByPoolIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseByPoolIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseByPoolIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseByPoolIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PausedPools = append(m.PausedPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PausedPools) == 0 {
					m.PausedPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PausedPools = append(m.PausedPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PausedPools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseByAlgorithm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseByAlgorithm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseByAlgorithm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseByAlgorithmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseByAlgorithmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseByAlgorithmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnpausedPools = append(m.UnpausedPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnpausedPools) == 0 {
					m.UnpausedPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnpausedPools = append(m.UnpausedPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpausedPools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseByPoolIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseByPoolIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseByPoolIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseByPoolIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseByPoolIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseByPoolIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnpausedPools = append(m.UnpausedPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnpausedPools) == 0 {
					m.UnpausedPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnpausedPools = append(m.UnpausedPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpausedPools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
