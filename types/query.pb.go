// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/swap/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryRates struct {
	Algorithm Algorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=noble.swap.v1.Algorithm" json:"algorithm,omitempty"`
}

func (m *QueryRates) Reset()         { *m = QueryRates{} }
func (m *QueryRates) String() string { return proto.CompactTextString(m) }
func (*QueryRates) ProtoMessage()    {}
func (*QueryRates) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{0}
}
func (m *QueryRates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRates.Merge(m, src)
}
func (m *QueryRates) XXX_Size() int {
	return m.Size()
}
func (m *QueryRates) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRates.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRates proto.InternalMessageInfo

func (m *QueryRates) GetAlgorithm() Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return UNSPECIFIED
}

type QueryRatesResponse struct {
	Rates []Rate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates"`
}

func (m *QueryRatesResponse) Reset()         { *m = QueryRatesResponse{} }
func (m *QueryRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRatesResponse) ProtoMessage()    {}
func (*QueryRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{1}
}
func (m *QueryRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRatesResponse.Merge(m, src)
}
func (m *QueryRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRatesResponse proto.InternalMessageInfo

func (m *QueryRatesResponse) GetRates() []Rate {
	if m != nil {
		return m.Rates
	}
	return nil
}

type QueryRate struct {
	Denom     string    `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Algorithm Algorithm `protobuf:"varint,2,opt,name=algorithm,proto3,enum=noble.swap.v1.Algorithm" json:"algorithm,omitempty"`
}

func (m *QueryRate) Reset()         { *m = QueryRate{} }
func (m *QueryRate) String() string { return proto.CompactTextString(m) }
func (*QueryRate) ProtoMessage()    {}
func (*QueryRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{2}
}
func (m *QueryRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRate.Merge(m, src)
}
func (m *QueryRate) XXX_Size() int {
	return m.Size()
}
func (m *QueryRate) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRate.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRate proto.InternalMessageInfo

func (m *QueryRate) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryRate) GetAlgorithm() Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return UNSPECIFIED
}

type QueryRateResponse struct {
	Rates []Rate `protobuf:"bytes,1,rep,name=rates,proto3" json:"rates"`
}

func (m *QueryRateResponse) Reset()         { *m = QueryRateResponse{} }
func (m *QueryRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateResponse) ProtoMessage()    {}
func (*QueryRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{3}
}
func (m *QueryRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateResponse.Merge(m, src)
}
func (m *QueryRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateResponse proto.InternalMessageInfo

func (m *QueryRateResponse) GetRates() []Rate {
	if m != nil {
		return m.Rates
	}
	return nil
}

type QueryPaused struct {
}

func (m *QueryPaused) Reset()         { *m = QueryPaused{} }
func (m *QueryPaused) String() string { return proto.CompactTextString(m) }
func (*QueryPaused) ProtoMessage()    {}
func (*QueryPaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{4}
}
func (m *QueryPaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaused.Merge(m, src)
}
func (m *QueryPaused) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaused) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaused.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaused proto.InternalMessageInfo

type QueryPausedResponse struct {
	PausedPools []uint64 `protobuf:"varint,1,rep,packed,name=paused_pools,json=pausedPools,proto3" json:"paused_pools,omitempty"`
}

func (m *QueryPausedResponse) Reset()         { *m = QueryPausedResponse{} }
func (m *QueryPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedResponse) ProtoMessage()    {}
func (*QueryPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{5}
}
func (m *QueryPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedResponse.Merge(m, src)
}
func (m *QueryPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedResponse proto.InternalMessageInfo

func (m *QueryPausedResponse) GetPausedPools() []uint64 {
	if m != nil {
		return m.PausedPools
	}
	return nil
}

type QueryPools struct {
}

func (m *QueryPools) Reset()         { *m = QueryPools{} }
func (m *QueryPools) String() string { return proto.CompactTextString(m) }
func (*QueryPools) ProtoMessage()    {}
func (*QueryPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{6}
}
func (m *QueryPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPools.Merge(m, src)
}
func (m *QueryPools) XXX_Size() int {
	return m.Size()
}
func (m *QueryPools) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPools.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPools proto.InternalMessageInfo

type QueryPoolsResponse struct {
	Pools []*PoolDetails `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{7}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetPools() []*PoolDetails {
	if m != nil {
		return m.Pools
	}
	return nil
}

type QueryPool struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPool) Reset()         { *m = QueryPool{} }
func (m *QueryPool) String() string { return proto.CompactTextString(m) }
func (*QueryPool) ProtoMessage()    {}
func (*QueryPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{8}
}
func (m *QueryPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPool.Merge(m, src)
}
func (m *QueryPool) XXX_Size() int {
	return m.Size()
}
func (m *QueryPool) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPool.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPool proto.InternalMessageInfo

func (m *QueryPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryPoolResponse struct {
	Pool *PoolDetails `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{9}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetPool() *PoolDetails {
	if m != nil {
		return m.Pool
	}
	return nil
}

type QuerySimulateSwap struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"` // Deprecated: Do not use.
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Routes []Route    `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes"`
	Min    types.Coin `protobuf:"bytes,4,opt,name=min,proto3" json:"min"`
}

func (m *QuerySimulateSwap) Reset()         { *m = QuerySimulateSwap{} }
func (m *QuerySimulateSwap) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateSwap) ProtoMessage()    {}
func (*QuerySimulateSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_b809424106593213, []int{10}
}
func (m *QuerySimulateSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateSwap.Merge(m, src)
}
func (m *QuerySimulateSwap) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateSwap.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateSwap proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *QuerySimulateSwap) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *QuerySimulateSwap) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *QuerySimulateSwap) GetRoutes() []Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *QuerySimulateSwap) GetMin() types.Coin {
	if m != nil {
		return m.Min
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryRates)(nil), "noble.swap.v1.QueryRates")
	proto.RegisterType((*QueryRatesResponse)(nil), "noble.swap.v1.QueryRatesResponse")
	proto.RegisterType((*QueryRate)(nil), "noble.swap.v1.QueryRate")
	proto.RegisterType((*QueryRateResponse)(nil), "noble.swap.v1.QueryRateResponse")
	proto.RegisterType((*QueryPaused)(nil), "noble.swap.v1.QueryPaused")
	proto.RegisterType((*QueryPausedResponse)(nil), "noble.swap.v1.QueryPausedResponse")
	proto.RegisterType((*QueryPools)(nil), "noble.swap.v1.QueryPools")
	proto.RegisterType((*QueryPoolsResponse)(nil), "noble.swap.v1.QueryPoolsResponse")
	proto.RegisterType((*QueryPool)(nil), "noble.swap.v1.QueryPool")
	proto.RegisterType((*QueryPoolResponse)(nil), "noble.swap.v1.QueryPoolResponse")
	proto.RegisterType((*QuerySimulateSwap)(nil), "noble.swap.v1.QuerySimulateSwap")
}

func init() { proto.RegisterFile("noble/swap/v1/query.proto", fileDescriptor_b809424106593213) }

var fileDescriptor_b809424106593213 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0x8d, 0xc1, 0xce, 0x53, 0x26, 0xf0, 0x24, 0x86, 0x3c, 0x30, 0x7e, 0x3c, 0xbf, 0x60, 0x55,
	0x2a, 0xa5, 0x92, 0x47, 0x49, 0x3f, 0x90, 0xba, 0xa9, 0x9a, 0xb2, 0x01, 0x09, 0x89, 0x9a, 0x55,
	0xbb, 0x41, 0x13, 0x32, 0x32, 0x96, 0x6c, 0x8f, 0x9b, 0x71, 0x80, 0x14, 0xb1, 0xe9, 0xaa, 0xcb,
	0x4a, 0xfd, 0x0b, 0x5d, 0x74, 0xd9, 0x9f, 0xc1, 0xae, 0x48, 0xdd, 0x74, 0x55, 0x55, 0x50, 0xa9,
	0x7f, 0xa3, 0x9a, 0x8f, 0x38, 0xb1, 0xeb, 0x54, 0x48, 0xdd, 0x20, 0xcf, 0x3d, 0x87, 0x73, 0xae,
	0xcf, 0x1d, 0xdf, 0x80, 0x95, 0x98, 0x76, 0x43, 0x82, 0xd8, 0x09, 0x4e, 0xd0, 0x71, 0x0b, 0xbd,
	0x1c, 0x90, 0xfe, 0xd0, 0x4d, 0xfa, 0x34, 0xa5, 0x70, 0x5e, 0x40, 0x2e, 0x87, 0xdc, 0xe3, 0x96,
	0xb5, 0x80, 0xa3, 0x20, 0xa6, 0x48, 0xfc, 0x95, 0x0c, 0xcb, 0x3e, 0xa4, 0x2c, 0xa2, 0x0c, 0x75,
	0x31, 0x23, 0xe8, 0xb8, 0xd5, 0x25, 0x29, 0x6e, 0xa1, 0x43, 0x1a, 0xc4, 0x0a, 0xff, 0x57, 0xe1,
	0x42, 0xb5, 0x20, 0x6f, 0x35, 0x7c, 0xea, 0x53, 0xf1, 0x88, 0xf8, 0x93, 0xaa, 0xae, 0xfa, 0x94,
	0xfa, 0x21, 0x41, 0x38, 0x09, 0x10, 0x8e, 0x63, 0x9a, 0xe2, 0x34, 0xa0, 0x31, 0x53, 0xe8, 0x7f,
	0xf9, 0x6e, 0x71, 0xe8, 0xd3, 0x7e, 0x90, 0x1e, 0x45, 0x0a, 0x36, 0xf3, 0x70, 0x42, 0x69, 0x58,
	0x8e, 0xf4, 0x71, 0x4a, 0xca, 0x11, 0xf1, 0xb6, 0x12, 0x59, 0xca, 0x23, 0xe9, 0xa9, 0xac, 0x3b,
	0x5b, 0x00, 0x3c, 0xe3, 0xef, 0xe1, 0xe1, 0x94, 0x30, 0xf8, 0x10, 0xd4, 0xb2, 0x36, 0x4c, 0xad,
	0xa9, 0xad, 0xff, 0xdd, 0x36, 0xdd, 0x5c, 0x72, 0xee, 0x93, 0x11, 0xee, 0x8d, 0xa9, 0xce, 0x0e,
	0x80, 0x63, 0x15, 0x8f, 0xb0, 0x84, 0xc6, 0x8c, 0xc0, 0xfb, 0xc0, 0xe0, 0xbd, 0x31, 0x53, 0x6b,
	0xce, 0xae, 0xd7, 0xdb, 0x8b, 0x05, 0x25, 0x4e, 0xee, 0xd4, 0x2e, 0xbe, 0xfe, 0x5f, 0xf9, 0xf0,
	0xe3, 0xe3, 0x86, 0xe6, 0x49, 0xb2, 0xf3, 0x1c, 0xd4, 0x32, 0x2d, 0xd8, 0x00, 0x46, 0x8f, 0xc4,
	0x54, 0x36, 0x53, 0xf3, 0xe4, 0x21, 0xdf, 0xe6, 0xcc, 0xcd, 0xdb, 0xdc, 0x06, 0x0b, 0x99, 0xf4,
	0x1f, 0x76, 0x39, 0x0f, 0xea, 0x42, 0x6a, 0x0f, 0x0f, 0x18, 0xe9, 0x39, 0x8f, 0xc1, 0xe2, 0xc4,
	0x31, 0xd3, 0x5e, 0x07, 0x73, 0x89, 0xa8, 0x1c, 0xf0, 0xf1, 0x49, 0x0b, 0xbd, 0x63, 0x48, 0xa5,
	0xba, 0x84, 0xf6, 0x38, 0xe2, 0xcc, 0xa9, 0x39, 0xc8, 0xd3, 0xae, 0xca, 0x53, 0x9c, 0x32, 0xb5,
	0x4d, 0x60, 0x8c, 0x65, 0xea, 0x6d, 0xab, 0xd0, 0x29, 0x27, 0x6f, 0x91, 0x14, 0x07, 0x21, 0x1b,
	0x59, 0x48, 0xbe, 0x73, 0x4b, 0x45, 0xca, 0x19, 0x70, 0x19, 0xfc, 0xc5, 0xab, 0x07, 0x41, 0x4f,
	0x84, 0xaa, 0x7b, 0x55, 0x7e, 0xdc, 0xee, 0x39, 0x3b, 0x2a, 0x1d, 0xce, 0xca, 0x3c, 0x1f, 0x00,
	0x9d, 0xc3, 0x82, 0x7a, 0x23, 0x4b, 0x41, 0x77, 0x3e, 0x69, 0x4a, 0x6c, 0x3f, 0x88, 0x06, 0x21,
	0x4e, 0xc9, 0xfe, 0x09, 0x4e, 0xa0, 0x05, 0xaa, 0x2c, 0xf0, 0x63, 0xd2, 0x97, 0xe3, 0xec, 0xcc,
	0x98, 0x9a, 0xa7, 0x2a, 0x70, 0x13, 0x54, 0x71, 0x44, 0x07, 0x71, 0x2a, 0x06, 0x5a, 0x6f, 0xaf,
	0xb8, 0xf2, 0x7b, 0x73, 0xf9, 0xf7, 0xe8, 0xaa, 0xef, 0xd1, 0x7d, 0x4a, 0x83, 0xb8, 0xa3, 0xf3,
	0x69, 0x78, 0x8a, 0x0e, 0xdb, 0xa0, 0xda, 0xa7, 0x03, 0x3e, 0xc0, 0x59, 0x11, 0x4b, 0xa3, 0x38,
	0x40, 0x0e, 0x8e, 0xfe, 0x47, 0x32, 0x61, 0x0b, 0xcc, 0x46, 0x41, 0x6c, 0xea, 0x37, 0x73, 0xe2,
	0xdc, 0xf6, 0x7b, 0x03, 0x18, 0xe2, 0x8d, 0x60, 0x08, 0xaa, 0x72, 0xcc, 0xb0, 0x18, 0xc7, 0xc4,
	0x15, 0xb0, 0x9c, 0xe9, 0xd8, 0x28, 0x5c, 0xc7, 0x79, 0xc3, 0x23, 0x7b, 0xfd, 0xf9, 0xfb, 0xbb,
	0x99, 0x65, 0xf8, 0x0f, 0x2a, 0x7c, 0xf0, 0xd2, 0xe3, 0x08, 0x18, 0xe2, 0x16, 0xc0, 0x95, 0x52,
	0x41, 0x0e, 0x59, 0x6b, 0x53, 0xa1, 0xcc, 0x6a, 0x6d, 0x6c, 0xb5, 0x04, 0x1b, 0xe8, 0xd7, 0xdd,
	0xc2, 0x20, 0x05, 0xba, 0xb8, 0x20, 0xe6, 0x34, 0x35, 0xab, 0x39, 0x0d, 0xc9, 0x6c, 0xee, 0x8e,
	0x6d, 0x9a, 0xd0, 0x2e, 0xb3, 0x41, 0x67, 0xea, 0xf6, 0x9d, 0xc3, 0x21, 0x98, 0xcb, 0x5d, 0x8f,
	0x52, 0xf9, 0x49, 0x86, 0x65, 0x17, 0x18, 0xbb, 0xcc, 0xe7, 0xf5, 0xcc, 0xfe, 0xb6, 0x70, 0x5e,
	0x7b, 0xa4, 0x6d, 0x38, 0xab, 0x05, 0x73, 0xa6, 0x74, 0x0e, 0x78, 0x81, 0xa7, 0x2a, 0x37, 0x5e,
	0x69, 0xaa, 0x02, 0x2a, 0x4f, 0x35, 0xb7, 0xe1, 0x7e, 0x9f, 0xaa, 0x58, 0x14, 0x30, 0x02, 0xba,
	0xd8, 0x64, 0xe6, 0x34, 0xb5, 0xf2, 0x54, 0x27, 0x57, 0x94, 0x73, 0x67, 0x6c, 0x63, 0xc3, 0xd5,
	0x32, 0x1b, 0x74, 0x26, 0x36, 0xe3, 0x79, 0xc7, 0xbd, 0xb8, 0xb2, 0xb5, 0xcb, 0x2b, 0x5b, 0xfb,
	0x76, 0x65, 0x6b, 0x6f, 0xaf, 0xed, 0xca, 0xe5, 0xb5, 0x5d, 0xf9, 0x72, 0x6d, 0x57, 0x5e, 0x34,
	0x84, 0xbe, 0xb4, 0x3a, 0x1d, 0xbe, 0x42, 0xe9, 0x30, 0x21, 0xac, 0x5b, 0x15, 0x3f, 0x03, 0xf7,
	0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xd8, 0x4e, 0x93, 0x3b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves a list of the currently paused Pools.
	Paused(ctx context.Context, in *QueryPaused, opts ...grpc.CallOption) (*QueryPausedResponse, error)
	// Retrieves the details of all Pools.
	Pools(ctx context.Context, in *QueryPools, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	// Retrieves details of a specific Pool.
	Pool(ctx context.Context, in *QueryPool, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Simulates a token swap simulation.
	SimulateSwap(ctx context.Context, in *QuerySimulateSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
	// Retrieves exchange rates for all tokens, with the optionality of filtering by algorithm.
	Rates(ctx context.Context, in *QueryRates, opts ...grpc.CallOption) (*QueryRatesResponse, error)
	// Retrieves exchange rates for a specific token, with the optionality of filtering by algorithm.
	Rate(ctx context.Context, in *QueryRate, opts ...grpc.CallOption) (*QueryRateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Paused(ctx context.Context, in *QueryPaused, opts ...grpc.CallOption) (*QueryPausedResponse, error) {
	out := new(QueryPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.v1.Query/Paused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPools, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.v1.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPool, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.v1.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateSwap(ctx context.Context, in *QuerySimulateSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.v1.Query/SimulateSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rates(ctx context.Context, in *QueryRates, opts ...grpc.CallOption) (*QueryRatesResponse, error) {
	out := new(QueryRatesResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.v1.Query/Rates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rate(ctx context.Context, in *QueryRate, opts ...grpc.CallOption) (*QueryRateResponse, error) {
	out := new(QueryRateResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.v1.Query/Rate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves a list of the currently paused Pools.
	Paused(context.Context, *QueryPaused) (*QueryPausedResponse, error)
	// Retrieves the details of all Pools.
	Pools(context.Context, *QueryPools) (*QueryPoolsResponse, error)
	// Retrieves details of a specific Pool.
	Pool(context.Context, *QueryPool) (*QueryPoolResponse, error)
	// Simulates a token swap simulation.
	SimulateSwap(context.Context, *QuerySimulateSwap) (*MsgSwapResponse, error)
	// Retrieves exchange rates for all tokens, with the optionality of filtering by algorithm.
	Rates(context.Context, *QueryRates) (*QueryRatesResponse, error)
	// Retrieves exchange rates for a specific token, with the optionality of filtering by algorithm.
	Rate(context.Context, *QueryRate) (*QueryRateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Paused(ctx context.Context, req *QueryPaused) (*QueryPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paused not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPools) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPool) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) SimulateSwap(ctx context.Context, req *QuerySimulateSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateSwap not implemented")
}
func (*UnimplementedQueryServer) Rates(ctx context.Context, req *QueryRates) (*QueryRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rates not implemented")
}
func (*UnimplementedQueryServer) Rate(ctx context.Context, req *QueryRate) (*QueryRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rate not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Paused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaused)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Paused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.v1.Query/Paused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Paused(ctx, req.(*QueryPaused))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPools)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.v1.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPools))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.v1.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.v1.Query/SimulateSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateSwap(ctx, req.(*QuerySimulateSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.v1.Query/Rates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rates(ctx, req.(*QueryRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.v1.Query/Rate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rate(ctx, req.(*QueryRate))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.swap.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paused",
			Handler:    _Query_Paused_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "SimulateSwap",
			Handler:    _Query_SimulateSwap_Handler,
		},
		{
			MethodName: "Rates",
			Handler:    _Query_Rates_Handler,
		},
		{
			MethodName: "Rate",
			Handler:    _Query_Rate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/swap/v1/query.proto",
}

func (m *QueryRates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for iNdEx := len(m.Rates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for iNdEx := len(m.Rates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PausedPools) > 0 {
		dAtA2 := make([]byte, len(m.PausedPools)*10)
		var j1 int
		for _, num := range m.PausedPools {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Min.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Algorithm != 0 {
		n += 1 + sovQuery(uint64(m.Algorithm))
	}
	return n
}

func (m *QueryRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for _, e := range m.Rates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Algorithm != 0 {
		n += 1 + sovQuery(uint64(m.Algorithm))
	}
	return n
}

func (m *QueryRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rates) > 0 {
		for _, e := range m.Rates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PausedPools) > 0 {
		l = 0
		for _, e := range m.PausedPools {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Min.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rates = append(m.Rates, Rate{})
			if err := m.Rates[len(m.Rates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rates = append(m.Rates, Rate{})
			if err := m.Rates[len(m.Rates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PausedPools = append(m.PausedPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PausedPools) == 0 {
					m.PausedPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PausedPools = append(m.PausedPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PausedPools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &PoolDetails{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &PoolDetails{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Min.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
