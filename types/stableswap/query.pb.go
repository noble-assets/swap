// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/swap/stableswap/v1/query.proto

package stableswap

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPositionsByProvider struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryPositionsByProvider) Reset()         { *m = QueryPositionsByProvider{} }
func (m *QueryPositionsByProvider) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsByProvider) ProtoMessage()    {}
func (*QueryPositionsByProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{0}
}
func (m *QueryPositionsByProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsByProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsByProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsByProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsByProvider.Merge(m, src)
}
func (m *QueryPositionsByProvider) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsByProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsByProvider.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsByProvider proto.InternalMessageInfo

func (m *QueryPositionsByProvider) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type QueryPositionsByProviderResponse struct {
	BondedPositions    []QueryBondedPositionResponseEntry    `protobuf:"bytes,1,rep,name=bonded_positions,json=bondedPositions,proto3" json:"bonded_positions"`
	UnbondingPositions []QueryUnbondingPositionResponseEntry `protobuf:"bytes,2,rep,name=unbonding_positions,json=unbondingPositions,proto3" json:"unbonding_positions"`
	Rewards            []QueryRewardsResponseEntry           `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards"`
}

func (m *QueryPositionsByProviderResponse) Reset()         { *m = QueryPositionsByProviderResponse{} }
func (m *QueryPositionsByProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsByProviderResponse) ProtoMessage()    {}
func (*QueryPositionsByProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{1}
}
func (m *QueryPositionsByProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsByProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsByProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsByProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsByProviderResponse.Merge(m, src)
}
func (m *QueryPositionsByProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsByProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsByProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsByProviderResponse proto.InternalMessageInfo

func (m *QueryPositionsByProviderResponse) GetBondedPositions() []QueryBondedPositionResponseEntry {
	if m != nil {
		return m.BondedPositions
	}
	return nil
}

func (m *QueryPositionsByProviderResponse) GetUnbondingPositions() []QueryUnbondingPositionResponseEntry {
	if m != nil {
		return m.UnbondingPositions
	}
	return nil
}

func (m *QueryPositionsByProviderResponse) GetRewards() []QueryRewardsResponseEntry {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type QueryBondedPositionsByProvider struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryBondedPositionsByProvider) Reset()         { *m = QueryBondedPositionsByProvider{} }
func (m *QueryBondedPositionsByProvider) String() string { return proto.CompactTextString(m) }
func (*QueryBondedPositionsByProvider) ProtoMessage()    {}
func (*QueryBondedPositionsByProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{2}
}
func (m *QueryBondedPositionsByProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedPositionsByProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedPositionsByProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedPositionsByProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedPositionsByProvider.Merge(m, src)
}
func (m *QueryBondedPositionsByProvider) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedPositionsByProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedPositionsByProvider.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedPositionsByProvider proto.InternalMessageInfo

func (m *QueryBondedPositionsByProvider) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type QueryBondedPositionsByProviderResponse struct {
	BondedPositions []QueryBondedPositionResponseEntry `protobuf:"bytes,1,rep,name=bonded_positions,json=bondedPositions,proto3" json:"bonded_positions"`
}

func (m *QueryBondedPositionsByProviderResponse) Reset() {
	*m = QueryBondedPositionsByProviderResponse{}
}
func (m *QueryBondedPositionsByProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBondedPositionsByProviderResponse) ProtoMessage()    {}
func (*QueryBondedPositionsByProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{3}
}
func (m *QueryBondedPositionsByProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedPositionsByProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedPositionsByProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedPositionsByProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedPositionsByProviderResponse.Merge(m, src)
}
func (m *QueryBondedPositionsByProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedPositionsByProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedPositionsByProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedPositionsByProviderResponse proto.InternalMessageInfo

func (m *QueryBondedPositionsByProviderResponse) GetBondedPositions() []QueryBondedPositionResponseEntry {
	if m != nil {
		return m.BondedPositions
	}
	return nil
}

type QueryUnbondingPositionsByProvider struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryUnbondingPositionsByProvider) Reset()         { *m = QueryUnbondingPositionsByProvider{} }
func (m *QueryUnbondingPositionsByProvider) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingPositionsByProvider) ProtoMessage()    {}
func (*QueryUnbondingPositionsByProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{4}
}
func (m *QueryUnbondingPositionsByProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingPositionsByProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingPositionsByProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingPositionsByProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingPositionsByProvider.Merge(m, src)
}
func (m *QueryUnbondingPositionsByProvider) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingPositionsByProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingPositionsByProvider.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingPositionsByProvider proto.InternalMessageInfo

func (m *QueryUnbondingPositionsByProvider) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type QueryUnbondingPositionsByProviderResponse struct {
	UnbondingPositions []QueryUnbondingPositionResponseEntry `protobuf:"bytes,1,rep,name=unbonding_positions,json=unbondingPositions,proto3" json:"unbonding_positions"`
}

func (m *QueryUnbondingPositionsByProviderResponse) Reset() {
	*m = QueryUnbondingPositionsByProviderResponse{}
}
func (m *QueryUnbondingPositionsByProviderResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryUnbondingPositionsByProviderResponse) ProtoMessage() {}
func (*QueryUnbondingPositionsByProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{5}
}
func (m *QueryUnbondingPositionsByProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingPositionsByProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingPositionsByProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingPositionsByProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingPositionsByProviderResponse.Merge(m, src)
}
func (m *QueryUnbondingPositionsByProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingPositionsByProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingPositionsByProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingPositionsByProviderResponse proto.InternalMessageInfo

func (m *QueryUnbondingPositionsByProviderResponse) GetUnbondingPositions() []QueryUnbondingPositionResponseEntry {
	if m != nil {
		return m.UnbondingPositions
	}
	return nil
}

type QueryRewardsByProvider struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryRewardsByProvider) Reset()         { *m = QueryRewardsByProvider{} }
func (m *QueryRewardsByProvider) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByProvider) ProtoMessage()    {}
func (*QueryRewardsByProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{6}
}
func (m *QueryRewardsByProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByProvider.Merge(m, src)
}
func (m *QueryRewardsByProvider) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByProvider.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByProvider proto.InternalMessageInfo

func (m *QueryRewardsByProvider) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type QueryRewardsByProviderResponse struct {
	Rewards []QueryRewardsResponseEntry `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards"`
}

func (m *QueryRewardsByProviderResponse) Reset()         { *m = QueryRewardsByProviderResponse{} }
func (m *QueryRewardsByProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByProviderResponse) ProtoMessage()    {}
func (*QueryRewardsByProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{7}
}
func (m *QueryRewardsByProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByProviderResponse.Merge(m, src)
}
func (m *QueryRewardsByProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByProviderResponse proto.InternalMessageInfo

func (m *QueryRewardsByProviderResponse) GetRewards() []QueryRewardsResponseEntry {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type QueryBondedPositionResponseEntry struct {
	PoolId    uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Shares    cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
	Timestamp time.Time                   `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *QueryBondedPositionResponseEntry) Reset()         { *m = QueryBondedPositionResponseEntry{} }
func (m *QueryBondedPositionResponseEntry) String() string { return proto.CompactTextString(m) }
func (*QueryBondedPositionResponseEntry) ProtoMessage()    {}
func (*QueryBondedPositionResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{8}
}
func (m *QueryBondedPositionResponseEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBondedPositionResponseEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBondedPositionResponseEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBondedPositionResponseEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBondedPositionResponseEntry.Merge(m, src)
}
func (m *QueryBondedPositionResponseEntry) XXX_Size() int {
	return m.Size()
}
func (m *QueryBondedPositionResponseEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBondedPositionResponseEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBondedPositionResponseEntry proto.InternalMessageInfo

func (m *QueryBondedPositionResponseEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryBondedPositionResponseEntry) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type QueryUnbondingPositionResponseEntry struct {
	PoolId          uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	UnbondingShares cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=unbonding_shares,json=unbondingShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"unbonding_shares"`
	EndTime         time.Time                   `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *QueryUnbondingPositionResponseEntry) Reset()         { *m = QueryUnbondingPositionResponseEntry{} }
func (m *QueryUnbondingPositionResponseEntry) String() string { return proto.CompactTextString(m) }
func (*QueryUnbondingPositionResponseEntry) ProtoMessage()    {}
func (*QueryUnbondingPositionResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{9}
}
func (m *QueryUnbondingPositionResponseEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnbondingPositionResponseEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnbondingPositionResponseEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnbondingPositionResponseEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnbondingPositionResponseEntry.Merge(m, src)
}
func (m *QueryUnbondingPositionResponseEntry) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnbondingPositionResponseEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnbondingPositionResponseEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnbondingPositionResponseEntry proto.InternalMessageInfo

func (m *QueryUnbondingPositionResponseEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryUnbondingPositionResponseEntry) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

type QueryRewardsResponseEntry struct {
	PoolId uint64                                   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QueryRewardsResponseEntry) Reset()         { *m = QueryRewardsResponseEntry{} }
func (m *QueryRewardsResponseEntry) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsResponseEntry) ProtoMessage()    {}
func (*QueryRewardsResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_79e9b83b56fa5817, []int{10}
}
func (m *QueryRewardsResponseEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsResponseEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsResponseEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsResponseEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsResponseEntry.Merge(m, src)
}
func (m *QueryRewardsResponseEntry) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsResponseEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsResponseEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsResponseEntry proto.InternalMessageInfo

func (m *QueryRewardsResponseEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryRewardsResponseEntry) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPositionsByProvider)(nil), "noble.swap.stableswap.v1.QueryPositionsByProvider")
	proto.RegisterType((*QueryPositionsByProviderResponse)(nil), "noble.swap.stableswap.v1.QueryPositionsByProviderResponse")
	proto.RegisterType((*QueryBondedPositionsByProvider)(nil), "noble.swap.stableswap.v1.QueryBondedPositionsByProvider")
	proto.RegisterType((*QueryBondedPositionsByProviderResponse)(nil), "noble.swap.stableswap.v1.QueryBondedPositionsByProviderResponse")
	proto.RegisterType((*QueryUnbondingPositionsByProvider)(nil), "noble.swap.stableswap.v1.QueryUnbondingPositionsByProvider")
	proto.RegisterType((*QueryUnbondingPositionsByProviderResponse)(nil), "noble.swap.stableswap.v1.QueryUnbondingPositionsByProviderResponse")
	proto.RegisterType((*QueryRewardsByProvider)(nil), "noble.swap.stableswap.v1.QueryRewardsByProvider")
	proto.RegisterType((*QueryRewardsByProviderResponse)(nil), "noble.swap.stableswap.v1.QueryRewardsByProviderResponse")
	proto.RegisterType((*QueryBondedPositionResponseEntry)(nil), "noble.swap.stableswap.v1.QueryBondedPositionResponseEntry")
	proto.RegisterType((*QueryUnbondingPositionResponseEntry)(nil), "noble.swap.stableswap.v1.QueryUnbondingPositionResponseEntry")
	proto.RegisterType((*QueryRewardsResponseEntry)(nil), "noble.swap.stableswap.v1.QueryRewardsResponseEntry")
}

func init() {
	proto.RegisterFile("noble/swap/stableswap/v1/query.proto", fileDescriptor_79e9b83b56fa5817)
}

var fileDescriptor_79e9b83b56fa5817 = []byte{
	// 854 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xf6, 0x40, 0x6b, 0xf0, 0x50, 0x09, 0x58, 0xaa, 0xd6, 0x76, 0xd1, 0xda, 0xdd, 0x56, 0x95,
	0x8b, 0xca, 0x2c, 0x36, 0x2d, 0xe5, 0x47, 0x2b, 0xaa, 0x05, 0x2a, 0x55, 0xaa, 0x2a, 0xea, 0xb6,
	0x52, 0xd5, 0x8b, 0xb5, 0xeb, 0x9d, 0x9a, 0x15, 0xf6, 0xce, 0x76, 0x67, 0x6d, 0xba, 0x54, 0xbd,
	0xf4, 0xd4, 0x23, 0x52, 0x6e, 0xfc, 0x01, 0x51, 0x94, 0x4b, 0x38, 0xe4, 0x94, 0x63, 0x4e, 0xdc,
	0x42, 0x92, 0x4b, 0x94, 0x48, 0x10, 0x99, 0x48, 0x28, 0xff, 0x45, 0xb4, 0xb3, 0xb3, 0xeb, 0x0d,
	0x78, 0xb1, 0x9d, 0x10, 0xe5, 0x02, 0x3b, 0x33, 0xef, 0x7b, 0xdf, 0xfb, 0xe6, 0xcd, 0x7c, 0x63,
	0xf8, 0xa9, 0x49, 0xb4, 0x3a, 0x96, 0xe9, 0x8e, 0x6a, 0xc9, 0xd4, 0x51, 0xb5, 0x3a, 0x66, 0x9f,
	0xad, 0xa2, 0xfc, 0x57, 0x13, 0xdb, 0x2e, 0xb2, 0x6c, 0xe2, 0x10, 0x21, 0xcd, 0xa2, 0x90, 0xb7,
	0x84, 0x3a, 0x51, 0xa8, 0x55, 0xcc, 0x4e, 0xaa, 0x0d, 0xc3, 0x24, 0x32, 0xfb, 0xeb, 0x07, 0x67,
	0xc5, 0x2a, 0xa1, 0x0d, 0x42, 0x65, 0x4d, 0xa5, 0x58, 0x6e, 0x15, 0x35, 0xec, 0xa8, 0x45, 0xb9,
	0x4a, 0x0c, 0x93, 0xaf, 0x7f, 0xc4, 0xd7, 0x19, 0xc1, 0x39, 0xa6, 0x6c, 0xc6, 0x5f, 0xac, 0xb0,
	0x91, 0xec, 0x0f, 0xf8, 0xd2, 0xfb, 0x35, 0x52, 0x23, 0xfe, 0xbc, 0xf7, 0xc5, 0x67, 0xa7, 0x6b,
	0x84, 0xd4, 0xea, 0x58, 0x56, 0x2d, 0x43, 0x56, 0x4d, 0x93, 0x38, 0xaa, 0x63, 0x10, 0x33, 0xc0,
	0xe4, 0xf8, 0x2a, 0x1b, 0x69, 0xcd, 0x3f, 0x65, 0xc7, 0x68, 0x60, 0xea, 0xa8, 0x0d, 0xcb, 0x0f,
	0x90, 0x16, 0x60, 0xfa, 0x67, 0x8f, 0x7e, 0x93, 0x50, 0x83, 0x01, 0x15, 0x77, 0xd3, 0x26, 0x2d,
	0x43, 0xc7, 0xb6, 0x90, 0x85, 0xa3, 0x16, 0xff, 0x4e, 0x83, 0x3c, 0x28, 0xa4, 0xca, 0xe1, 0x58,
	0x7a, 0x3e, 0x04, 0xf3, 0x71, 0xc0, 0x32, 0xa6, 0x16, 0x31, 0x29, 0x16, 0x2c, 0x38, 0xa1, 0x11,
	0x53, 0xc7, 0x7a, 0xc5, 0x0a, 0xa2, 0xd2, 0x20, 0x3f, 0x5c, 0x18, 0x2b, 0x2d, 0xa3, 0xb8, 0x1d,
	0x45, 0x2c, 0xab, 0xc2, 0x60, 0x41, 0xee, 0x20, 0xe1, 0x86, 0xe9, 0xd8, 0xae, 0x92, 0x3a, 0x3c,
	0xce, 0x25, 0x6e, 0x9c, 0x1d, 0xcc, 0x80, 0xf2, 0xb8, 0xf6, 0x52, 0x1c, 0x15, 0x5c, 0x38, 0xd5,
	0x34, 0xbd, 0x49, 0xc3, 0xac, 0x45, 0x48, 0x87, 0x18, 0xe9, 0xb7, 0x3d, 0x48, 0x7f, 0x0b, 0x90,
	0x3d, 0x79, 0x85, 0xe6, 0xf9, 0x50, 0x2a, 0xfc, 0x0e, 0x47, 0x6c, 0xbc, 0xa3, 0xda, 0x3a, 0x4d,
	0x0f, 0x33, 0xba, 0xf9, 0x1e, 0x74, 0x65, 0x3f, 0x3a, 0x96, 0x24, 0x48, 0x27, 0x7d, 0x03, 0xc5,
	0x2e, 0x9b, 0xd2, 0x6f, 0xa7, 0xf6, 0x01, 0xfc, 0xec, 0x72, 0xf8, 0xdb, 0xeb, 0x97, 0xb4, 0x0a,
	0x3f, 0xee, 0xbe, 0xf5, 0xfd, 0xaa, 0xbb, 0x0e, 0xe0, 0xe7, 0x3d, 0x33, 0x84, 0x02, 0x63, 0x8e,
	0x07, 0x78, 0xf3, 0xc7, 0x43, 0xfa, 0x12, 0x7e, 0x10, 0xed, 0x7a, 0x9f, 0xf2, 0x76, 0x79, 0xeb,
	0x2f, 0xa0, 0x42, 0x49, 0x91, 0x63, 0x07, 0xae, 0xf6, 0xd8, 0xdd, 0x03, 0xfc, 0x8a, 0x5f, 0xd2,
	0x5c, 0xe1, 0x43, 0x38, 0x62, 0x11, 0x52, 0xaf, 0x18, 0x3a, 0xab, 0xfd, 0x9d, 0x72, 0xd2, 0x1b,
	0xfe, 0xa0, 0x0b, 0x3f, 0xc1, 0x24, 0xdd, 0x52, 0x6d, 0xec, 0x5d, 0x3e, 0x50, 0x48, 0x29, 0x0b,
	0x1e, 0xc3, 0xe3, 0xe3, 0x1c, 0x77, 0x3f, 0xaa, 0x6f, 0x23, 0x83, 0xc8, 0x0d, 0xd5, 0xd9, 0x42,
	0x3f, 0xe2, 0x9a, 0x5a, 0x75, 0xd7, 0x71, 0xf5, 0xc1, 0xed, 0x59, 0xc8, 0x2d, 0x6f, 0x1d, 0x57,
	0xfd, 0x72, 0x78, 0x16, 0x41, 0x81, 0xa9, 0xd0, 0xbb, 0xd2, 0xc3, 0x79, 0x50, 0x18, 0x2b, 0x65,
	0x91, 0xef, 0x6e, 0x28, 0x70, 0x37, 0xf4, 0x6b, 0x10, 0xa1, 0x8c, 0x7a, 0x74, 0x7b, 0x27, 0x39,
	0x50, 0xee, 0xc0, 0xa4, 0x36, 0x80, 0x9f, 0xf4, 0xd1, 0xca, 0x78, 0x51, 0x2a, 0x9c, 0xe8, 0x9c,
	0x9f, 0x2b, 0x91, 0x37, 0x1e, 0xe6, 0xfb, 0xc5, 0xd7, 0xb9, 0x0a, 0x47, 0xb1, 0xa9, 0x57, 0xbc,
	0xa2, 0x07, 0x92, 0x39, 0x82, 0x4d, 0xdd, 0x9b, 0x97, 0x6e, 0x01, 0x98, 0x89, 0x6d, 0x74, 0xbc,
	0x34, 0x17, 0x26, 0xd5, 0x06, 0x69, 0x9a, 0x0e, 0x37, 0xcb, 0x0c, 0xe2, 0xa5, 0x7a, 0xcf, 0x18,
	0xe2, 0xcf, 0x18, 0x5a, 0x23, 0x86, 0xa9, 0x7c, 0xef, 0x91, 0xde, 0x3c, 0xc9, 0x15, 0x6a, 0x86,
	0xb3, 0xd5, 0xd4, 0x50, 0x95, 0x34, 0xf8, 0x4b, 0xc5, 0xff, 0xcd, 0x52, 0x7d, 0x5b, 0x76, 0x5c,
	0x0b, 0x53, 0x06, 0xa0, 0xfb, 0x67, 0x07, 0x33, 0xef, 0xd5, 0xd9, 0x36, 0x54, 0xbc, 0x87, 0x90,
	0xf2, 0xd6, 0xfa, 0x84, 0xa5, 0xfb, 0x49, 0xf8, 0x2e, 0xab, 0x58, 0xb8, 0x0b, 0xe0, 0x54, 0x37,
	0x07, 0x28, 0xf5, 0x38, 0xd3, 0x5d, 0x30, 0xd9, 0xe5, 0xc1, 0x31, 0xc1, 0x56, 0x49, 0x2b, 0xff,
	0x7b, 0x05, 0xfe, 0xf7, 0xf0, 0xd9, 0xb5, 0xa1, 0x39, 0x01, 0xc9, 0xb1, 0xbf, 0x11, 0x42, 0x0b,
	0x91, 0xff, 0x09, 0xae, 0xec, 0xbf, 0xc2, 0x13, 0x00, 0x33, 0xf1, 0x56, 0xbd, 0x38, 0x90, 0x93,
	0x46, 0x05, 0x7d, 0xf7, 0xaa, 0xc8, 0x50, 0x96, 0xd2, 0x91, 0xf5, 0xb5, 0xf0, 0x55, 0xbc, 0x2c,
	0xdf, 0xa5, 0x67, 0xbb, 0xaa, 0x3b, 0x03, 0x70, 0xfa, 0x52, 0xb7, 0x5e, 0x19, 0xd4, 0x46, 0xa3,
	0x1a, 0xd7, 0x5e, 0x03, 0x1c, 0xca, 0xdc, 0xe8, 0xc8, 0x5c, 0x16, 0x16, 0xe3, 0x65, 0x86, 0x57,
	0xaf, 0xbb, 0xd2, 0x3b, 0x00, 0x4e, 0x5e, 0x74, 0xeb, 0xb9, 0xfe, 0xec, 0x35, 0xa2, 0x69, 0x71,
	0x50, 0x44, 0x28, 0x64, 0xa9, 0x23, 0x04, 0x09, 0x5f, 0xc4, 0x0b, 0xe1, 0x8e, 0x1d, 0x29, 0x5e,
	0x59, 0x3a, 0x6c, 0x8b, 0xe0, 0xa8, 0x2d, 0x82, 0xa7, 0x6d, 0x11, 0xec, 0x9d, 0x8a, 0x89, 0xa3,
	0x53, 0x31, 0xf1, 0xe8, 0x54, 0x4c, 0xfc, 0x91, 0x63, 0xe4, 0x7e, 0x49, 0x7f, 0xbb, 0xbb, 0xfe,
	0x3d, 0x8d, 0x24, 0xd4, 0x92, 0xcc, 0x67, 0xe6, 0x5f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x46,
	0xa5, 0x47, 0x1b, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves all the positions by a specific provider, including bonded/unbonded positions and rewards.
	PositionsByProvider(ctx context.Context, in *QueryPositionsByProvider, opts ...grpc.CallOption) (*QueryPositionsByProviderResponse, error)
	// Retrieves all the bonded positions by a specific provider.
	BondedPositionsByProvider(ctx context.Context, in *QueryBondedPositionsByProvider, opts ...grpc.CallOption) (*QueryBondedPositionsByProviderResponse, error)
	// Retrieves all the unbonding positions by a specific provider.
	UnbondingPositionsByProvider(ctx context.Context, in *QueryUnbondingPositionsByProvider, opts ...grpc.CallOption) (*QueryUnbondingPositionsByProviderResponse, error)
	// Retrieves all the rewards by a specific provider.
	RewardsByProvider(ctx context.Context, in *QueryRewardsByProvider, opts ...grpc.CallOption) (*QueryRewardsByProviderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PositionsByProvider(ctx context.Context, in *QueryPositionsByProvider, opts ...grpc.CallOption) (*QueryPositionsByProviderResponse, error) {
	out := new(QueryPositionsByProviderResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.stableswap.v1.Query/PositionsByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BondedPositionsByProvider(ctx context.Context, in *QueryBondedPositionsByProvider, opts ...grpc.CallOption) (*QueryBondedPositionsByProviderResponse, error) {
	out := new(QueryBondedPositionsByProviderResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.stableswap.v1.Query/BondedPositionsByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingPositionsByProvider(ctx context.Context, in *QueryUnbondingPositionsByProvider, opts ...grpc.CallOption) (*QueryUnbondingPositionsByProviderResponse, error) {
	out := new(QueryUnbondingPositionsByProviderResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.stableswap.v1.Query/UnbondingPositionsByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByProvider(ctx context.Context, in *QueryRewardsByProvider, opts ...grpc.CallOption) (*QueryRewardsByProviderResponse, error) {
	out := new(QueryRewardsByProviderResponse)
	err := c.cc.Invoke(ctx, "/noble.swap.stableswap.v1.Query/RewardsByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves all the positions by a specific provider, including bonded/unbonded positions and rewards.
	PositionsByProvider(context.Context, *QueryPositionsByProvider) (*QueryPositionsByProviderResponse, error)
	// Retrieves all the bonded positions by a specific provider.
	BondedPositionsByProvider(context.Context, *QueryBondedPositionsByProvider) (*QueryBondedPositionsByProviderResponse, error)
	// Retrieves all the unbonding positions by a specific provider.
	UnbondingPositionsByProvider(context.Context, *QueryUnbondingPositionsByProvider) (*QueryUnbondingPositionsByProviderResponse, error)
	// Retrieves all the rewards by a specific provider.
	RewardsByProvider(context.Context, *QueryRewardsByProvider) (*QueryRewardsByProviderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PositionsByProvider(ctx context.Context, req *QueryPositionsByProvider) (*QueryPositionsByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsByProvider not implemented")
}
func (*UnimplementedQueryServer) BondedPositionsByProvider(ctx context.Context, req *QueryBondedPositionsByProvider) (*QueryBondedPositionsByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondedPositionsByProvider not implemented")
}
func (*UnimplementedQueryServer) UnbondingPositionsByProvider(ctx context.Context, req *QueryUnbondingPositionsByProvider) (*QueryUnbondingPositionsByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingPositionsByProvider not implemented")
}
func (*UnimplementedQueryServer) RewardsByProvider(ctx context.Context, req *QueryRewardsByProvider) (*QueryRewardsByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByProvider not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PositionsByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsByProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionsByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.stableswap.v1.Query/PositionsByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionsByProvider(ctx, req.(*QueryPositionsByProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BondedPositionsByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBondedPositionsByProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BondedPositionsByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.stableswap.v1.Query/BondedPositionsByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BondedPositionsByProvider(ctx, req.(*QueryBondedPositionsByProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingPositionsByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnbondingPositionsByProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingPositionsByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.stableswap.v1.Query/UnbondingPositionsByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingPositionsByProvider(ctx, req.(*QueryUnbondingPositionsByProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.swap.stableswap.v1.Query/RewardsByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByProvider(ctx, req.(*QueryRewardsByProvider))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.swap.stableswap.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PositionsByProvider",
			Handler:    _Query_PositionsByProvider_Handler,
		},
		{
			MethodName: "BondedPositionsByProvider",
			Handler:    _Query_BondedPositionsByProvider_Handler,
		},
		{
			MethodName: "UnbondingPositionsByProvider",
			Handler:    _Query_UnbondingPositionsByProvider_Handler,
		},
		{
			MethodName: "RewardsByProvider",
			Handler:    _Query_RewardsByProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/swap/stableswap/v1/query.proto",
}

func (m *QueryPositionsByProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsByProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsByProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionsByProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsByProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsByProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UnbondingPositions) > 0 {
		for iNdEx := len(m.UnbondingPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BondedPositions) > 0 {
		for iNdEx := len(m.BondedPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondedPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedPositionsByProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedPositionsByProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedPositionsByProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedPositionsByProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedPositionsByProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedPositionsByProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondedPositions) > 0 {
		for iNdEx := len(m.BondedPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondedPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingPositionsByProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingPositionsByProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingPositionsByProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingPositionsByProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingPositionsByProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingPositionsByProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingPositions) > 0 {
		for iNdEx := len(m.UnbondingPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBondedPositionResponseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBondedPositionResponseEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBondedPositionResponseEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQuery(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnbondingPositionResponseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnbondingPositionResponseEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnbondingPositionResponseEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQuery(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.UnbondingShares.Size()
		i -= size
		if _, err := m.UnbondingShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsResponseEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsResponseEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsResponseEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPositionsByProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionsByProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BondedPositions) > 0 {
		for _, e := range m.BondedPositions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbondingPositions) > 0 {
		for _, e := range m.UnbondingPositions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBondedPositionsByProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBondedPositionsByProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BondedPositions) > 0 {
		for _, e := range m.BondedPositions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUnbondingPositionsByProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnbondingPositionsByProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingPositions) > 0 {
		for _, e := range m.UnbondingPositions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRewardsByProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBondedPositionResponseEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = m.Shares.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUnbondingPositionResponseEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = m.UnbondingShares.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsResponseEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPositionsByProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsByProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsByProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsByProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsByProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsByProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondedPositions = append(m.BondedPositions, QueryBondedPositionResponseEntry{})
			if err := m.BondedPositions[len(m.BondedPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingPositions = append(m.UnbondingPositions, QueryUnbondingPositionResponseEntry{})
			if err := m.UnbondingPositions[len(m.UnbondingPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, QueryRewardsResponseEntry{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedPositionsByProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedPositionsByProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedPositionsByProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedPositionsByProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedPositionsByProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedPositionsByProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondedPositions = append(m.BondedPositions, QueryBondedPositionResponseEntry{})
			if err := m.BondedPositions[len(m.BondedPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingPositionsByProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingPositionsByProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingPositionsByProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingPositionsByProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingPositionsByProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingPositionsByProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingPositions = append(m.UnbondingPositions, QueryUnbondingPositionResponseEntry{})
			if err := m.UnbondingPositions[len(m.UnbondingPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, QueryRewardsResponseEntry{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBondedPositionResponseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBondedPositionResponseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBondedPositionResponseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnbondingPositionResponseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnbondingPositionResponseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnbondingPositionResponseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsResponseEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsResponseEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsResponseEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
