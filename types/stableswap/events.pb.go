// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/swap/stableswap/v1/events.proto

package stableswap

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolCreated struct {
	// ID of the newly created pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Algorithm of the pool.
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Pair asset denom in the pool.
	Pair string `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
	// Protocol fee percentage for the pool.
	ProtocolFeePercentage int64 `protobuf:"varint,4,opt,name=protocol_fee_percentage,json=protocolFeePercentage,proto3" json:"protocol_fee_percentage,omitempty"`
	// Rewards fee for the pool.
	RewardsFee int64 `protobuf:"varint,5,opt,name=rewards_fee,json=rewardsFee,proto3" json:"rewards_fee,omitempty"`
	// Initial amplification coefficient.
	InitialA int64 `protobuf:"varint,7,opt,name=initial_a,json=initialA,proto3" json:"initial_a,omitempty"`
	// Initial amplification coefficient.
	InitialATime int64 `protobuf:"varint,8,opt,name=initial_a_time,json=initialATime,proto3" json:"initial_a_time,omitempty"`
	// Future amplification coefficient.
	FutureA int64 `protobuf:"varint,9,opt,name=future_a,json=futureA,proto3" json:"future_a,omitempty"`
	// Time when the amplification change will take full effect.
	FutureATime int64 `protobuf:"varint,10,opt,name=future_a_time,json=futureATime,proto3" json:"future_a_time,omitempty"`
	// Rate multipliers applied to the coins.
	RateMultipliers github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,11,rep,name=rate_multipliers,json=rateMultipliers,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rate_multipliers"`
}

func (m *PoolCreated) Reset()         { *m = PoolCreated{} }
func (m *PoolCreated) String() string { return proto.CompactTextString(m) }
func (*PoolCreated) ProtoMessage()    {}
func (*PoolCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebef50c59245cec9, []int{0}
}
func (m *PoolCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolCreated.Merge(m, src)
}
func (m *PoolCreated) XXX_Size() int {
	return m.Size()
}
func (m *PoolCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolCreated.DiscardUnknown(m)
}

var xxx_messageInfo_PoolCreated proto.InternalMessageInfo

func (m *PoolCreated) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolCreated) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *PoolCreated) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *PoolCreated) GetProtocolFeePercentage() int64 {
	if m != nil {
		return m.ProtocolFeePercentage
	}
	return 0
}

func (m *PoolCreated) GetRewardsFee() int64 {
	if m != nil {
		return m.RewardsFee
	}
	return 0
}

func (m *PoolCreated) GetInitialA() int64 {
	if m != nil {
		return m.InitialA
	}
	return 0
}

func (m *PoolCreated) GetInitialATime() int64 {
	if m != nil {
		return m.InitialATime
	}
	return 0
}

func (m *PoolCreated) GetFutureA() int64 {
	if m != nil {
		return m.FutureA
	}
	return 0
}

func (m *PoolCreated) GetFutureATime() int64 {
	if m != nil {
		return m.FutureATime
	}
	return 0
}

func (m *PoolCreated) GetRateMultipliers() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RateMultipliers
	}
	return nil
}

type PoolUpdated struct {
	// ID of the updated pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Protocol fee percentage for the pool.
	ProtocolFeePercentage int64 `protobuf:"varint,2,opt,name=protocol_fee_percentage,json=protocolFeePercentage,proto3" json:"protocol_fee_percentage,omitempty"`
	// Rewards fee for the pool.
	RewardsFee int64 `protobuf:"varint,3,opt,name=rewards_fee,json=rewardsFee,proto3" json:"rewards_fee,omitempty"`
	// Future amplification coefficient.
	FutureA int64 `protobuf:"varint,5,opt,name=future_a,json=futureA,proto3" json:"future_a,omitempty"`
	// Time when the amplification change will take full effect.
	FutureATime int64 `protobuf:"varint,6,opt,name=future_a_time,json=futureATime,proto3" json:"future_a_time,omitempty"`
	// Rate multipliers applied to the coins.
	RateMultipliers github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=rate_multipliers,json=rateMultipliers,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rate_multipliers"`
}

func (m *PoolUpdated) Reset()         { *m = PoolUpdated{} }
func (m *PoolUpdated) String() string { return proto.CompactTextString(m) }
func (*PoolUpdated) ProtoMessage()    {}
func (*PoolUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebef50c59245cec9, []int{1}
}
func (m *PoolUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolUpdated.Merge(m, src)
}
func (m *PoolUpdated) XXX_Size() int {
	return m.Size()
}
func (m *PoolUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_PoolUpdated proto.InternalMessageInfo

func (m *PoolUpdated) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolUpdated) GetProtocolFeePercentage() int64 {
	if m != nil {
		return m.ProtocolFeePercentage
	}
	return 0
}

func (m *PoolUpdated) GetRewardsFee() int64 {
	if m != nil {
		return m.RewardsFee
	}
	return 0
}

func (m *PoolUpdated) GetFutureA() int64 {
	if m != nil {
		return m.FutureA
	}
	return 0
}

func (m *PoolUpdated) GetFutureATime() int64 {
	if m != nil {
		return m.FutureATime
	}
	return 0
}

func (m *PoolUpdated) GetRateMultipliers() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RateMultipliers
	}
	return nil
}

type LiquidityAdded struct {
	// Address of the liquidity provider.
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// ID of the pool.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Liquidity amount being added.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// Shares issued for the added liquidity.
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *LiquidityAdded) Reset()         { *m = LiquidityAdded{} }
func (m *LiquidityAdded) String() string { return proto.CompactTextString(m) }
func (*LiquidityAdded) ProtoMessage()    {}
func (*LiquidityAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebef50c59245cec9, []int{2}
}
func (m *LiquidityAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityAdded.Merge(m, src)
}
func (m *LiquidityAdded) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityAdded.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityAdded proto.InternalMessageInfo

func (m *LiquidityAdded) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *LiquidityAdded) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LiquidityAdded) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type LiquidityRemoved struct {
	// Provider address of the liquidity
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// ID of the pool.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Liquidity amount being removed.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// Shares burned for the removed liquidity.
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
	// Time when the removed liquidity will be unlocked.
	UnlockTime time.Time `protobuf:"bytes,3,opt,name=unlock_time,json=unlockTime,proto3,stdtime" json:"unlock_time"`
}

func (m *LiquidityRemoved) Reset()         { *m = LiquidityRemoved{} }
func (m *LiquidityRemoved) String() string { return proto.CompactTextString(m) }
func (*LiquidityRemoved) ProtoMessage()    {}
func (*LiquidityRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebef50c59245cec9, []int{3}
}
func (m *LiquidityRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityRemoved.Merge(m, src)
}
func (m *LiquidityRemoved) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityRemoved proto.InternalMessageInfo

func (m *LiquidityRemoved) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *LiquidityRemoved) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LiquidityRemoved) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *LiquidityRemoved) GetUnlockTime() time.Time {
	if m != nil {
		return m.UnlockTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*PoolCreated)(nil), "noble.swap.stableswap.v1.PoolCreated")
	proto.RegisterType((*PoolUpdated)(nil), "noble.swap.stableswap.v1.PoolUpdated")
	proto.RegisterType((*LiquidityAdded)(nil), "noble.swap.stableswap.v1.LiquidityAdded")
	proto.RegisterType((*LiquidityRemoved)(nil), "noble.swap.stableswap.v1.LiquidityRemoved")
}

func init() {
	proto.RegisterFile("noble/swap/stableswap/v1/events.proto", fileDescriptor_ebef50c59245cec9)
}

var fileDescriptor_ebef50c59245cec9 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0x8f, 0x93, 0x36, 0x7f, 0x2e, 0xa5, 0x94, 0x13, 0xa8, 0x6e, 0x8a, 0x92, 0x28, 0x02, 0x29,
	0xaa, 0x54, 0x5b, 0x29, 0x52, 0x25, 0xc6, 0xa6, 0xa5, 0x12, 0x52, 0x41, 0x95, 0x55, 0x16, 0x16,
	0xeb, 0x6c, 0xbf, 0x3a, 0xa7, 0xda, 0x3e, 0xe3, 0x3b, 0xa7, 0x84, 0xcf, 0xc0, 0xd0, 0x99, 0x4f,
	0x80, 0x98, 0x3a, 0xf0, 0x09, 0x98, 0xba, 0x20, 0x55, 0x4c, 0xc0, 0xd0, 0xa2, 0x76, 0xe8, 0xd7,
	0x40, 0xbe, 0x73, 0xd2, 0x22, 0xa4, 0x02, 0x0b, 0x2c, 0x2c, 0xc9, 0xbd, 0xf7, 0xfb, 0xbd, 0xf7,
	0x7c, 0xbf, 0x9f, 0x7d, 0x87, 0xee, 0x47, 0xcc, 0x09, 0xc0, 0xe4, 0xfb, 0x24, 0x36, 0xb9, 0x20,
	0x4e, 0x00, 0x72, 0x39, 0xec, 0x99, 0x30, 0x84, 0x48, 0x70, 0x23, 0x4e, 0x98, 0x60, 0x58, 0x97,
	0x34, 0x23, 0xc3, 0x8c, 0x4b, 0x9a, 0x31, 0xec, 0x35, 0x6e, 0x91, 0x90, 0x46, 0xcc, 0x94, 0xbf,
	0x8a, 0xdc, 0x68, 0xba, 0x8c, 0x87, 0x8c, 0x9b, 0x0e, 0xe1, 0x60, 0x0e, 0x7b, 0x0e, 0x08, 0xd2,
	0x33, 0x5d, 0x46, 0xa3, 0x1c, 0x5f, 0x50, 0xb8, 0x2d, 0x23, 0x53, 0x05, 0x39, 0x74, 0xdb, 0x67,
	0x3e, 0x53, 0xf9, 0x6c, 0x95, 0x67, 0x5b, 0x3e, 0x63, 0x7e, 0x00, 0xa6, 0x8c, 0x9c, 0x74, 0xd7,
	0x14, 0x34, 0x04, 0x2e, 0x48, 0x18, 0x2b, 0x42, 0xe7, 0x43, 0x09, 0xd5, 0xb7, 0x19, 0x0b, 0xd6,
	0x13, 0x20, 0x02, 0x3c, 0x3c, 0x8f, 0x2a, 0x31, 0x63, 0x81, 0x4d, 0x3d, 0x5d, 0x6b, 0x6b, 0xdd,
	0x29, 0xab, 0x9c, 0x85, 0x8f, 0x3d, 0x7c, 0x17, 0xd5, 0x48, 0xe0, 0xb3, 0x84, 0x8a, 0x41, 0xa8,
	0x17, 0xdb, 0x5a, 0xb7, 0x66, 0x5d, 0x26, 0x30, 0x46, 0x53, 0x31, 0xa1, 0x89, 0x5e, 0x92, 0x80,
	0x5c, 0xe3, 0x55, 0x34, 0x2f, 0x67, 0xb8, 0x2c, 0xb0, 0x77, 0x01, 0xec, 0x18, 0x12, 0x17, 0x22,
	0x41, 0x7c, 0xd0, 0xa7, 0xda, 0x5a, 0xb7, 0x64, 0xdd, 0x19, 0xc3, 0x9b, 0x00, 0xdb, 0x13, 0x10,
	0xb7, 0x50, 0x3d, 0x81, 0x7d, 0x92, 0x78, 0x3c, 0x2b, 0xd3, 0xa7, 0x25, 0x17, 0xe5, 0xa9, 0x4d,
	0x00, 0xbc, 0x88, 0x6a, 0x34, 0xa2, 0x82, 0x92, 0xc0, 0x26, 0x7a, 0x45, 0xc2, 0xd5, 0x3c, 0xb1,
	0x86, 0xef, 0xa1, 0xd9, 0x09, 0x68, 0x67, 0xbb, 0xd5, 0xab, 0x92, 0x31, 0x33, 0x66, 0xec, 0xd0,
	0x10, 0xf0, 0x02, 0xaa, 0xee, 0xa6, 0x22, 0x4d, 0xc0, 0x26, 0x7a, 0x4d, 0xe2, 0x15, 0x15, 0xaf,
	0xe1, 0x0e, 0xba, 0x31, 0x86, 0x54, 0x3d, 0x92, 0x78, 0x3d, 0xc7, 0x65, 0xf9, 0x6b, 0x0d, 0xcd,
	0x25, 0x44, 0x80, 0x1d, 0xa6, 0x81, 0xa0, 0x71, 0x40, 0x21, 0xe1, 0x7a, 0xbd, 0x5d, 0xea, 0xd6,
	0x57, 0x16, 0x8c, 0xdc, 0x96, 0xcc, 0x43, 0x23, 0xf7, 0xd0, 0x58, 0x67, 0x34, 0xea, 0x6f, 0x1e,
	0x9d, 0xb4, 0x0a, 0xef, 0x4e, 0x5b, 0x5d, 0x9f, 0x8a, 0x41, 0xea, 0x18, 0x2e, 0x0b, 0x73, 0x0f,
	0xf3, 0xbf, 0x65, 0xee, 0xed, 0x99, 0x62, 0x14, 0x03, 0x97, 0x05, 0xfc, 0xcd, 0xc5, 0xe1, 0xd2,
	0x4c, 0x00, 0x3e, 0x71, 0x47, 0x76, 0xf6, 0x16, 0xf0, 0xb7, 0x17, 0x87, 0x4b, 0x9a, 0x75, 0x33,
	0x1b, 0xfd, 0xe4, 0x72, 0x72, 0xe7, 0x63, 0x51, 0x99, 0xf8, 0x2c, 0xf6, 0xae, 0x37, 0xf1, 0x1a,
	0x4b, 0x8a, 0x7f, 0x60, 0x49, 0xe9, 0x27, 0x4b, 0xae, 0xea, 0x39, 0xfd, 0x0b, 0x3d, 0xcb, 0xbf,
	0xa9, 0x67, 0xe5, 0x9f, 0xe9, 0x79, 0x50, 0x44, 0xb3, 0x5b, 0xf4, 0x45, 0x4a, 0x3d, 0x2a, 0x46,
	0x6b, 0x9e, 0x07, 0x1e, 0x6e, 0xa0, 0x6a, 0x9c, 0xb0, 0x21, 0xf5, 0x20, 0x91, 0x9a, 0xd6, 0xac,
	0x49, 0x7c, 0x55, 0xee, 0xe2, 0x0f, 0x72, 0x8f, 0x50, 0x99, 0x84, 0x2c, 0x8d, 0xc4, 0xdf, 0xdb,
	0x4b, 0x3e, 0x10, 0x3f, 0x45, 0x65, 0x3e, 0x20, 0x09, 0x70, 0xf9, 0xad, 0xd5, 0xfa, 0xab, 0x59,
	0xff, 0xaf, 0x27, 0xad, 0x45, 0xd5, 0x8d, 0x7b, 0x7b, 0x06, 0x65, 0x66, 0x48, 0xc4, 0xc0, 0xd8,
	0x92, 0x4d, 0x36, 0xc0, 0xfd, 0xf4, 0x7e, 0x19, 0xe5, 0x0f, 0xb8, 0x01, 0x6e, 0xde, 0x4f, 0x75,
	0xe9, 0x7c, 0x29, 0xa2, 0xb9, 0x89, 0x24, 0x16, 0x84, 0x6c, 0xf8, 0x5f, 0x14, 0xfc, 0x08, 0xd5,
	0xd3, 0x28, 0x60, 0xee, 0x9e, 0x7a, 0xb1, 0xb3, 0xcf, 0xa2, 0xbe, 0xd2, 0x30, 0xd4, 0x99, 0x6b,
	0x8c, 0xcf, 0x5c, 0x63, 0x67, 0x7c, 0xe6, 0xf6, 0xab, 0xd9, 0xc0, 0x83, 0xd3, 0x96, 0x66, 0x21,
	0x55, 0x98, 0x41, 0xfd, 0x87, 0x47, 0x67, 0x4d, 0xed, 0xf8, 0xac, 0xa9, 0x7d, 0x3b, 0x6b, 0x6a,
	0x07, 0xe7, 0xcd, 0xc2, 0xf1, 0x79, 0xb3, 0xf0, 0xf9, 0xbc, 0x59, 0x78, 0xde, 0x92, 0x77, 0x85,
	0xba, 0x41, 0x5e, 0x8e, 0x5e, 0xa9, 0xad, 0x5e, 0xb9, 0x6d, 0x9c, 0xb2, 0x1c, 0xf2, 0xe0, 0x7b,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x45, 0x8c, 0x8c, 0x8d, 0x06, 0x00, 0x00,
}

func (m *PoolCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateMultipliers) > 0 {
		for iNdEx := len(m.RateMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.FutureATime != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FutureATime))
		i--
		dAtA[i] = 0x50
	}
	if m.FutureA != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FutureA))
		i--
		dAtA[i] = 0x48
	}
	if m.InitialATime != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.InitialATime))
		i--
		dAtA[i] = 0x40
	}
	if m.InitialA != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.InitialA))
		i--
		dAtA[i] = 0x38
	}
	if m.RewardsFee != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RewardsFee))
		i--
		dAtA[i] = 0x28
	}
	if m.ProtocolFeePercentage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProtocolFeePercentage))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Algorithm) > 0 {
		i -= len(m.Algorithm)
		copy(dAtA[i:], m.Algorithm)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Algorithm)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateMultipliers) > 0 {
		for iNdEx := len(m.RateMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FutureATime != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FutureATime))
		i--
		dAtA[i] = 0x30
	}
	if m.FutureA != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FutureA))
		i--
		dAtA[i] = 0x28
	}
	if m.RewardsFee != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RewardsFee))
		i--
		dAtA[i] = 0x18
	}
	if m.ProtocolFeePercentage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProtocolFeePercentage))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvents(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ProtocolFeePercentage != 0 {
		n += 1 + sovEvents(uint64(m.ProtocolFeePercentage))
	}
	if m.RewardsFee != 0 {
		n += 1 + sovEvents(uint64(m.RewardsFee))
	}
	if m.InitialA != 0 {
		n += 1 + sovEvents(uint64(m.InitialA))
	}
	if m.InitialATime != 0 {
		n += 1 + sovEvents(uint64(m.InitialATime))
	}
	if m.FutureA != 0 {
		n += 1 + sovEvents(uint64(m.FutureA))
	}
	if m.FutureATime != 0 {
		n += 1 + sovEvents(uint64(m.FutureATime))
	}
	if len(m.RateMultipliers) > 0 {
		for _, e := range m.RateMultipliers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *PoolUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if m.ProtocolFeePercentage != 0 {
		n += 1 + sovEvents(uint64(m.ProtocolFeePercentage))
	}
	if m.RewardsFee != 0 {
		n += 1 + sovEvents(uint64(m.RewardsFee))
	}
	if m.FutureA != 0 {
		n += 1 + sovEvents(uint64(m.FutureA))
	}
	if m.FutureATime != 0 {
		n += 1 + sovEvents(uint64(m.FutureATime))
	}
	if len(m.RateMultipliers) > 0 {
		for _, e := range m.RateMultipliers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *LiquidityAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = m.Shares.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *LiquidityRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnlockTime)
	n += 1 + l + sovEvents(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeePercentage", wireType)
			}
			m.ProtocolFeePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolFeePercentage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsFee", wireType)
			}
			m.RewardsFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialA", wireType)
			}
			m.InitialA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialA |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialATime", wireType)
			}
			m.InitialATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialATime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureA", wireType)
			}
			m.FutureA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureA |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureATime", wireType)
			}
			m.FutureATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureATime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateMultipliers = append(m.RateMultipliers, types.Coin{})
			if err := m.RateMultipliers[len(m.RateMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeePercentage", wireType)
			}
			m.ProtocolFeePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolFeePercentage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsFee", wireType)
			}
			m.RewardsFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureA", wireType)
			}
			m.FutureA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureA |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureATime", wireType)
			}
			m.FutureATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FutureATime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateMultipliers = append(m.RateMultipliers, types.Coin{})
			if err := m.RateMultipliers[len(m.RateMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
