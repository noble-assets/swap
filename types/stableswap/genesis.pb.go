// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swap/stableswap/v1/genesis.proto

package stableswap

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the StableSwap genesis state.
type GenesisState struct {
	Pools                     map[uint64]Pool                  `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PoolsTotalUnbondingShares []PoolsTotalUnbondingSharesEntry `protobuf:"bytes,2,rep,name=pools_total_unbonding_shares,json=poolsTotalUnbondingShares,proto3" json:"pools_total_unbonding_shares"`
	UsersTotalBondedShares    []UsersTotalBondedSharesEntry    `protobuf:"bytes,3,rep,name=users_total_bonded_shares,json=usersTotalBondedShares,proto3" json:"users_total_bonded_shares"`
	UsersTotalUnbondingShares []UsersTotalUnbondingSharesEntry `protobuf:"bytes,4,rep,name=users_total_unbonding_shares,json=usersTotalUnbondingShares,proto3" json:"users_total_unbonding_shares"`
	BondedPositions           []BondedPositionEntry            `protobuf:"bytes,5,rep,name=bonded_positions,json=bondedPositions,proto3" json:"bonded_positions"`
	UnbondingPositions        []UnbondingPositionEntry         `protobuf:"bytes,6,rep,name=unbonding_positions,json=unbondingPositions,proto3" json:"unbonding_positions"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c9226a52200d97d, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPools() map[uint64]Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *GenesisState) GetPoolsTotalUnbondingShares() []PoolsTotalUnbondingSharesEntry {
	if m != nil {
		return m.PoolsTotalUnbondingShares
	}
	return nil
}

func (m *GenesisState) GetUsersTotalBondedShares() []UsersTotalBondedSharesEntry {
	if m != nil {
		return m.UsersTotalBondedShares
	}
	return nil
}

func (m *GenesisState) GetUsersTotalUnbondingShares() []UsersTotalUnbondingSharesEntry {
	if m != nil {
		return m.UsersTotalUnbondingShares
	}
	return nil
}

func (m *GenesisState) GetBondedPositions() []BondedPositionEntry {
	if m != nil {
		return m.BondedPositions
	}
	return nil
}

func (m *GenesisState) GetUnbondingPositions() []UnbondingPositionEntry {
	if m != nil {
		return m.UnbondingPositions
	}
	return nil
}

type BondedPositionEntry struct {
	PoolId         uint64         `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Address        string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Timestamp      int64          `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BondedPosition BondedPosition `protobuf:"bytes,4,opt,name=bonded_position,json=bondedPosition,proto3" json:"bonded_position"`
}

func (m *BondedPositionEntry) Reset()         { *m = BondedPositionEntry{} }
func (m *BondedPositionEntry) String() string { return proto.CompactTextString(m) }
func (*BondedPositionEntry) ProtoMessage()    {}
func (*BondedPositionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c9226a52200d97d, []int{1}
}
func (m *BondedPositionEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondedPositionEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondedPositionEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondedPositionEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondedPositionEntry.Merge(m, src)
}
func (m *BondedPositionEntry) XXX_Size() int {
	return m.Size()
}
func (m *BondedPositionEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BondedPositionEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BondedPositionEntry proto.InternalMessageInfo

func (m *BondedPositionEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *BondedPositionEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BondedPositionEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BondedPositionEntry) GetBondedPosition() BondedPosition {
	if m != nil {
		return m.BondedPosition
	}
	return BondedPosition{}
}

type UnbondingPositionEntry struct {
	Timestamp         int64             `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Address           string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PoolId            uint64            `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	UnbondingPosition UnbondingPosition `protobuf:"bytes,4,opt,name=unbonding_position,json=unbondingPosition,proto3" json:"unbonding_position"`
}

func (m *UnbondingPositionEntry) Reset()         { *m = UnbondingPositionEntry{} }
func (m *UnbondingPositionEntry) String() string { return proto.CompactTextString(m) }
func (*UnbondingPositionEntry) ProtoMessage()    {}
func (*UnbondingPositionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c9226a52200d97d, []int{2}
}
func (m *UnbondingPositionEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingPositionEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingPositionEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingPositionEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingPositionEntry.Merge(m, src)
}
func (m *UnbondingPositionEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingPositionEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingPositionEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingPositionEntry proto.InternalMessageInfo

func (m *UnbondingPositionEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UnbondingPositionEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnbondingPositionEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UnbondingPositionEntry) GetUnbondingPosition() UnbondingPosition {
	if m != nil {
		return m.UnbondingPosition
	}
	return UnbondingPosition{}
}

type PoolsTotalUnbondingSharesEntry struct {
	PoolId uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *PoolsTotalUnbondingSharesEntry) Reset()         { *m = PoolsTotalUnbondingSharesEntry{} }
func (m *PoolsTotalUnbondingSharesEntry) String() string { return proto.CompactTextString(m) }
func (*PoolsTotalUnbondingSharesEntry) ProtoMessage()    {}
func (*PoolsTotalUnbondingSharesEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c9226a52200d97d, []int{3}
}
func (m *PoolsTotalUnbondingSharesEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsTotalUnbondingSharesEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsTotalUnbondingSharesEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsTotalUnbondingSharesEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsTotalUnbondingSharesEntry.Merge(m, src)
}
func (m *PoolsTotalUnbondingSharesEntry) XXX_Size() int {
	return m.Size()
}
func (m *PoolsTotalUnbondingSharesEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsTotalUnbondingSharesEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsTotalUnbondingSharesEntry proto.InternalMessageInfo

func (m *PoolsTotalUnbondingSharesEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type UsersTotalBondedSharesEntry struct {
	PoolId  uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Address string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Shares  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *UsersTotalBondedSharesEntry) Reset()         { *m = UsersTotalBondedSharesEntry{} }
func (m *UsersTotalBondedSharesEntry) String() string { return proto.CompactTextString(m) }
func (*UsersTotalBondedSharesEntry) ProtoMessage()    {}
func (*UsersTotalBondedSharesEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c9226a52200d97d, []int{4}
}
func (m *UsersTotalBondedSharesEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersTotalBondedSharesEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersTotalBondedSharesEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersTotalBondedSharesEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersTotalBondedSharesEntry.Merge(m, src)
}
func (m *UsersTotalBondedSharesEntry) XXX_Size() int {
	return m.Size()
}
func (m *UsersTotalBondedSharesEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersTotalBondedSharesEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UsersTotalBondedSharesEntry proto.InternalMessageInfo

func (m *UsersTotalBondedSharesEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UsersTotalBondedSharesEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UsersTotalUnbondingSharesEntry struct {
	PoolId  uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Address string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Shares  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *UsersTotalUnbondingSharesEntry) Reset()         { *m = UsersTotalUnbondingSharesEntry{} }
func (m *UsersTotalUnbondingSharesEntry) String() string { return proto.CompactTextString(m) }
func (*UsersTotalUnbondingSharesEntry) ProtoMessage()    {}
func (*UsersTotalUnbondingSharesEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c9226a52200d97d, []int{5}
}
func (m *UsersTotalUnbondingSharesEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersTotalUnbondingSharesEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersTotalUnbondingSharesEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersTotalUnbondingSharesEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersTotalUnbondingSharesEntry.Merge(m, src)
}
func (m *UsersTotalUnbondingSharesEntry) XXX_Size() int {
	return m.Size()
}
func (m *UsersTotalUnbondingSharesEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersTotalUnbondingSharesEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UsersTotalUnbondingSharesEntry proto.InternalMessageInfo

func (m *UsersTotalUnbondingSharesEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UsersTotalUnbondingSharesEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "swap.stableswap.v1.GenesisState")
	proto.RegisterMapType((map[uint64]Pool)(nil), "swap.stableswap.v1.GenesisState.PoolsEntry")
	proto.RegisterType((*BondedPositionEntry)(nil), "swap.stableswap.v1.BondedPositionEntry")
	proto.RegisterType((*UnbondingPositionEntry)(nil), "swap.stableswap.v1.UnbondingPositionEntry")
	proto.RegisterType((*PoolsTotalUnbondingSharesEntry)(nil), "swap.stableswap.v1.PoolsTotalUnbondingSharesEntry")
	proto.RegisterType((*UsersTotalBondedSharesEntry)(nil), "swap.stableswap.v1.UsersTotalBondedSharesEntry")
	proto.RegisterType((*UsersTotalUnbondingSharesEntry)(nil), "swap.stableswap.v1.UsersTotalUnbondingSharesEntry")
}

func init() { proto.RegisterFile("swap/stableswap/v1/genesis.proto", fileDescriptor_6c9226a52200d97d) }

var fileDescriptor_6c9226a52200d97d = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0x74, 0x93, 0x94, 0x4e, 0xc5, 0xb6, 0x53, 0xa9, 0xdb, 0x3f, 0x6e, 0xe2, 0x82, 0x18,
	0x2a, 0xee, 0xd2, 0x08, 0xa2, 0x1e, 0x43, 0xa5, 0x08, 0x22, 0x75, 0x6b, 0x41, 0x7a, 0x09, 0x93,
	0xec, 0x90, 0x2e, 0x4d, 0x76, 0x96, 0xcc, 0x6c, 0x74, 0xfd, 0x06, 0xde, 0xfc, 0x08, 0x82, 0x17,
	0x8f, 0x1e, 0xbc, 0xf8, 0x01, 0x84, 0x1e, 0x83, 0x27, 0xf1, 0x50, 0x24, 0x39, 0xf8, 0x35, 0x64,
	0x66, 0x77, 0xdd, 0x4d, 0xb2, 0x1b, 0x45, 0x3c, 0x78, 0x59, 0x66, 0xe6, 0xfd, 0xde, 0xfb, 0xbd,
	0xdf, 0x7b, 0x6f, 0x67, 0x60, 0x95, 0xbd, 0xc0, 0x9e, 0xc9, 0x38, 0x6e, 0x75, 0x89, 0x5c, 0x0e,
	0xf6, 0xcc, 0x0e, 0x71, 0x09, 0x73, 0x98, 0xe1, 0xf5, 0x29, 0xa7, 0x08, 0x89, 0x63, 0x23, 0x41,
	0x18, 0x83, 0xbd, 0xad, 0x35, 0xdc, 0x73, 0x5c, 0x6a, 0xca, 0x6f, 0x08, 0xdb, 0xda, 0x6c, 0x53,
	0xd6, 0xa3, 0xac, 0x29, 0x77, 0x66, 0xb8, 0x89, 0x4c, 0x57, 0x3a, 0xb4, 0x43, 0xc3, 0x73, 0xb1,
	0x8a, 0x4e, 0xaf, 0x65, 0x30, 0x7b, 0x94, 0x76, 0x23, 0xf3, 0xf5, 0x4c, 0x33, 0x73, 0xb8, 0x43,
	0xdd, 0x10, 0xa2, 0x0f, 0x4b, 0xf0, 0xd2, 0x41, 0x98, 0xeb, 0x11, 0xc7, 0x9c, 0xa0, 0x03, 0x58,
	0x12, 0x11, 0x98, 0x0a, 0xaa, 0x4a, 0x6d, 0xb9, 0x7e, 0xcb, 0x98, 0x4d, 0xdd, 0x48, 0x3b, 0x18,
	0x87, 0x02, 0xfd, 0xd0, 0xe5, 0xfd, 0xa0, 0x51, 0x3c, 0xbf, 0xa8, 0x14, 0xac, 0xd0, 0x1f, 0x05,
	0x70, 0x47, 0x2e, 0x9a, 0x9c, 0x72, 0xdc, 0x6d, 0xfa, 0x6e, 0x8b, 0xba, 0xb6, 0xe3, 0x76, 0x9a,
	0xec, 0x14, 0xf7, 0x09, 0x53, 0x17, 0x64, 0xfc, 0x7a, 0x56, 0x7c, 0x19, 0xf2, 0x99, 0x70, 0x3b,
	0x8e, 0xbd, 0x8e, 0xa4, 0x53, 0x9a, 0x66, 0xd3, 0xcb, 0x43, 0x21, 0x0f, 0x6e, 0xfa, 0x8c, 0xf4,
	0x63, 0x6a, 0x61, 0x24, 0x76, 0xcc, 0xab, 0x48, 0x5e, 0x33, 0x8b, 0xf7, 0x58, 0x38, 0xc9, 0x88,
	0x0d, 0xe9, 0x32, 0x4b, 0xba, 0xe1, 0x67, 0x42, 0x84, 0xd8, 0x34, 0xe3, 0x8c, 0xd8, 0x62, 0xbe,
	0xd8, 0x84, 0x74, 0x9e, 0x58, 0x3f, 0x0f, 0x85, 0x9e, 0xc3, 0xd5, 0x48, 0x60, 0xdc, 0x5a, 0xa6,
	0x96, 0x24, 0xdd, 0xcd, 0x2c, 0xba, 0x30, 0xed, 0xc3, 0x08, 0x9a, 0xe6, 0x58, 0x69, 0x4d, 0x98,
	0x18, 0xc2, 0x70, 0x3d, 0x11, 0x92, 0x04, 0x2f, 0xcb, 0xe0, 0xbb, 0x99, 0x5a, 0x62, 0x78, 0x56,
	0x7c, 0xe4, 0x4f, 0x5b, 0xd9, 0x96, 0x05, 0x61, 0x32, 0x3f, 0x68, 0x15, 0x2a, 0x67, 0x24, 0x50,
	0x41, 0x15, 0xd4, 0x8a, 0x96, 0x58, 0x22, 0x03, 0x96, 0x06, 0xb8, 0xeb, 0x13, 0x75, 0xa1, 0x0a,
	0x6a, 0xcb, 0x75, 0x35, 0x6f, 0x5a, 0xac, 0x10, 0xf6, 0x60, 0xe1, 0x1e, 0xd0, 0x3f, 0x01, 0xb8,
	0x9e, 0xa1, 0x12, 0x5d, 0x85, 0x8b, 0x62, 0x64, 0x9a, 0x8e, 0x1d, 0x31, 0x94, 0xc5, 0xf6, 0x91,
	0x8d, 0x54, 0xb8, 0x88, 0x6d, 0xbb, 0x4f, 0x18, 0x93, 0x34, 0x4b, 0x56, 0xbc, 0x45, 0x3b, 0x70,
	0x89, 0x3b, 0x3d, 0xc2, 0x38, 0xee, 0x79, 0xaa, 0x52, 0x05, 0x35, 0xc5, 0x4a, 0x0e, 0xd0, 0x53,
	0xb8, 0x32, 0x55, 0x79, 0xb5, 0x28, 0xd3, 0xd4, 0x7f, 0x5f, 0xf8, 0xa8, 0x26, 0x97, 0x27, 0x6b,
	0xae, 0x7f, 0x06, 0x70, 0x23, 0xbb, 0x88, 0x93, 0xb9, 0x80, 0xe9, 0x5c, 0xf2, 0x35, 0xa4, 0x64,
	0x2b, 0x13, 0xb2, 0x4f, 0x20, 0x9a, 0x6d, 0x6f, 0xa4, 0xe0, 0xc6, 0x1f, 0x75, 0x37, 0x12, 0xb1,
	0x36, 0xd3, 0x58, 0xfd, 0x35, 0x80, 0xda, 0xfc, 0xbf, 0x38, 0xbf, 0x1d, 0x4f, 0x60, 0xf9, 0xd7,
	0x15, 0x01, 0x6a, 0x4b, 0x8d, 0xbb, 0x82, 0xe4, 0xdb, 0x45, 0x65, 0x3b, 0xbc, 0x10, 0x99, 0x7d,
	0x66, 0x38, 0xd4, 0xec, 0x61, 0x7e, 0x6a, 0x3c, 0x26, 0x1d, 0xdc, 0x0e, 0xf6, 0x49, 0xfb, 0xcb,
	0xc7, 0xdb, 0x30, 0xba, 0x2f, 0xf7, 0x49, 0xfb, 0xfd, 0x8f, 0x0f, 0xbb, 0xc0, 0x8a, 0xa2, 0xe8,
	0x6f, 0x01, 0xdc, 0x9e, 0xf3, 0x67, 0xff, 0xcd, 0x5c, 0x24, 0x29, 0x2a, 0xff, 0x24, 0xc5, 0x77,
	0x00, 0x6a, 0xf3, 0xef, 0x81, 0xff, 0x20, 0xcb, 0xc6, 0xfd, 0xf3, 0x91, 0x06, 0x86, 0x23, 0x0d,
	0x7c, 0x1f, 0x69, 0xe0, 0xcd, 0x58, 0x2b, 0x0c, 0xc7, 0x5a, 0xe1, 0xeb, 0x58, 0x2b, 0x9c, 0x54,
	0xe4, 0x88, 0xb8, 0xb4, 0xd5, 0x25, 0xc6, 0xcb, 0xe0, 0x95, 0xc9, 0x03, 0x8f, 0xb0, 0xd4, 0xc3,
	0xd3, 0x2a, 0xcb, 0xd7, 0xe6, 0xce, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x7e, 0x5c, 0x3e,
	0x2b, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingPositions) > 0 {
		for iNdEx := len(m.UnbondingPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BondedPositions) > 0 {
		for iNdEx := len(m.BondedPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondedPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UsersTotalUnbondingShares) > 0 {
		for iNdEx := len(m.UsersTotalUnbondingShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersTotalUnbondingShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UsersTotalBondedShares) > 0 {
		for iNdEx := len(m.UsersTotalBondedShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersTotalBondedShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PoolsTotalUnbondingShares) > 0 {
		for iNdEx := len(m.PoolsTotalUnbondingShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolsTotalUnbondingShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pools) > 0 {
		for k := range m.Pools {
			v := m.Pools[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintGenesis(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BondedPositionEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondedPositionEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondedPositionEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BondedPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingPositionEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingPositionEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingPositionEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnbondingPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolsTotalUnbondingSharesEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsTotalUnbondingSharesEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsTotalUnbondingSharesEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsersTotalBondedSharesEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersTotalBondedSharesEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersTotalBondedSharesEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsersTotalUnbondingSharesEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersTotalUnbondingSharesEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersTotalUnbondingSharesEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for k, v := range m.Pools {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGenesis(uint64(k)) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.PoolsTotalUnbondingShares) > 0 {
		for _, e := range m.PoolsTotalUnbondingShares {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UsersTotalBondedShares) > 0 {
		for _, e := range m.UsersTotalBondedShares {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UsersTotalUnbondingShares) > 0 {
		for _, e := range m.UsersTotalUnbondingShares {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BondedPositions) > 0 {
		for _, e := range m.BondedPositions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingPositions) > 0 {
		for _, e := range m.UnbondingPositions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *BondedPositionEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovGenesis(uint64(m.PoolId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	l = m.BondedPosition.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *UnbondingPositionEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGenesis(uint64(m.Timestamp))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovGenesis(uint64(m.PoolId))
	}
	l = m.UnbondingPosition.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoolsTotalUnbondingSharesEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovGenesis(uint64(m.PoolId))
	}
	l = m.Shares.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *UsersTotalBondedSharesEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovGenesis(uint64(m.PoolId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *UsersTotalUnbondingSharesEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovGenesis(uint64(m.PoolId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pools == nil {
				m.Pools = make(map[uint64]Pool)
			}
			var mapkey uint64
			mapvalue := &Pool{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Pool{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pools[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsTotalUnbondingShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolsTotalUnbondingShares = append(m.PoolsTotalUnbondingShares, PoolsTotalUnbondingSharesEntry{})
			if err := m.PoolsTotalUnbondingShares[len(m.PoolsTotalUnbondingShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersTotalBondedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersTotalBondedShares = append(m.UsersTotalBondedShares, UsersTotalBondedSharesEntry{})
			if err := m.UsersTotalBondedShares[len(m.UsersTotalBondedShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersTotalUnbondingShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersTotalUnbondingShares = append(m.UsersTotalUnbondingShares, UsersTotalUnbondingSharesEntry{})
			if err := m.UsersTotalUnbondingShares[len(m.UsersTotalUnbondingShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondedPositions = append(m.BondedPositions, BondedPositionEntry{})
			if err := m.BondedPositions[len(m.BondedPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingPositions = append(m.UnbondingPositions, UnbondingPositionEntry{})
			if err := m.UnbondingPositions[len(m.UnbondingPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondedPositionEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondedPositionEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondedPositionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingPositionEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingPositionEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingPositionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsTotalUnbondingSharesEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsTotalUnbondingSharesEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsTotalUnbondingSharesEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersTotalBondedSharesEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersTotalBondedSharesEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersTotalBondedSharesEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersTotalUnbondingSharesEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersTotalUnbondingSharesEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersTotalUnbondingSharesEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
