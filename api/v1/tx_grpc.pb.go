// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: noble/swap/v1/tx.proto

package swapv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_Swap_FullMethodName                 = "/noble.swap.v1.Msg/Swap"
	Msg_WithdrawProtocolFees_FullMethodName = "/noble.swap.v1.Msg/WithdrawProtocolFees"
	Msg_WithdrawRewards_FullMethodName      = "/noble.swap.v1.Msg/WithdrawRewards"
	Msg_PauseByAlgorithm_FullMethodName     = "/noble.swap.v1.Msg/PauseByAlgorithm"
	Msg_PauseByPoolIds_FullMethodName       = "/noble.swap.v1.Msg/PauseByPoolIds"
	Msg_UnpauseByAlgorithm_FullMethodName   = "/noble.swap.v1.Msg/UnpauseByAlgorithm"
	Msg_UnpauseByPoolIds_FullMethodName     = "/noble.swap.v1.Msg/UnpauseByPoolIds"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// Swap allows a user to swap one type of token for another, using multiple routes.
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
	// WithdrawProtocolFees allows the protocol to withdraw accumulated fees and move them to another account.
	WithdrawProtocolFees(ctx context.Context, in *MsgWithdrawProtocolFees, opts ...grpc.CallOption) (*MsgWithdrawProtocolFeesResponse, error)
	// WithdrawRewards allows a user to claim their accumulated rewards.
	WithdrawRewards(ctx context.Context, in *MsgWithdrawRewards, opts ...grpc.CallOption) (*MsgWithdrawRewardsResponse, error)
	// PauseByAlgorithm pauses all pools using a specific algorithm.
	PauseByAlgorithm(ctx context.Context, in *MsgPauseByAlgorithm, opts ...grpc.CallOption) (*MsgPauseByAlgorithmResponse, error)
	// PauseByPoolIds pauses specific pools identified by their pool IDs.
	PauseByPoolIds(ctx context.Context, in *MsgPauseByPoolIds, opts ...grpc.CallOption) (*MsgPauseByPoolIdsResponse, error)
	// UnpauseByAlgorithm unpauses all pools using a specific algorithm.
	UnpauseByAlgorithm(ctx context.Context, in *MsgUnpauseByAlgorithm, opts ...grpc.CallOption) (*MsgUnpauseByAlgorithmResponse, error)
	// UnpauseByPoolIds unpauses specific pools identified by their pool IDs.
	UnpauseByPoolIds(ctx context.Context, in *MsgUnpauseByPoolIds, opts ...grpc.CallOption) (*MsgUnpauseByPoolIdsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, Msg_Swap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawProtocolFees(ctx context.Context, in *MsgWithdrawProtocolFees, opts ...grpc.CallOption) (*MsgWithdrawProtocolFeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgWithdrawProtocolFeesResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawProtocolFees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawRewards(ctx context.Context, in *MsgWithdrawRewards, opts ...grpc.CallOption) (*MsgWithdrawRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgWithdrawRewardsResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseByAlgorithm(ctx context.Context, in *MsgPauseByAlgorithm, opts ...grpc.CallOption) (*MsgPauseByAlgorithmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgPauseByAlgorithmResponse)
	err := c.cc.Invoke(ctx, Msg_PauseByAlgorithm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseByPoolIds(ctx context.Context, in *MsgPauseByPoolIds, opts ...grpc.CallOption) (*MsgPauseByPoolIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgPauseByPoolIdsResponse)
	err := c.cc.Invoke(ctx, Msg_PauseByPoolIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseByAlgorithm(ctx context.Context, in *MsgUnpauseByAlgorithm, opts ...grpc.CallOption) (*MsgUnpauseByAlgorithmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUnpauseByAlgorithmResponse)
	err := c.cc.Invoke(ctx, Msg_UnpauseByAlgorithm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseByPoolIds(ctx context.Context, in *MsgUnpauseByPoolIds, opts ...grpc.CallOption) (*MsgUnpauseByPoolIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUnpauseByPoolIdsResponse)
	err := c.cc.Invoke(ctx, Msg_UnpauseByPoolIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
type MsgServer interface {
	// Swap allows a user to swap one type of token for another, using multiple routes.
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
	// WithdrawProtocolFees allows the protocol to withdraw accumulated fees and move them to another account.
	WithdrawProtocolFees(context.Context, *MsgWithdrawProtocolFees) (*MsgWithdrawProtocolFeesResponse, error)
	// WithdrawRewards allows a user to claim their accumulated rewards.
	WithdrawRewards(context.Context, *MsgWithdrawRewards) (*MsgWithdrawRewardsResponse, error)
	// PauseByAlgorithm pauses all pools using a specific algorithm.
	PauseByAlgorithm(context.Context, *MsgPauseByAlgorithm) (*MsgPauseByAlgorithmResponse, error)
	// PauseByPoolIds pauses specific pools identified by their pool IDs.
	PauseByPoolIds(context.Context, *MsgPauseByPoolIds) (*MsgPauseByPoolIdsResponse, error)
	// UnpauseByAlgorithm unpauses all pools using a specific algorithm.
	UnpauseByAlgorithm(context.Context, *MsgUnpauseByAlgorithm) (*MsgUnpauseByAlgorithmResponse, error)
	// UnpauseByPoolIds unpauses specific pools identified by their pool IDs.
	UnpauseByPoolIds(context.Context, *MsgUnpauseByPoolIds) (*MsgUnpauseByPoolIdsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (UnimplementedMsgServer) WithdrawProtocolFees(context.Context, *MsgWithdrawProtocolFees) (*MsgWithdrawProtocolFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawProtocolFees not implemented")
}
func (UnimplementedMsgServer) WithdrawRewards(context.Context, *MsgWithdrawRewards) (*MsgWithdrawRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawRewards not implemented")
}
func (UnimplementedMsgServer) PauseByAlgorithm(context.Context, *MsgPauseByAlgorithm) (*MsgPauseByAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseByAlgorithm not implemented")
}
func (UnimplementedMsgServer) PauseByPoolIds(context.Context, *MsgPauseByPoolIds) (*MsgPauseByPoolIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseByPoolIds not implemented")
}
func (UnimplementedMsgServer) UnpauseByAlgorithm(context.Context, *MsgUnpauseByAlgorithm) (*MsgUnpauseByAlgorithmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseByAlgorithm not implemented")
}
func (UnimplementedMsgServer) UnpauseByPoolIds(context.Context, *MsgUnpauseByPoolIds) (*MsgUnpauseByPoolIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseByPoolIds not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Swap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawProtocolFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawProtocolFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawProtocolFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawProtocolFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawProtocolFees(ctx, req.(*MsgWithdrawProtocolFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawRewards(ctx, req.(*MsgWithdrawRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseByAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseByAlgorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseByAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PauseByAlgorithm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseByAlgorithm(ctx, req.(*MsgPauseByAlgorithm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseByPoolIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseByPoolIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseByPoolIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PauseByPoolIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseByPoolIds(ctx, req.(*MsgPauseByPoolIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseByAlgorithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseByAlgorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseByAlgorithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnpauseByAlgorithm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseByAlgorithm(ctx, req.(*MsgUnpauseByAlgorithm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseByPoolIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseByPoolIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseByPoolIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnpauseByPoolIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseByPoolIds(ctx, req.(*MsgUnpauseByPoolIds))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.swap.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
		{
			MethodName: "WithdrawProtocolFees",
			Handler:    _Msg_WithdrawProtocolFees_Handler,
		},
		{
			MethodName: "WithdrawRewards",
			Handler:    _Msg_WithdrawRewards_Handler,
		},
		{
			MethodName: "PauseByAlgorithm",
			Handler:    _Msg_PauseByAlgorithm_Handler,
		},
		{
			MethodName: "PauseByPoolIds",
			Handler:    _Msg_PauseByPoolIds_Handler,
		},
		{
			MethodName: "UnpauseByAlgorithm",
			Handler:    _Msg_UnpauseByAlgorithm_Handler,
		},
		{
			MethodName: "UnpauseByPoolIds",
			Handler:    _Msg_UnpauseByPoolIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/swap/v1/tx.proto",
}
