// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stableswapv1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "cosmossdk.io/api/cosmos/msg/v1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_MsgCreatePool_9_list)(nil)

type _MsgCreatePool_9_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgCreatePool_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgCreatePool_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgCreatePool_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgCreatePool_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgCreatePool_9_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgCreatePool_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgCreatePool_9_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgCreatePool_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgCreatePool                         protoreflect.MessageDescriptor
	fd_MsgCreatePool_signer                  protoreflect.FieldDescriptor
	fd_MsgCreatePool_pair                    protoreflect.FieldDescriptor
	fd_MsgCreatePool_protocol_fee_percentage protoreflect.FieldDescriptor
	fd_MsgCreatePool_rewards_fee             protoreflect.FieldDescriptor
	fd_MsgCreatePool_initial_a               protoreflect.FieldDescriptor
	fd_MsgCreatePool_future_a                protoreflect.FieldDescriptor
	fd_MsgCreatePool_future_a_time           protoreflect.FieldDescriptor
	fd_MsgCreatePool_rate_multipliers        protoreflect.FieldDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgCreatePool = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgCreatePool")
	fd_MsgCreatePool_signer = md_MsgCreatePool.Fields().ByName("signer")
	fd_MsgCreatePool_pair = md_MsgCreatePool.Fields().ByName("pair")
	fd_MsgCreatePool_protocol_fee_percentage = md_MsgCreatePool.Fields().ByName("protocol_fee_percentage")
	fd_MsgCreatePool_rewards_fee = md_MsgCreatePool.Fields().ByName("rewards_fee")
	fd_MsgCreatePool_initial_a = md_MsgCreatePool.Fields().ByName("initial_a")
	fd_MsgCreatePool_future_a = md_MsgCreatePool.Fields().ByName("future_a")
	fd_MsgCreatePool_future_a_time = md_MsgCreatePool.Fields().ByName("future_a_time")
	fd_MsgCreatePool_rate_multipliers = md_MsgCreatePool.Fields().ByName("rate_multipliers")
}

var _ protoreflect.Message = (*fastReflection_MsgCreatePool)(nil)

type fastReflection_MsgCreatePool MsgCreatePool

func (x *MsgCreatePool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgCreatePool)(x)
}

func (x *MsgCreatePool) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgCreatePool_messageType fastReflection_MsgCreatePool_messageType
var _ protoreflect.MessageType = fastReflection_MsgCreatePool_messageType{}

type fastReflection_MsgCreatePool_messageType struct{}

func (x fastReflection_MsgCreatePool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgCreatePool)(nil)
}
func (x fastReflection_MsgCreatePool_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgCreatePool)
}
func (x fastReflection_MsgCreatePool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreatePool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgCreatePool) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreatePool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgCreatePool) Type() protoreflect.MessageType {
	return _fastReflection_MsgCreatePool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgCreatePool) New() protoreflect.Message {
	return new(fastReflection_MsgCreatePool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgCreatePool) Interface() protoreflect.ProtoMessage {
	return (*MsgCreatePool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgCreatePool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Signer != "" {
		value := protoreflect.ValueOfString(x.Signer)
		if !f(fd_MsgCreatePool_signer, value) {
			return
		}
	}
	if x.Pair != "" {
		value := protoreflect.ValueOfString(x.Pair)
		if !f(fd_MsgCreatePool_pair, value) {
			return
		}
	}
	if x.ProtocolFeePercentage != int64(0) {
		value := protoreflect.ValueOfInt64(x.ProtocolFeePercentage)
		if !f(fd_MsgCreatePool_protocol_fee_percentage, value) {
			return
		}
	}
	if x.RewardsFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.RewardsFee)
		if !f(fd_MsgCreatePool_rewards_fee, value) {
			return
		}
	}
	if x.InitialA != int64(0) {
		value := protoreflect.ValueOfInt64(x.InitialA)
		if !f(fd_MsgCreatePool_initial_a, value) {
			return
		}
	}
	if x.FutureA != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureA)
		if !f(fd_MsgCreatePool_future_a, value) {
			return
		}
	}
	if x.FutureATime != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureATime)
		if !f(fd_MsgCreatePool_future_a_time, value) {
			return
		}
	}
	if len(x.RateMultipliers) != 0 {
		value := protoreflect.ValueOfList(&_MsgCreatePool_9_list{list: &x.RateMultipliers})
		if !f(fd_MsgCreatePool_rate_multipliers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgCreatePool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgCreatePool.signer":
		return x.Signer != ""
	case "noble.swap.stableswap.v1.MsgCreatePool.pair":
		return x.Pair != ""
	case "noble.swap.stableswap.v1.MsgCreatePool.protocol_fee_percentage":
		return x.ProtocolFeePercentage != int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.rewards_fee":
		return x.RewardsFee != int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.initial_a":
		return x.InitialA != int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a":
		return x.FutureA != int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a_time":
		return x.FutureATime != int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers":
		return len(x.RateMultipliers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgCreatePool.signer":
		x.Signer = ""
	case "noble.swap.stableswap.v1.MsgCreatePool.pair":
		x.Pair = ""
	case "noble.swap.stableswap.v1.MsgCreatePool.protocol_fee_percentage":
		x.ProtocolFeePercentage = int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.rewards_fee":
		x.RewardsFee = int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.initial_a":
		x.InitialA = int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a":
		x.FutureA = int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a_time":
		x.FutureATime = int64(0)
	case "noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers":
		x.RateMultipliers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgCreatePool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.swap.stableswap.v1.MsgCreatePool.signer":
		value := x.Signer
		return protoreflect.ValueOfString(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.pair":
		value := x.Pair
		return protoreflect.ValueOfString(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.protocol_fee_percentage":
		value := x.ProtocolFeePercentage
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.rewards_fee":
		value := x.RewardsFee
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.initial_a":
		value := x.InitialA
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a":
		value := x.FutureA
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a_time":
		value := x.FutureATime
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers":
		if len(x.RateMultipliers) == 0 {
			return protoreflect.ValueOfList(&_MsgCreatePool_9_list{})
		}
		listValue := &_MsgCreatePool_9_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgCreatePool.signer":
		x.Signer = value.Interface().(string)
	case "noble.swap.stableswap.v1.MsgCreatePool.pair":
		x.Pair = value.Interface().(string)
	case "noble.swap.stableswap.v1.MsgCreatePool.protocol_fee_percentage":
		x.ProtocolFeePercentage = value.Int()
	case "noble.swap.stableswap.v1.MsgCreatePool.rewards_fee":
		x.RewardsFee = value.Int()
	case "noble.swap.stableswap.v1.MsgCreatePool.initial_a":
		x.InitialA = value.Int()
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a":
		x.FutureA = value.Int()
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a_time":
		x.FutureATime = value.Int()
	case "noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers":
		lv := value.List()
		clv := lv.(*_MsgCreatePool_9_list)
		x.RateMultipliers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers":
		if x.RateMultipliers == nil {
			x.RateMultipliers = []*v1beta1.Coin{}
		}
		value := &_MsgCreatePool_9_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(value)
	case "noble.swap.stableswap.v1.MsgCreatePool.signer":
		panic(fmt.Errorf("field signer of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgCreatePool.pair":
		panic(fmt.Errorf("field pair of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgCreatePool.protocol_fee_percentage":
		panic(fmt.Errorf("field protocol_fee_percentage of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgCreatePool.rewards_fee":
		panic(fmt.Errorf("field rewards_fee of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgCreatePool.initial_a":
		panic(fmt.Errorf("field initial_a of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a":
		panic(fmt.Errorf("field future_a of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a_time":
		panic(fmt.Errorf("field future_a_time of message noble.swap.stableswap.v1.MsgCreatePool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgCreatePool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgCreatePool.signer":
		return protoreflect.ValueOfString("")
	case "noble.swap.stableswap.v1.MsgCreatePool.pair":
		return protoreflect.ValueOfString("")
	case "noble.swap.stableswap.v1.MsgCreatePool.protocol_fee_percentage":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgCreatePool.rewards_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgCreatePool.initial_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgCreatePool.future_a_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgCreatePool_9_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgCreatePool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgCreatePool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgCreatePool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgCreatePool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgCreatePool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgCreatePool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Signer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pair)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ProtocolFeePercentage != 0 {
			n += 1 + runtime.Sov(uint64(x.ProtocolFeePercentage))
		}
		if x.RewardsFee != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardsFee))
		}
		if x.InitialA != 0 {
			n += 1 + runtime.Sov(uint64(x.InitialA))
		}
		if x.FutureA != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureA))
		}
		if x.FutureATime != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureATime))
		}
		if len(x.RateMultipliers) > 0 {
			for _, e := range x.RateMultipliers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreatePool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RateMultipliers) > 0 {
			for iNdEx := len(x.RateMultipliers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RateMultipliers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if x.FutureATime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureATime))
			i--
			dAtA[i] = 0x40
		}
		if x.FutureA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureA))
			i--
			dAtA[i] = 0x38
		}
		if x.InitialA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InitialA))
			i--
			dAtA[i] = 0x30
		}
		if x.RewardsFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsFee))
			i--
			dAtA[i] = 0x20
		}
		if x.ProtocolFeePercentage != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProtocolFeePercentage))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Pair) > 0 {
			i -= len(x.Pair)
			copy(dAtA[i:], x.Pair)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pair)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Signer) > 0 {
			i -= len(x.Signer)
			copy(dAtA[i:], x.Signer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreatePool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreatePool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pair = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeePercentage", wireType)
				}
				x.ProtocolFeePercentage = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProtocolFeePercentage |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsFee", wireType)
				}
				x.RewardsFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardsFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialA", wireType)
				}
				x.InitialA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InitialA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureA", wireType)
				}
				x.FutureA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureATime", wireType)
				}
				x.FutureATime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureATime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RateMultipliers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RateMultipliers = append(x.RateMultipliers, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RateMultipliers[len(x.RateMultipliers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgCreatePoolResponse protoreflect.MessageDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgCreatePoolResponse = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgCreatePoolResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgCreatePoolResponse)(nil)

type fastReflection_MsgCreatePoolResponse MsgCreatePoolResponse

func (x *MsgCreatePoolResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgCreatePoolResponse)(x)
}

func (x *MsgCreatePoolResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgCreatePoolResponse_messageType fastReflection_MsgCreatePoolResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgCreatePoolResponse_messageType{}

type fastReflection_MsgCreatePoolResponse_messageType struct{}

func (x fastReflection_MsgCreatePoolResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgCreatePoolResponse)(nil)
}
func (x fastReflection_MsgCreatePoolResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgCreatePoolResponse)
}
func (x fastReflection_MsgCreatePoolResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreatePoolResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgCreatePoolResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgCreatePoolResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgCreatePoolResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgCreatePoolResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgCreatePoolResponse) New() protoreflect.Message {
	return new(fastReflection_MsgCreatePoolResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgCreatePoolResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgCreatePoolResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgCreatePoolResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgCreatePoolResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePoolResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgCreatePoolResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePoolResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePoolResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePoolResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgCreatePoolResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgCreatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgCreatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgCreatePoolResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgCreatePoolResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgCreatePoolResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgCreatePoolResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgCreatePoolResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgCreatePoolResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgCreatePoolResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreatePoolResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgCreatePoolResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgUpdatePool_9_list)(nil)

type _MsgUpdatePool_9_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgUpdatePool_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgUpdatePool_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgUpdatePool_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgUpdatePool_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgUpdatePool_9_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgUpdatePool_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgUpdatePool_9_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgUpdatePool_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgUpdatePool                         protoreflect.MessageDescriptor
	fd_MsgUpdatePool_signer                  protoreflect.FieldDescriptor
	fd_MsgUpdatePool_pool_id                 protoreflect.FieldDescriptor
	fd_MsgUpdatePool_protocol_fee_percentage protoreflect.FieldDescriptor
	fd_MsgUpdatePool_rewards_fee             protoreflect.FieldDescriptor
	fd_MsgUpdatePool_initial_a               protoreflect.FieldDescriptor
	fd_MsgUpdatePool_future_a                protoreflect.FieldDescriptor
	fd_MsgUpdatePool_future_a_time           protoreflect.FieldDescriptor
	fd_MsgUpdatePool_rate_multipliers        protoreflect.FieldDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgUpdatePool = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgUpdatePool")
	fd_MsgUpdatePool_signer = md_MsgUpdatePool.Fields().ByName("signer")
	fd_MsgUpdatePool_pool_id = md_MsgUpdatePool.Fields().ByName("pool_id")
	fd_MsgUpdatePool_protocol_fee_percentage = md_MsgUpdatePool.Fields().ByName("protocol_fee_percentage")
	fd_MsgUpdatePool_rewards_fee = md_MsgUpdatePool.Fields().ByName("rewards_fee")
	fd_MsgUpdatePool_initial_a = md_MsgUpdatePool.Fields().ByName("initial_a")
	fd_MsgUpdatePool_future_a = md_MsgUpdatePool.Fields().ByName("future_a")
	fd_MsgUpdatePool_future_a_time = md_MsgUpdatePool.Fields().ByName("future_a_time")
	fd_MsgUpdatePool_rate_multipliers = md_MsgUpdatePool.Fields().ByName("rate_multipliers")
}

var _ protoreflect.Message = (*fastReflection_MsgUpdatePool)(nil)

type fastReflection_MsgUpdatePool MsgUpdatePool

func (x *MsgUpdatePool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUpdatePool)(x)
}

func (x *MsgUpdatePool) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUpdatePool_messageType fastReflection_MsgUpdatePool_messageType
var _ protoreflect.MessageType = fastReflection_MsgUpdatePool_messageType{}

type fastReflection_MsgUpdatePool_messageType struct{}

func (x fastReflection_MsgUpdatePool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUpdatePool)(nil)
}
func (x fastReflection_MsgUpdatePool_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUpdatePool)
}
func (x fastReflection_MsgUpdatePool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdatePool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUpdatePool) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdatePool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUpdatePool) Type() protoreflect.MessageType {
	return _fastReflection_MsgUpdatePool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUpdatePool) New() protoreflect.Message {
	return new(fastReflection_MsgUpdatePool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUpdatePool) Interface() protoreflect.ProtoMessage {
	return (*MsgUpdatePool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUpdatePool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Signer != "" {
		value := protoreflect.ValueOfString(x.Signer)
		if !f(fd_MsgUpdatePool_signer, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_MsgUpdatePool_pool_id, value) {
			return
		}
	}
	if x.ProtocolFeePercentage != int64(0) {
		value := protoreflect.ValueOfInt64(x.ProtocolFeePercentage)
		if !f(fd_MsgUpdatePool_protocol_fee_percentage, value) {
			return
		}
	}
	if x.RewardsFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.RewardsFee)
		if !f(fd_MsgUpdatePool_rewards_fee, value) {
			return
		}
	}
	if x.InitialA != int64(0) {
		value := protoreflect.ValueOfInt64(x.InitialA)
		if !f(fd_MsgUpdatePool_initial_a, value) {
			return
		}
	}
	if x.FutureA != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureA)
		if !f(fd_MsgUpdatePool_future_a, value) {
			return
		}
	}
	if x.FutureATime != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureATime)
		if !f(fd_MsgUpdatePool_future_a_time, value) {
			return
		}
	}
	if len(x.RateMultipliers) != 0 {
		value := protoreflect.ValueOfList(&_MsgUpdatePool_9_list{list: &x.RateMultipliers})
		if !f(fd_MsgUpdatePool_rate_multipliers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUpdatePool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgUpdatePool.signer":
		return x.Signer != ""
	case "noble.swap.stableswap.v1.MsgUpdatePool.pool_id":
		return x.PoolId != uint64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.protocol_fee_percentage":
		return x.ProtocolFeePercentage != int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.rewards_fee":
		return x.RewardsFee != int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.initial_a":
		return x.InitialA != int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a":
		return x.FutureA != int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a_time":
		return x.FutureATime != int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers":
		return len(x.RateMultipliers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgUpdatePool.signer":
		x.Signer = ""
	case "noble.swap.stableswap.v1.MsgUpdatePool.pool_id":
		x.PoolId = uint64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.protocol_fee_percentage":
		x.ProtocolFeePercentage = int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.rewards_fee":
		x.RewardsFee = int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.initial_a":
		x.InitialA = int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a":
		x.FutureA = int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a_time":
		x.FutureATime = int64(0)
	case "noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers":
		x.RateMultipliers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUpdatePool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.swap.stableswap.v1.MsgUpdatePool.signer":
		value := x.Signer
		return protoreflect.ValueOfString(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.protocol_fee_percentage":
		value := x.ProtocolFeePercentage
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.rewards_fee":
		value := x.RewardsFee
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.initial_a":
		value := x.InitialA
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a":
		value := x.FutureA
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a_time":
		value := x.FutureATime
		return protoreflect.ValueOfInt64(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers":
		if len(x.RateMultipliers) == 0 {
			return protoreflect.ValueOfList(&_MsgUpdatePool_9_list{})
		}
		listValue := &_MsgUpdatePool_9_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgUpdatePool.signer":
		x.Signer = value.Interface().(string)
	case "noble.swap.stableswap.v1.MsgUpdatePool.pool_id":
		x.PoolId = value.Uint()
	case "noble.swap.stableswap.v1.MsgUpdatePool.protocol_fee_percentage":
		x.ProtocolFeePercentage = value.Int()
	case "noble.swap.stableswap.v1.MsgUpdatePool.rewards_fee":
		x.RewardsFee = value.Int()
	case "noble.swap.stableswap.v1.MsgUpdatePool.initial_a":
		x.InitialA = value.Int()
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a":
		x.FutureA = value.Int()
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a_time":
		x.FutureATime = value.Int()
	case "noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers":
		lv := value.List()
		clv := lv.(*_MsgUpdatePool_9_list)
		x.RateMultipliers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers":
		if x.RateMultipliers == nil {
			x.RateMultipliers = []*v1beta1.Coin{}
		}
		value := &_MsgUpdatePool_9_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(value)
	case "noble.swap.stableswap.v1.MsgUpdatePool.signer":
		panic(fmt.Errorf("field signer of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgUpdatePool.pool_id":
		panic(fmt.Errorf("field pool_id of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgUpdatePool.protocol_fee_percentage":
		panic(fmt.Errorf("field protocol_fee_percentage of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgUpdatePool.rewards_fee":
		panic(fmt.Errorf("field rewards_fee of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgUpdatePool.initial_a":
		panic(fmt.Errorf("field initial_a of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a":
		panic(fmt.Errorf("field future_a of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a_time":
		panic(fmt.Errorf("field future_a_time of message noble.swap.stableswap.v1.MsgUpdatePool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUpdatePool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgUpdatePool.signer":
		return protoreflect.ValueOfString("")
	case "noble.swap.stableswap.v1.MsgUpdatePool.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "noble.swap.stableswap.v1.MsgUpdatePool.protocol_fee_percentage":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgUpdatePool.rewards_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgUpdatePool.initial_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgUpdatePool.future_a_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgUpdatePool_9_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePool"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUpdatePool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgUpdatePool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUpdatePool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUpdatePool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUpdatePool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUpdatePool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Signer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.ProtocolFeePercentage != 0 {
			n += 1 + runtime.Sov(uint64(x.ProtocolFeePercentage))
		}
		if x.RewardsFee != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardsFee))
		}
		if x.InitialA != 0 {
			n += 1 + runtime.Sov(uint64(x.InitialA))
		}
		if x.FutureA != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureA))
		}
		if x.FutureATime != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureATime))
		}
		if len(x.RateMultipliers) > 0 {
			for _, e := range x.RateMultipliers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdatePool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RateMultipliers) > 0 {
			for iNdEx := len(x.RateMultipliers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RateMultipliers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if x.FutureATime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureATime))
			i--
			dAtA[i] = 0x40
		}
		if x.FutureA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureA))
			i--
			dAtA[i] = 0x38
		}
		if x.InitialA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InitialA))
			i--
			dAtA[i] = 0x30
		}
		if x.RewardsFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsFee))
			i--
			dAtA[i] = 0x20
		}
		if x.ProtocolFeePercentage != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProtocolFeePercentage))
			i--
			dAtA[i] = 0x18
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Signer) > 0 {
			i -= len(x.Signer)
			copy(dAtA[i:], x.Signer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdatePool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdatePool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdatePool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeePercentage", wireType)
				}
				x.ProtocolFeePercentage = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProtocolFeePercentage |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsFee", wireType)
				}
				x.RewardsFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardsFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialA", wireType)
				}
				x.InitialA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InitialA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureA", wireType)
				}
				x.FutureA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureATime", wireType)
				}
				x.FutureATime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureATime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RateMultipliers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RateMultipliers = append(x.RateMultipliers, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RateMultipliers[len(x.RateMultipliers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgUpdatePoolResponse protoreflect.MessageDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgUpdatePoolResponse = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgUpdatePoolResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgUpdatePoolResponse)(nil)

type fastReflection_MsgUpdatePoolResponse MsgUpdatePoolResponse

func (x *MsgUpdatePoolResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUpdatePoolResponse)(x)
}

func (x *MsgUpdatePoolResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUpdatePoolResponse_messageType fastReflection_MsgUpdatePoolResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgUpdatePoolResponse_messageType{}

type fastReflection_MsgUpdatePoolResponse_messageType struct{}

func (x fastReflection_MsgUpdatePoolResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUpdatePoolResponse)(nil)
}
func (x fastReflection_MsgUpdatePoolResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUpdatePoolResponse)
}
func (x fastReflection_MsgUpdatePoolResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdatePoolResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUpdatePoolResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdatePoolResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUpdatePoolResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgUpdatePoolResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUpdatePoolResponse) New() protoreflect.Message {
	return new(fastReflection_MsgUpdatePoolResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUpdatePoolResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgUpdatePoolResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUpdatePoolResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUpdatePoolResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePoolResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUpdatePoolResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePoolResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePoolResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePoolResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUpdatePoolResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgUpdatePoolResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgUpdatePoolResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUpdatePoolResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgUpdatePoolResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUpdatePoolResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdatePoolResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUpdatePoolResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUpdatePoolResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUpdatePoolResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdatePoolResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdatePoolResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdatePoolResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgAddLiquidity_3_list)(nil)

type _MsgAddLiquidity_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgAddLiquidity_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgAddLiquidity_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgAddLiquidity_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgAddLiquidity_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgAddLiquidity_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgAddLiquidity_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgAddLiquidity_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgAddLiquidity_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgAddLiquidity         protoreflect.MessageDescriptor
	fd_MsgAddLiquidity_signer  protoreflect.FieldDescriptor
	fd_MsgAddLiquidity_pool_id protoreflect.FieldDescriptor
	fd_MsgAddLiquidity_amount  protoreflect.FieldDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgAddLiquidity = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgAddLiquidity")
	fd_MsgAddLiquidity_signer = md_MsgAddLiquidity.Fields().ByName("signer")
	fd_MsgAddLiquidity_pool_id = md_MsgAddLiquidity.Fields().ByName("pool_id")
	fd_MsgAddLiquidity_amount = md_MsgAddLiquidity.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_MsgAddLiquidity)(nil)

type fastReflection_MsgAddLiquidity MsgAddLiquidity

func (x *MsgAddLiquidity) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgAddLiquidity)(x)
}

func (x *MsgAddLiquidity) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgAddLiquidity_messageType fastReflection_MsgAddLiquidity_messageType
var _ protoreflect.MessageType = fastReflection_MsgAddLiquidity_messageType{}

type fastReflection_MsgAddLiquidity_messageType struct{}

func (x fastReflection_MsgAddLiquidity_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgAddLiquidity)(nil)
}
func (x fastReflection_MsgAddLiquidity_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgAddLiquidity)
}
func (x fastReflection_MsgAddLiquidity_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgAddLiquidity
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgAddLiquidity) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgAddLiquidity
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgAddLiquidity) Type() protoreflect.MessageType {
	return _fastReflection_MsgAddLiquidity_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgAddLiquidity) New() protoreflect.Message {
	return new(fastReflection_MsgAddLiquidity)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgAddLiquidity) Interface() protoreflect.ProtoMessage {
	return (*MsgAddLiquidity)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgAddLiquidity) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Signer != "" {
		value := protoreflect.ValueOfString(x.Signer)
		if !f(fd_MsgAddLiquidity_signer, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_MsgAddLiquidity_pool_id, value) {
			return
		}
	}
	if len(x.Amount) != 0 {
		value := protoreflect.ValueOfList(&_MsgAddLiquidity_3_list{list: &x.Amount})
		if !f(fd_MsgAddLiquidity_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgAddLiquidity) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidity.signer":
		return x.Signer != ""
	case "noble.swap.stableswap.v1.MsgAddLiquidity.pool_id":
		return x.PoolId != uint64(0)
	case "noble.swap.stableswap.v1.MsgAddLiquidity.amount":
		return len(x.Amount) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidity does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidity) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidity.signer":
		x.Signer = ""
	case "noble.swap.stableswap.v1.MsgAddLiquidity.pool_id":
		x.PoolId = uint64(0)
	case "noble.swap.stableswap.v1.MsgAddLiquidity.amount":
		x.Amount = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidity does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgAddLiquidity) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidity.signer":
		value := x.Signer
		return protoreflect.ValueOfString(value)
	case "noble.swap.stableswap.v1.MsgAddLiquidity.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "noble.swap.stableswap.v1.MsgAddLiquidity.amount":
		if len(x.Amount) == 0 {
			return protoreflect.ValueOfList(&_MsgAddLiquidity_3_list{})
		}
		listValue := &_MsgAddLiquidity_3_list{list: &x.Amount}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidity does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidity) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidity.signer":
		x.Signer = value.Interface().(string)
	case "noble.swap.stableswap.v1.MsgAddLiquidity.pool_id":
		x.PoolId = value.Uint()
	case "noble.swap.stableswap.v1.MsgAddLiquidity.amount":
		lv := value.List()
		clv := lv.(*_MsgAddLiquidity_3_list)
		x.Amount = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidity does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidity) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidity.amount":
		if x.Amount == nil {
			x.Amount = []*v1beta1.Coin{}
		}
		value := &_MsgAddLiquidity_3_list{list: &x.Amount}
		return protoreflect.ValueOfList(value)
	case "noble.swap.stableswap.v1.MsgAddLiquidity.signer":
		panic(fmt.Errorf("field signer of message noble.swap.stableswap.v1.MsgAddLiquidity is not mutable"))
	case "noble.swap.stableswap.v1.MsgAddLiquidity.pool_id":
		panic(fmt.Errorf("field pool_id of message noble.swap.stableswap.v1.MsgAddLiquidity is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidity does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgAddLiquidity) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidity.signer":
		return protoreflect.ValueOfString("")
	case "noble.swap.stableswap.v1.MsgAddLiquidity.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "noble.swap.stableswap.v1.MsgAddLiquidity.amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgAddLiquidity_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidity does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgAddLiquidity) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgAddLiquidity", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgAddLiquidity) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidity) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgAddLiquidity) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgAddLiquidity) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgAddLiquidity)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Signer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if len(x.Amount) > 0 {
			for _, e := range x.Amount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgAddLiquidity)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Amount) > 0 {
			for iNdEx := len(x.Amount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Amount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Signer) > 0 {
			i -= len(x.Signer)
			copy(dAtA[i:], x.Signer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgAddLiquidity)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgAddLiquidity: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgAddLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = append(x.Amount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount[len(x.Amount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgAddLiquidityResponse               protoreflect.MessageDescriptor
	fd_MsgAddLiquidityResponse_minted_shares protoreflect.FieldDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgAddLiquidityResponse = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgAddLiquidityResponse")
	fd_MsgAddLiquidityResponse_minted_shares = md_MsgAddLiquidityResponse.Fields().ByName("minted_shares")
}

var _ protoreflect.Message = (*fastReflection_MsgAddLiquidityResponse)(nil)

type fastReflection_MsgAddLiquidityResponse MsgAddLiquidityResponse

func (x *MsgAddLiquidityResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgAddLiquidityResponse)(x)
}

func (x *MsgAddLiquidityResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgAddLiquidityResponse_messageType fastReflection_MsgAddLiquidityResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgAddLiquidityResponse_messageType{}

type fastReflection_MsgAddLiquidityResponse_messageType struct{}

func (x fastReflection_MsgAddLiquidityResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgAddLiquidityResponse)(nil)
}
func (x fastReflection_MsgAddLiquidityResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgAddLiquidityResponse)
}
func (x fastReflection_MsgAddLiquidityResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgAddLiquidityResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgAddLiquidityResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgAddLiquidityResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgAddLiquidityResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgAddLiquidityResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgAddLiquidityResponse) New() protoreflect.Message {
	return new(fastReflection_MsgAddLiquidityResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgAddLiquidityResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgAddLiquidityResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgAddLiquidityResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MintedShares != int64(0) {
		value := protoreflect.ValueOfInt64(x.MintedShares)
		if !f(fd_MsgAddLiquidityResponse_minted_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgAddLiquidityResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidityResponse.minted_shares":
		return x.MintedShares != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidityResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidityResponse.minted_shares":
		x.MintedShares = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgAddLiquidityResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidityResponse.minted_shares":
		value := x.MintedShares
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidityResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidityResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidityResponse.minted_shares":
		x.MintedShares = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidityResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidityResponse.minted_shares":
		panic(fmt.Errorf("field minted_shares of message noble.swap.stableswap.v1.MsgAddLiquidityResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgAddLiquidityResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgAddLiquidityResponse.minted_shares":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgAddLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgAddLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgAddLiquidityResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgAddLiquidityResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgAddLiquidityResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgAddLiquidityResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgAddLiquidityResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgAddLiquidityResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgAddLiquidityResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MintedShares != 0 {
			n += 1 + runtime.Sov(uint64(x.MintedShares))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgAddLiquidityResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MintedShares != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MintedShares))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgAddLiquidityResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgAddLiquidityResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgAddLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintedShares", wireType)
				}
				x.MintedShares = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MintedShares |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgRemoveLiquidity            protoreflect.MessageDescriptor
	fd_MsgRemoveLiquidity_signer     protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_pool_id    protoreflect.FieldDescriptor
	fd_MsgRemoveLiquidity_percentage protoreflect.FieldDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgRemoveLiquidity = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgRemoveLiquidity")
	fd_MsgRemoveLiquidity_signer = md_MsgRemoveLiquidity.Fields().ByName("signer")
	fd_MsgRemoveLiquidity_pool_id = md_MsgRemoveLiquidity.Fields().ByName("pool_id")
	fd_MsgRemoveLiquidity_percentage = md_MsgRemoveLiquidity.Fields().ByName("percentage")
}

var _ protoreflect.Message = (*fastReflection_MsgRemoveLiquidity)(nil)

type fastReflection_MsgRemoveLiquidity MsgRemoveLiquidity

func (x *MsgRemoveLiquidity) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidity)(x)
}

func (x *MsgRemoveLiquidity) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRemoveLiquidity_messageType fastReflection_MsgRemoveLiquidity_messageType
var _ protoreflect.MessageType = fastReflection_MsgRemoveLiquidity_messageType{}

type fastReflection_MsgRemoveLiquidity_messageType struct{}

func (x fastReflection_MsgRemoveLiquidity_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidity)(nil)
}
func (x fastReflection_MsgRemoveLiquidity_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidity)
}
func (x fastReflection_MsgRemoveLiquidity_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidity
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRemoveLiquidity) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidity
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRemoveLiquidity) Type() protoreflect.MessageType {
	return _fastReflection_MsgRemoveLiquidity_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRemoveLiquidity) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidity)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRemoveLiquidity) Interface() protoreflect.ProtoMessage {
	return (*MsgRemoveLiquidity)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRemoveLiquidity) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Signer != "" {
		value := protoreflect.ValueOfString(x.Signer)
		if !f(fd_MsgRemoveLiquidity_signer, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_MsgRemoveLiquidity_pool_id, value) {
			return
		}
	}
	if x.Percentage != "" {
		value := protoreflect.ValueOfString(x.Percentage)
		if !f(fd_MsgRemoveLiquidity_percentage, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRemoveLiquidity) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.signer":
		return x.Signer != ""
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.pool_id":
		return x.PoolId != uint64(0)
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.percentage":
		return x.Percentage != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.signer":
		x.Signer = ""
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.pool_id":
		x.PoolId = uint64(0)
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.percentage":
		x.Percentage = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRemoveLiquidity) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.signer":
		value := x.Signer
		return protoreflect.ValueOfString(value)
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.percentage":
		value := x.Percentage
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidity does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.signer":
		x.Signer = value.Interface().(string)
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.pool_id":
		x.PoolId = value.Uint()
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.percentage":
		x.Percentage = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.signer":
		panic(fmt.Errorf("field signer of message noble.swap.stableswap.v1.MsgRemoveLiquidity is not mutable"))
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.pool_id":
		panic(fmt.Errorf("field pool_id of message noble.swap.stableswap.v1.MsgRemoveLiquidity is not mutable"))
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.percentage":
		panic(fmt.Errorf("field percentage of message noble.swap.stableswap.v1.MsgRemoveLiquidity is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRemoveLiquidity) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.signer":
		return protoreflect.ValueOfString("")
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "noble.swap.stableswap.v1.MsgRemoveLiquidity.percentage":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidity"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidity does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRemoveLiquidity) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgRemoveLiquidity", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRemoveLiquidity) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidity) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRemoveLiquidity) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRemoveLiquidity) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRemoveLiquidity)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Signer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.Percentage)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidity)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Percentage) > 0 {
			i -= len(x.Percentage)
			copy(dAtA[i:], x.Percentage)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Percentage)))
			i--
			dAtA[i] = 0x1a
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Signer) > 0 {
			i -= len(x.Signer)
			copy(dAtA[i:], x.Signer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidity)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidity: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Percentage = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgRemoveLiquidityResponse                  protoreflect.MessageDescriptor
	fd_MsgRemoveLiquidityResponse_unbonding_shares protoreflect.FieldDescriptor
)

func init() {
	file_noble_swap_stableswap_v1_tx_proto_init()
	md_MsgRemoveLiquidityResponse = File_noble_swap_stableswap_v1_tx_proto.Messages().ByName("MsgRemoveLiquidityResponse")
	fd_MsgRemoveLiquidityResponse_unbonding_shares = md_MsgRemoveLiquidityResponse.Fields().ByName("unbonding_shares")
}

var _ protoreflect.Message = (*fastReflection_MsgRemoveLiquidityResponse)(nil)

type fastReflection_MsgRemoveLiquidityResponse MsgRemoveLiquidityResponse

func (x *MsgRemoveLiquidityResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidityResponse)(x)
}

func (x *MsgRemoveLiquidityResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRemoveLiquidityResponse_messageType fastReflection_MsgRemoveLiquidityResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgRemoveLiquidityResponse_messageType{}

type fastReflection_MsgRemoveLiquidityResponse_messageType struct{}

func (x fastReflection_MsgRemoveLiquidityResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRemoveLiquidityResponse)(nil)
}
func (x fastReflection_MsgRemoveLiquidityResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidityResponse)
}
func (x fastReflection_MsgRemoveLiquidityResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidityResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRemoveLiquidityResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRemoveLiquidityResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRemoveLiquidityResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgRemoveLiquidityResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRemoveLiquidityResponse) New() protoreflect.Message {
	return new(fastReflection_MsgRemoveLiquidityResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRemoveLiquidityResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgRemoveLiquidityResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRemoveLiquidityResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.UnbondingShares != "" {
		value := protoreflect.ValueOfString(x.UnbondingShares)
		if !f(fd_MsgRemoveLiquidityResponse_unbonding_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRemoveLiquidityResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse.unbonding_shares":
		return x.UnbondingShares != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse.unbonding_shares":
		x.UnbondingShares = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRemoveLiquidityResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse.unbonding_shares":
		value := x.UnbondingShares
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse.unbonding_shares":
		x.UnbondingShares = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse.unbonding_shares":
		panic(fmt.Errorf("field unbonding_shares of message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRemoveLiquidityResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.swap.stableswap.v1.MsgRemoveLiquidityResponse.unbonding_shares":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse"))
		}
		panic(fmt.Errorf("message noble.swap.stableswap.v1.MsgRemoveLiquidityResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRemoveLiquidityResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.swap.stableswap.v1.MsgRemoveLiquidityResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRemoveLiquidityResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRemoveLiquidityResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRemoveLiquidityResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRemoveLiquidityResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRemoveLiquidityResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.UnbondingShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidityResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.UnbondingShares) > 0 {
			i -= len(x.UnbondingShares)
			copy(dAtA[i:], x.UnbondingShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UnbondingShares)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRemoveLiquidityResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidityResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRemoveLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnbondingShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: noble/swap/stableswap/v1/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgCreatePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the authority creating the pool.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The asset pair that will be part of the pool.
	Pair string `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	// The protocol fee percentage.
	ProtocolFeePercentage int64 `protobuf:"varint,3,opt,name=protocol_fee_percentage,json=protocolFeePercentage,proto3" json:"protocol_fee_percentage,omitempty"`
	// The rewards fee value.
	RewardsFee int64 `protobuf:"varint,4,opt,name=rewards_fee,json=rewardsFee,proto3" json:"rewards_fee,omitempty"`
	// The initial A parameter for the pool.
	InitialA int64 `protobuf:"varint,6,opt,name=initial_a,json=initialA,proto3" json:"initial_a,omitempty"`
	// The future A parameter for pool rebalancing.
	FutureA int64 `protobuf:"varint,7,opt,name=future_a,json=futureA,proto3" json:"future_a,omitempty"`
	// The time to reach the future A parameter.
	FutureATime int64 `protobuf:"varint,8,opt,name=future_a_time,json=futureATime,proto3" json:"future_a_time,omitempty"`
	// The coins rate multipliers.
	RateMultipliers []*v1beta1.Coin `protobuf:"bytes,9,rep,name=rate_multipliers,json=rateMultipliers,proto3" json:"rate_multipliers,omitempty"`
}

func (x *MsgCreatePool) Reset() {
	*x = MsgCreatePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreatePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreatePool) ProtoMessage() {}

// Deprecated: Use MsgCreatePool.ProtoReflect.Descriptor instead.
func (*MsgCreatePool) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgCreatePool) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *MsgCreatePool) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *MsgCreatePool) GetProtocolFeePercentage() int64 {
	if x != nil {
		return x.ProtocolFeePercentage
	}
	return 0
}

func (x *MsgCreatePool) GetRewardsFee() int64 {
	if x != nil {
		return x.RewardsFee
	}
	return 0
}

func (x *MsgCreatePool) GetInitialA() int64 {
	if x != nil {
		return x.InitialA
	}
	return 0
}

func (x *MsgCreatePool) GetFutureA() int64 {
	if x != nil {
		return x.FutureA
	}
	return 0
}

func (x *MsgCreatePool) GetFutureATime() int64 {
	if x != nil {
		return x.FutureATime
	}
	return 0
}

func (x *MsgCreatePool) GetRateMultipliers() []*v1beta1.Coin {
	if x != nil {
		return x.RateMultipliers
	}
	return nil
}

type MsgCreatePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgCreatePoolResponse) Reset() {
	*x = MsgCreatePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCreatePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCreatePoolResponse) ProtoMessage() {}

// Deprecated: Use MsgCreatePoolResponse.ProtoReflect.Descriptor instead.
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{1}
}

type MsgUpdatePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the authority updating the pool.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// ID of the pool being updated.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// The new protocol fee percentage.
	ProtocolFeePercentage int64 `protobuf:"varint,3,opt,name=protocol_fee_percentage,json=protocolFeePercentage,proto3" json:"protocol_fee_percentage,omitempty"`
	// The new rewards fee value.
	RewardsFee int64 `protobuf:"varint,4,opt,name=rewards_fee,json=rewardsFee,proto3" json:"rewards_fee,omitempty"`
	// The new initial A parameter.
	InitialA int64 `protobuf:"varint,6,opt,name=initial_a,json=initialA,proto3" json:"initial_a,omitempty"`
	// The new future A parameter.
	FutureA int64 `protobuf:"varint,7,opt,name=future_a,json=futureA,proto3" json:"future_a,omitempty"`
	// The time to reach the future A parameter.
	FutureATime int64 `protobuf:"varint,8,opt,name=future_a_time,json=futureATime,proto3" json:"future_a_time,omitempty"`
	// The coins rate multipliers.
	RateMultipliers []*v1beta1.Coin `protobuf:"bytes,9,rep,name=rate_multipliers,json=rateMultipliers,proto3" json:"rate_multipliers,omitempty"`
}

func (x *MsgUpdatePool) Reset() {
	*x = MsgUpdatePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdatePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdatePool) ProtoMessage() {}

// Deprecated: Use MsgUpdatePool.ProtoReflect.Descriptor instead.
func (*MsgUpdatePool) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgUpdatePool) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *MsgUpdatePool) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *MsgUpdatePool) GetProtocolFeePercentage() int64 {
	if x != nil {
		return x.ProtocolFeePercentage
	}
	return 0
}

func (x *MsgUpdatePool) GetRewardsFee() int64 {
	if x != nil {
		return x.RewardsFee
	}
	return 0
}

func (x *MsgUpdatePool) GetInitialA() int64 {
	if x != nil {
		return x.InitialA
	}
	return 0
}

func (x *MsgUpdatePool) GetFutureA() int64 {
	if x != nil {
		return x.FutureA
	}
	return 0
}

func (x *MsgUpdatePool) GetFutureATime() int64 {
	if x != nil {
		return x.FutureATime
	}
	return 0
}

func (x *MsgUpdatePool) GetRateMultipliers() []*v1beta1.Coin {
	if x != nil {
		return x.RateMultipliers
	}
	return nil
}

type MsgUpdatePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgUpdatePoolResponse) Reset() {
	*x = MsgUpdatePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdatePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdatePoolResponse) ProtoMessage() {}

// Deprecated: Use MsgUpdatePoolResponse.ProtoReflect.Descriptor instead.
func (*MsgUpdatePoolResponse) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{3}
}

type MsgAddLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the user adding liquidity.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The ID of the pool to which liquidity is being added.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// The coins amount to add to the pool.
	Amount []*v1beta1.Coin `protobuf:"bytes,3,rep,name=amount,proto3" json:"amount,omitempty"`
}

func (x *MsgAddLiquidity) Reset() {
	*x = MsgAddLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAddLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAddLiquidity) ProtoMessage() {}

// Deprecated: Use MsgAddLiquidity.ProtoReflect.Descriptor instead.
func (*MsgAddLiquidity) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgAddLiquidity) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *MsgAddLiquidity) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *MsgAddLiquidity) GetAmount() []*v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

type MsgAddLiquidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of liquidity pool shares minted for the user.
	MintedShares int64 `protobuf:"varint,1,opt,name=minted_shares,json=mintedShares,proto3" json:"minted_shares,omitempty"`
}

func (x *MsgAddLiquidityResponse) Reset() {
	*x = MsgAddLiquidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAddLiquidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAddLiquidityResponse) ProtoMessage() {}

// Deprecated: Use MsgAddLiquidityResponse.ProtoReflect.Descriptor instead.
func (*MsgAddLiquidityResponse) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{5}
}

func (x *MsgAddLiquidityResponse) GetMintedShares() int64 {
	if x != nil {
		return x.MintedShares
	}
	return 0
}

type MsgRemoveLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of the user removing liquidity.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The ID of the pool from which liquidity is being removed.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// The percentage of liquidity to remove.
	Percentage string `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *MsgRemoveLiquidity) Reset() {
	*x = MsgRemoveLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRemoveLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRemoveLiquidity) ProtoMessage() {}

// Deprecated: Use MsgRemoveLiquidity.ProtoReflect.Descriptor instead.
func (*MsgRemoveLiquidity) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{6}
}

func (x *MsgRemoveLiquidity) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *MsgRemoveLiquidity) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *MsgRemoveLiquidity) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

type MsgRemoveLiquidityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of shares that are unbonding.
	UnbondingShares string `protobuf:"bytes,1,opt,name=unbonding_shares,json=unbondingShares,proto3" json:"unbonding_shares,omitempty"`
}

func (x *MsgRemoveLiquidityResponse) Reset() {
	*x = MsgRemoveLiquidityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_swap_stableswap_v1_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRemoveLiquidityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRemoveLiquidityResponse) ProtoMessage() {}

// Deprecated: Use MsgRemoveLiquidityResponse.ProtoReflect.Descriptor instead.
func (*MsgRemoveLiquidityResponse) Descriptor() ([]byte, []int) {
	return file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP(), []int{7}
}

func (x *MsgRemoveLiquidityResponse) GetUnbondingShares() string {
	if x != nil {
		return x.UnbondingShares
	}
	return ""
}

var File_noble_swap_stableswap_v1_tx_proto protoreflect.FileDescriptor

var file_noble_swap_stableswap_v1_tx_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x03, 0x0a, 0x0d, 0x4d,
	0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8,
	0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a,
	0xe7, 0xb0, 0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x3a, 0x32, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00,
	0x82, 0xe7, 0xb0, 0x2a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x8a, 0xe7, 0xb0, 0x2a, 0x1a,
	0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x4d, 0x73,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f,
	0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0,
	0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x73, 0x3a, 0x32, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x82, 0xe7,
	0xb0, 0x2a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x8a, 0xe7, 0xb0, 0x2a, 0x1a, 0x73, 0x77,
	0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x79, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f,
	0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0,
	0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x34, 0x88, 0xa0, 0x1f,
	0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x8a, 0xe7, 0xb0, 0x2a, 0x1c, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x77, 0x61, 0x70, 0x2f, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x22, 0x3e, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x37, 0x88, 0xa0, 0x1f,
	0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x8a, 0xe7, 0xb0, 0x2a, 0x1f, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x77, 0x61, 0x70, 0x2f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x22, 0x7f, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x32, 0xc1, 0x03, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x66, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x2e, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x2f, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x2f, 0x2e, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x29, 0x2e,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x1a, 0x34, 0x2e, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x05, 0x80, 0xe7, 0xb0, 0x2a, 0x01, 0x42, 0xe4, 0x01, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x07, 0x54, 0x78, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x6e, 0x6f, 0x62, 0x6c,
	0x65, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f,
	0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x4e, 0x53, 0x53, 0xaa, 0x02, 0x18, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x18, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x53, 0x77, 0x61, 0x70, 0x5c, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x4e, 0x6f,
	0x62, 0x6c, 0x65, 0x5c, 0x53, 0x77, 0x61, 0x70, 0x5c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x77, 0x61, 0x70, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x1b, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x3a, 0x3a, 0x53, 0x77, 0x61, 0x70,
	0x3a, 0x3a, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_noble_swap_stableswap_v1_tx_proto_rawDescOnce sync.Once
	file_noble_swap_stableswap_v1_tx_proto_rawDescData = file_noble_swap_stableswap_v1_tx_proto_rawDesc
)

func file_noble_swap_stableswap_v1_tx_proto_rawDescGZIP() []byte {
	file_noble_swap_stableswap_v1_tx_proto_rawDescOnce.Do(func() {
		file_noble_swap_stableswap_v1_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_noble_swap_stableswap_v1_tx_proto_rawDescData)
	})
	return file_noble_swap_stableswap_v1_tx_proto_rawDescData
}

var file_noble_swap_stableswap_v1_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_noble_swap_stableswap_v1_tx_proto_goTypes = []interface{}{
	(*MsgCreatePool)(nil),              // 0: noble.swap.stableswap.v1.MsgCreatePool
	(*MsgCreatePoolResponse)(nil),      // 1: noble.swap.stableswap.v1.MsgCreatePoolResponse
	(*MsgUpdatePool)(nil),              // 2: noble.swap.stableswap.v1.MsgUpdatePool
	(*MsgUpdatePoolResponse)(nil),      // 3: noble.swap.stableswap.v1.MsgUpdatePoolResponse
	(*MsgAddLiquidity)(nil),            // 4: noble.swap.stableswap.v1.MsgAddLiquidity
	(*MsgAddLiquidityResponse)(nil),    // 5: noble.swap.stableswap.v1.MsgAddLiquidityResponse
	(*MsgRemoveLiquidity)(nil),         // 6: noble.swap.stableswap.v1.MsgRemoveLiquidity
	(*MsgRemoveLiquidityResponse)(nil), // 7: noble.swap.stableswap.v1.MsgRemoveLiquidityResponse
	(*v1beta1.Coin)(nil),               // 8: cosmos.base.v1beta1.Coin
}
var file_noble_swap_stableswap_v1_tx_proto_depIdxs = []int32{
	8, // 0: noble.swap.stableswap.v1.MsgCreatePool.rate_multipliers:type_name -> cosmos.base.v1beta1.Coin
	8, // 1: noble.swap.stableswap.v1.MsgUpdatePool.rate_multipliers:type_name -> cosmos.base.v1beta1.Coin
	8, // 2: noble.swap.stableswap.v1.MsgAddLiquidity.amount:type_name -> cosmos.base.v1beta1.Coin
	0, // 3: noble.swap.stableswap.v1.Msg.CreatePool:input_type -> noble.swap.stableswap.v1.MsgCreatePool
	2, // 4: noble.swap.stableswap.v1.Msg.UpdatePool:input_type -> noble.swap.stableswap.v1.MsgUpdatePool
	4, // 5: noble.swap.stableswap.v1.Msg.AddLiquidity:input_type -> noble.swap.stableswap.v1.MsgAddLiquidity
	6, // 6: noble.swap.stableswap.v1.Msg.RemoveLiquidity:input_type -> noble.swap.stableswap.v1.MsgRemoveLiquidity
	1, // 7: noble.swap.stableswap.v1.Msg.CreatePool:output_type -> noble.swap.stableswap.v1.MsgCreatePoolResponse
	3, // 8: noble.swap.stableswap.v1.Msg.UpdatePool:output_type -> noble.swap.stableswap.v1.MsgUpdatePoolResponse
	5, // 9: noble.swap.stableswap.v1.Msg.AddLiquidity:output_type -> noble.swap.stableswap.v1.MsgAddLiquidityResponse
	7, // 10: noble.swap.stableswap.v1.Msg.RemoveLiquidity:output_type -> noble.swap.stableswap.v1.MsgRemoveLiquidityResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_noble_swap_stableswap_v1_tx_proto_init() }
func file_noble_swap_stableswap_v1_tx_proto_init() {
	if File_noble_swap_stableswap_v1_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreatePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCreatePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdatePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdatePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAddLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAddLiquidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRemoveLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_swap_stableswap_v1_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRemoveLiquidityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noble_swap_stableswap_v1_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_noble_swap_stableswap_v1_tx_proto_goTypes,
		DependencyIndexes: file_noble_swap_stableswap_v1_tx_proto_depIdxs,
		MessageInfos:      file_noble_swap_stableswap_v1_tx_proto_msgTypes,
	}.Build()
	File_noble_swap_stableswap_v1_tx_proto = out.File
	file_noble_swap_stableswap_v1_tx_proto_rawDesc = nil
	file_noble_swap_stableswap_v1_tx_proto_goTypes = nil
	file_noble_swap_stableswap_v1_tx_proto_depIdxs = nil
}
