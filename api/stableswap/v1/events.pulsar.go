// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stableswapv1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_PoolCreated_11_list)(nil)

type _PoolCreated_11_list struct {
	list *[]*v1beta1.Coin
}

func (x *_PoolCreated_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PoolCreated_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PoolCreated_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_PoolCreated_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PoolCreated_11_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PoolCreated_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PoolCreated_11_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PoolCreated_11_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PoolCreated                         protoreflect.MessageDescriptor
	fd_PoolCreated_pool_id                 protoreflect.FieldDescriptor
	fd_PoolCreated_algorithm               protoreflect.FieldDescriptor
	fd_PoolCreated_pair                    protoreflect.FieldDescriptor
	fd_PoolCreated_protocol_fee_percentage protoreflect.FieldDescriptor
	fd_PoolCreated_rewards_fee             protoreflect.FieldDescriptor
	fd_PoolCreated_max_fee                 protoreflect.FieldDescriptor
	fd_PoolCreated_initial_a               protoreflect.FieldDescriptor
	fd_PoolCreated_initial_a_time          protoreflect.FieldDescriptor
	fd_PoolCreated_future_a                protoreflect.FieldDescriptor
	fd_PoolCreated_future_a_time           protoreflect.FieldDescriptor
	fd_PoolCreated_rate_multipliers        protoreflect.FieldDescriptor
)

func init() {
	file_swap_stableswap_v1_events_proto_init()
	md_PoolCreated = File_swap_stableswap_v1_events_proto.Messages().ByName("PoolCreated")
	fd_PoolCreated_pool_id = md_PoolCreated.Fields().ByName("pool_id")
	fd_PoolCreated_algorithm = md_PoolCreated.Fields().ByName("algorithm")
	fd_PoolCreated_pair = md_PoolCreated.Fields().ByName("pair")
	fd_PoolCreated_protocol_fee_percentage = md_PoolCreated.Fields().ByName("protocol_fee_percentage")
	fd_PoolCreated_rewards_fee = md_PoolCreated.Fields().ByName("rewards_fee")
	fd_PoolCreated_max_fee = md_PoolCreated.Fields().ByName("max_fee")
	fd_PoolCreated_initial_a = md_PoolCreated.Fields().ByName("initial_a")
	fd_PoolCreated_initial_a_time = md_PoolCreated.Fields().ByName("initial_a_time")
	fd_PoolCreated_future_a = md_PoolCreated.Fields().ByName("future_a")
	fd_PoolCreated_future_a_time = md_PoolCreated.Fields().ByName("future_a_time")
	fd_PoolCreated_rate_multipliers = md_PoolCreated.Fields().ByName("rate_multipliers")
}

var _ protoreflect.Message = (*fastReflection_PoolCreated)(nil)

type fastReflection_PoolCreated PoolCreated

func (x *PoolCreated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolCreated)(x)
}

func (x *PoolCreated) slowProtoReflect() protoreflect.Message {
	mi := &file_swap_stableswap_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolCreated_messageType fastReflection_PoolCreated_messageType
var _ protoreflect.MessageType = fastReflection_PoolCreated_messageType{}

type fastReflection_PoolCreated_messageType struct{}

func (x fastReflection_PoolCreated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolCreated)(nil)
}
func (x fastReflection_PoolCreated_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolCreated)
}
func (x fastReflection_PoolCreated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolCreated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolCreated) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolCreated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolCreated) Type() protoreflect.MessageType {
	return _fastReflection_PoolCreated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolCreated) New() protoreflect.Message {
	return new(fastReflection_PoolCreated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolCreated) Interface() protoreflect.ProtoMessage {
	return (*PoolCreated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolCreated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_PoolCreated_pool_id, value) {
			return
		}
	}
	if x.Algorithm != "" {
		value := protoreflect.ValueOfString(x.Algorithm)
		if !f(fd_PoolCreated_algorithm, value) {
			return
		}
	}
	if x.Pair != "" {
		value := protoreflect.ValueOfString(x.Pair)
		if !f(fd_PoolCreated_pair, value) {
			return
		}
	}
	if x.ProtocolFeePercentage != int64(0) {
		value := protoreflect.ValueOfInt64(x.ProtocolFeePercentage)
		if !f(fd_PoolCreated_protocol_fee_percentage, value) {
			return
		}
	}
	if x.RewardsFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.RewardsFee)
		if !f(fd_PoolCreated_rewards_fee, value) {
			return
		}
	}
	if x.MaxFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxFee)
		if !f(fd_PoolCreated_max_fee, value) {
			return
		}
	}
	if x.InitialA != int64(0) {
		value := protoreflect.ValueOfInt64(x.InitialA)
		if !f(fd_PoolCreated_initial_a, value) {
			return
		}
	}
	if x.InitialATime != int64(0) {
		value := protoreflect.ValueOfInt64(x.InitialATime)
		if !f(fd_PoolCreated_initial_a_time, value) {
			return
		}
	}
	if x.FutureA != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureA)
		if !f(fd_PoolCreated_future_a, value) {
			return
		}
	}
	if x.FutureATime != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureATime)
		if !f(fd_PoolCreated_future_a_time, value) {
			return
		}
	}
	if len(x.RateMultipliers) != 0 {
		value := protoreflect.ValueOfList(&_PoolCreated_11_list{list: &x.RateMultipliers})
		if !f(fd_PoolCreated_rate_multipliers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolCreated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolCreated.pool_id":
		return x.PoolId != uint64(0)
	case "swap.stableswap.v1.PoolCreated.algorithm":
		return x.Algorithm != ""
	case "swap.stableswap.v1.PoolCreated.pair":
		return x.Pair != ""
	case "swap.stableswap.v1.PoolCreated.protocol_fee_percentage":
		return x.ProtocolFeePercentage != int64(0)
	case "swap.stableswap.v1.PoolCreated.rewards_fee":
		return x.RewardsFee != int64(0)
	case "swap.stableswap.v1.PoolCreated.max_fee":
		return x.MaxFee != int64(0)
	case "swap.stableswap.v1.PoolCreated.initial_a":
		return x.InitialA != int64(0)
	case "swap.stableswap.v1.PoolCreated.initial_a_time":
		return x.InitialATime != int64(0)
	case "swap.stableswap.v1.PoolCreated.future_a":
		return x.FutureA != int64(0)
	case "swap.stableswap.v1.PoolCreated.future_a_time":
		return x.FutureATime != int64(0)
	case "swap.stableswap.v1.PoolCreated.rate_multipliers":
		return len(x.RateMultipliers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolCreated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolCreated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolCreated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolCreated.pool_id":
		x.PoolId = uint64(0)
	case "swap.stableswap.v1.PoolCreated.algorithm":
		x.Algorithm = ""
	case "swap.stableswap.v1.PoolCreated.pair":
		x.Pair = ""
	case "swap.stableswap.v1.PoolCreated.protocol_fee_percentage":
		x.ProtocolFeePercentage = int64(0)
	case "swap.stableswap.v1.PoolCreated.rewards_fee":
		x.RewardsFee = int64(0)
	case "swap.stableswap.v1.PoolCreated.max_fee":
		x.MaxFee = int64(0)
	case "swap.stableswap.v1.PoolCreated.initial_a":
		x.InitialA = int64(0)
	case "swap.stableswap.v1.PoolCreated.initial_a_time":
		x.InitialATime = int64(0)
	case "swap.stableswap.v1.PoolCreated.future_a":
		x.FutureA = int64(0)
	case "swap.stableswap.v1.PoolCreated.future_a_time":
		x.FutureATime = int64(0)
	case "swap.stableswap.v1.PoolCreated.rate_multipliers":
		x.RateMultipliers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolCreated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolCreated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolCreated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "swap.stableswap.v1.PoolCreated.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "swap.stableswap.v1.PoolCreated.algorithm":
		value := x.Algorithm
		return protoreflect.ValueOfString(value)
	case "swap.stableswap.v1.PoolCreated.pair":
		value := x.Pair
		return protoreflect.ValueOfString(value)
	case "swap.stableswap.v1.PoolCreated.protocol_fee_percentage":
		value := x.ProtocolFeePercentage
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.rewards_fee":
		value := x.RewardsFee
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.max_fee":
		value := x.MaxFee
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.initial_a":
		value := x.InitialA
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.initial_a_time":
		value := x.InitialATime
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.future_a":
		value := x.FutureA
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.future_a_time":
		value := x.FutureATime
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolCreated.rate_multipliers":
		if len(x.RateMultipliers) == 0 {
			return protoreflect.ValueOfList(&_PoolCreated_11_list{})
		}
		listValue := &_PoolCreated_11_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolCreated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolCreated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolCreated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolCreated.pool_id":
		x.PoolId = value.Uint()
	case "swap.stableswap.v1.PoolCreated.algorithm":
		x.Algorithm = value.Interface().(string)
	case "swap.stableswap.v1.PoolCreated.pair":
		x.Pair = value.Interface().(string)
	case "swap.stableswap.v1.PoolCreated.protocol_fee_percentage":
		x.ProtocolFeePercentage = value.Int()
	case "swap.stableswap.v1.PoolCreated.rewards_fee":
		x.RewardsFee = value.Int()
	case "swap.stableswap.v1.PoolCreated.max_fee":
		x.MaxFee = value.Int()
	case "swap.stableswap.v1.PoolCreated.initial_a":
		x.InitialA = value.Int()
	case "swap.stableswap.v1.PoolCreated.initial_a_time":
		x.InitialATime = value.Int()
	case "swap.stableswap.v1.PoolCreated.future_a":
		x.FutureA = value.Int()
	case "swap.stableswap.v1.PoolCreated.future_a_time":
		x.FutureATime = value.Int()
	case "swap.stableswap.v1.PoolCreated.rate_multipliers":
		lv := value.List()
		clv := lv.(*_PoolCreated_11_list)
		x.RateMultipliers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolCreated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolCreated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolCreated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolCreated.rate_multipliers":
		if x.RateMultipliers == nil {
			x.RateMultipliers = []*v1beta1.Coin{}
		}
		value := &_PoolCreated_11_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(value)
	case "swap.stableswap.v1.PoolCreated.pool_id":
		panic(fmt.Errorf("field pool_id of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.algorithm":
		panic(fmt.Errorf("field algorithm of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.pair":
		panic(fmt.Errorf("field pair of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.protocol_fee_percentage":
		panic(fmt.Errorf("field protocol_fee_percentage of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.rewards_fee":
		panic(fmt.Errorf("field rewards_fee of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.max_fee":
		panic(fmt.Errorf("field max_fee of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.initial_a":
		panic(fmt.Errorf("field initial_a of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.initial_a_time":
		panic(fmt.Errorf("field initial_a_time of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.future_a":
		panic(fmt.Errorf("field future_a of message swap.stableswap.v1.PoolCreated is not mutable"))
	case "swap.stableswap.v1.PoolCreated.future_a_time":
		panic(fmt.Errorf("field future_a_time of message swap.stableswap.v1.PoolCreated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolCreated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolCreated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolCreated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolCreated.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "swap.stableswap.v1.PoolCreated.algorithm":
		return protoreflect.ValueOfString("")
	case "swap.stableswap.v1.PoolCreated.pair":
		return protoreflect.ValueOfString("")
	case "swap.stableswap.v1.PoolCreated.protocol_fee_percentage":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.rewards_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.max_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.initial_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.initial_a_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.future_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.future_a_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolCreated.rate_multipliers":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_PoolCreated_11_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolCreated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolCreated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolCreated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in swap.stableswap.v1.PoolCreated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolCreated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolCreated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolCreated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolCreated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolCreated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.Algorithm)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Pair)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ProtocolFeePercentage != 0 {
			n += 1 + runtime.Sov(uint64(x.ProtocolFeePercentage))
		}
		if x.RewardsFee != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardsFee))
		}
		if x.MaxFee != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxFee))
		}
		if x.InitialA != 0 {
			n += 1 + runtime.Sov(uint64(x.InitialA))
		}
		if x.InitialATime != 0 {
			n += 1 + runtime.Sov(uint64(x.InitialATime))
		}
		if x.FutureA != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureA))
		}
		if x.FutureATime != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureATime))
		}
		if len(x.RateMultipliers) > 0 {
			for _, e := range x.RateMultipliers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolCreated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RateMultipliers) > 0 {
			for iNdEx := len(x.RateMultipliers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RateMultipliers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if x.FutureATime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureATime))
			i--
			dAtA[i] = 0x50
		}
		if x.FutureA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureA))
			i--
			dAtA[i] = 0x48
		}
		if x.InitialATime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InitialATime))
			i--
			dAtA[i] = 0x40
		}
		if x.InitialA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InitialA))
			i--
			dAtA[i] = 0x38
		}
		if x.MaxFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxFee))
			i--
			dAtA[i] = 0x30
		}
		if x.RewardsFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsFee))
			i--
			dAtA[i] = 0x28
		}
		if x.ProtocolFeePercentage != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProtocolFeePercentage))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Pair) > 0 {
			i -= len(x.Pair)
			copy(dAtA[i:], x.Pair)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Pair)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Algorithm) > 0 {
			i -= len(x.Algorithm)
			copy(dAtA[i:], x.Algorithm)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Algorithm)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolCreated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolCreated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolCreated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Algorithm = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pair = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeePercentage", wireType)
				}
				x.ProtocolFeePercentage = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProtocolFeePercentage |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsFee", wireType)
				}
				x.RewardsFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardsFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
				}
				x.MaxFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialA", wireType)
				}
				x.InitialA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InitialA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialATime", wireType)
				}
				x.InitialATime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InitialATime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureA", wireType)
				}
				x.FutureA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureATime", wireType)
				}
				x.FutureATime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureATime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RateMultipliers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RateMultipliers = append(x.RateMultipliers, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RateMultipliers[len(x.RateMultipliers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PoolUpdated_7_list)(nil)

type _PoolUpdated_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_PoolUpdated_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PoolUpdated_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PoolUpdated_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_PoolUpdated_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PoolUpdated_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PoolUpdated_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PoolUpdated_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PoolUpdated_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PoolUpdated                         protoreflect.MessageDescriptor
	fd_PoolUpdated_pool_id                 protoreflect.FieldDescriptor
	fd_PoolUpdated_protocol_fee_percentage protoreflect.FieldDescriptor
	fd_PoolUpdated_rewards_fee             protoreflect.FieldDescriptor
	fd_PoolUpdated_max_fee                 protoreflect.FieldDescriptor
	fd_PoolUpdated_future_a                protoreflect.FieldDescriptor
	fd_PoolUpdated_future_a_time           protoreflect.FieldDescriptor
	fd_PoolUpdated_rate_multipliers        protoreflect.FieldDescriptor
)

func init() {
	file_swap_stableswap_v1_events_proto_init()
	md_PoolUpdated = File_swap_stableswap_v1_events_proto.Messages().ByName("PoolUpdated")
	fd_PoolUpdated_pool_id = md_PoolUpdated.Fields().ByName("pool_id")
	fd_PoolUpdated_protocol_fee_percentage = md_PoolUpdated.Fields().ByName("protocol_fee_percentage")
	fd_PoolUpdated_rewards_fee = md_PoolUpdated.Fields().ByName("rewards_fee")
	fd_PoolUpdated_max_fee = md_PoolUpdated.Fields().ByName("max_fee")
	fd_PoolUpdated_future_a = md_PoolUpdated.Fields().ByName("future_a")
	fd_PoolUpdated_future_a_time = md_PoolUpdated.Fields().ByName("future_a_time")
	fd_PoolUpdated_rate_multipliers = md_PoolUpdated.Fields().ByName("rate_multipliers")
}

var _ protoreflect.Message = (*fastReflection_PoolUpdated)(nil)

type fastReflection_PoolUpdated PoolUpdated

func (x *PoolUpdated) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolUpdated)(x)
}

func (x *PoolUpdated) slowProtoReflect() protoreflect.Message {
	mi := &file_swap_stableswap_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolUpdated_messageType fastReflection_PoolUpdated_messageType
var _ protoreflect.MessageType = fastReflection_PoolUpdated_messageType{}

type fastReflection_PoolUpdated_messageType struct{}

func (x fastReflection_PoolUpdated_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolUpdated)(nil)
}
func (x fastReflection_PoolUpdated_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolUpdated)
}
func (x fastReflection_PoolUpdated_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolUpdated
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolUpdated) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolUpdated
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolUpdated) Type() protoreflect.MessageType {
	return _fastReflection_PoolUpdated_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolUpdated) New() protoreflect.Message {
	return new(fastReflection_PoolUpdated)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolUpdated) Interface() protoreflect.ProtoMessage {
	return (*PoolUpdated)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolUpdated) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_PoolUpdated_pool_id, value) {
			return
		}
	}
	if x.ProtocolFeePercentage != int64(0) {
		value := protoreflect.ValueOfInt64(x.ProtocolFeePercentage)
		if !f(fd_PoolUpdated_protocol_fee_percentage, value) {
			return
		}
	}
	if x.RewardsFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.RewardsFee)
		if !f(fd_PoolUpdated_rewards_fee, value) {
			return
		}
	}
	if x.MaxFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxFee)
		if !f(fd_PoolUpdated_max_fee, value) {
			return
		}
	}
	if x.FutureA != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureA)
		if !f(fd_PoolUpdated_future_a, value) {
			return
		}
	}
	if x.FutureATime != int64(0) {
		value := protoreflect.ValueOfInt64(x.FutureATime)
		if !f(fd_PoolUpdated_future_a_time, value) {
			return
		}
	}
	if len(x.RateMultipliers) != 0 {
		value := protoreflect.ValueOfList(&_PoolUpdated_7_list{list: &x.RateMultipliers})
		if !f(fd_PoolUpdated_rate_multipliers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolUpdated) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolUpdated.pool_id":
		return x.PoolId != uint64(0)
	case "swap.stableswap.v1.PoolUpdated.protocol_fee_percentage":
		return x.ProtocolFeePercentage != int64(0)
	case "swap.stableswap.v1.PoolUpdated.rewards_fee":
		return x.RewardsFee != int64(0)
	case "swap.stableswap.v1.PoolUpdated.max_fee":
		return x.MaxFee != int64(0)
	case "swap.stableswap.v1.PoolUpdated.future_a":
		return x.FutureA != int64(0)
	case "swap.stableswap.v1.PoolUpdated.future_a_time":
		return x.FutureATime != int64(0)
	case "swap.stableswap.v1.PoolUpdated.rate_multipliers":
		return len(x.RateMultipliers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolUpdated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolUpdated does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolUpdated) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolUpdated.pool_id":
		x.PoolId = uint64(0)
	case "swap.stableswap.v1.PoolUpdated.protocol_fee_percentage":
		x.ProtocolFeePercentage = int64(0)
	case "swap.stableswap.v1.PoolUpdated.rewards_fee":
		x.RewardsFee = int64(0)
	case "swap.stableswap.v1.PoolUpdated.max_fee":
		x.MaxFee = int64(0)
	case "swap.stableswap.v1.PoolUpdated.future_a":
		x.FutureA = int64(0)
	case "swap.stableswap.v1.PoolUpdated.future_a_time":
		x.FutureATime = int64(0)
	case "swap.stableswap.v1.PoolUpdated.rate_multipliers":
		x.RateMultipliers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolUpdated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolUpdated does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolUpdated) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "swap.stableswap.v1.PoolUpdated.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "swap.stableswap.v1.PoolUpdated.protocol_fee_percentage":
		value := x.ProtocolFeePercentage
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolUpdated.rewards_fee":
		value := x.RewardsFee
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolUpdated.max_fee":
		value := x.MaxFee
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolUpdated.future_a":
		value := x.FutureA
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolUpdated.future_a_time":
		value := x.FutureATime
		return protoreflect.ValueOfInt64(value)
	case "swap.stableswap.v1.PoolUpdated.rate_multipliers":
		if len(x.RateMultipliers) == 0 {
			return protoreflect.ValueOfList(&_PoolUpdated_7_list{})
		}
		listValue := &_PoolUpdated_7_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolUpdated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolUpdated does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolUpdated) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolUpdated.pool_id":
		x.PoolId = value.Uint()
	case "swap.stableswap.v1.PoolUpdated.protocol_fee_percentage":
		x.ProtocolFeePercentage = value.Int()
	case "swap.stableswap.v1.PoolUpdated.rewards_fee":
		x.RewardsFee = value.Int()
	case "swap.stableswap.v1.PoolUpdated.max_fee":
		x.MaxFee = value.Int()
	case "swap.stableswap.v1.PoolUpdated.future_a":
		x.FutureA = value.Int()
	case "swap.stableswap.v1.PoolUpdated.future_a_time":
		x.FutureATime = value.Int()
	case "swap.stableswap.v1.PoolUpdated.rate_multipliers":
		lv := value.List()
		clv := lv.(*_PoolUpdated_7_list)
		x.RateMultipliers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolUpdated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolUpdated does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolUpdated) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolUpdated.rate_multipliers":
		if x.RateMultipliers == nil {
			x.RateMultipliers = []*v1beta1.Coin{}
		}
		value := &_PoolUpdated_7_list{list: &x.RateMultipliers}
		return protoreflect.ValueOfList(value)
	case "swap.stableswap.v1.PoolUpdated.pool_id":
		panic(fmt.Errorf("field pool_id of message swap.stableswap.v1.PoolUpdated is not mutable"))
	case "swap.stableswap.v1.PoolUpdated.protocol_fee_percentage":
		panic(fmt.Errorf("field protocol_fee_percentage of message swap.stableswap.v1.PoolUpdated is not mutable"))
	case "swap.stableswap.v1.PoolUpdated.rewards_fee":
		panic(fmt.Errorf("field rewards_fee of message swap.stableswap.v1.PoolUpdated is not mutable"))
	case "swap.stableswap.v1.PoolUpdated.max_fee":
		panic(fmt.Errorf("field max_fee of message swap.stableswap.v1.PoolUpdated is not mutable"))
	case "swap.stableswap.v1.PoolUpdated.future_a":
		panic(fmt.Errorf("field future_a of message swap.stableswap.v1.PoolUpdated is not mutable"))
	case "swap.stableswap.v1.PoolUpdated.future_a_time":
		panic(fmt.Errorf("field future_a_time of message swap.stableswap.v1.PoolUpdated is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolUpdated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolUpdated does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolUpdated) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.PoolUpdated.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "swap.stableswap.v1.PoolUpdated.protocol_fee_percentage":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolUpdated.rewards_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolUpdated.max_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolUpdated.future_a":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolUpdated.future_a_time":
		return protoreflect.ValueOfInt64(int64(0))
	case "swap.stableswap.v1.PoolUpdated.rate_multipliers":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_PoolUpdated_7_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.PoolUpdated"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.PoolUpdated does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolUpdated) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in swap.stableswap.v1.PoolUpdated", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolUpdated) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolUpdated) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolUpdated) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolUpdated) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolUpdated)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.ProtocolFeePercentage != 0 {
			n += 1 + runtime.Sov(uint64(x.ProtocolFeePercentage))
		}
		if x.RewardsFee != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardsFee))
		}
		if x.MaxFee != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxFee))
		}
		if x.FutureA != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureA))
		}
		if x.FutureATime != 0 {
			n += 1 + runtime.Sov(uint64(x.FutureATime))
		}
		if len(x.RateMultipliers) > 0 {
			for _, e := range x.RateMultipliers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolUpdated)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RateMultipliers) > 0 {
			for iNdEx := len(x.RateMultipliers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RateMultipliers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.FutureATime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureATime))
			i--
			dAtA[i] = 0x30
		}
		if x.FutureA != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FutureA))
			i--
			dAtA[i] = 0x28
		}
		if x.MaxFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxFee))
			i--
			dAtA[i] = 0x20
		}
		if x.RewardsFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsFee))
			i--
			dAtA[i] = 0x18
		}
		if x.ProtocolFeePercentage != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProtocolFeePercentage))
			i--
			dAtA[i] = 0x10
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolUpdated)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolUpdated: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeePercentage", wireType)
				}
				x.ProtocolFeePercentage = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProtocolFeePercentage |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsFee", wireType)
				}
				x.RewardsFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardsFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
				}
				x.MaxFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureA", wireType)
				}
				x.FutureA = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureA |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureATime", wireType)
				}
				x.FutureATime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FutureATime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RateMultipliers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RateMultipliers = append(x.RateMultipliers, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RateMultipliers[len(x.RateMultipliers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_LiquidityAdded_7_list)(nil)

type _LiquidityAdded_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_LiquidityAdded_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_LiquidityAdded_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_LiquidityAdded_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_LiquidityAdded_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_LiquidityAdded_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LiquidityAdded_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_LiquidityAdded_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LiquidityAdded_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_LiquidityAdded          protoreflect.MessageDescriptor
	fd_LiquidityAdded_provider protoreflect.FieldDescriptor
	fd_LiquidityAdded_pool_id  protoreflect.FieldDescriptor
	fd_LiquidityAdded_amount   protoreflect.FieldDescriptor
	fd_LiquidityAdded_shares   protoreflect.FieldDescriptor
)

func init() {
	file_swap_stableswap_v1_events_proto_init()
	md_LiquidityAdded = File_swap_stableswap_v1_events_proto.Messages().ByName("LiquidityAdded")
	fd_LiquidityAdded_provider = md_LiquidityAdded.Fields().ByName("provider")
	fd_LiquidityAdded_pool_id = md_LiquidityAdded.Fields().ByName("pool_id")
	fd_LiquidityAdded_amount = md_LiquidityAdded.Fields().ByName("amount")
	fd_LiquidityAdded_shares = md_LiquidityAdded.Fields().ByName("shares")
}

var _ protoreflect.Message = (*fastReflection_LiquidityAdded)(nil)

type fastReflection_LiquidityAdded LiquidityAdded

func (x *LiquidityAdded) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LiquidityAdded)(x)
}

func (x *LiquidityAdded) slowProtoReflect() protoreflect.Message {
	mi := &file_swap_stableswap_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LiquidityAdded_messageType fastReflection_LiquidityAdded_messageType
var _ protoreflect.MessageType = fastReflection_LiquidityAdded_messageType{}

type fastReflection_LiquidityAdded_messageType struct{}

func (x fastReflection_LiquidityAdded_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LiquidityAdded)(nil)
}
func (x fastReflection_LiquidityAdded_messageType) New() protoreflect.Message {
	return new(fastReflection_LiquidityAdded)
}
func (x fastReflection_LiquidityAdded_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidityAdded
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LiquidityAdded) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidityAdded
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LiquidityAdded) Type() protoreflect.MessageType {
	return _fastReflection_LiquidityAdded_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LiquidityAdded) New() protoreflect.Message {
	return new(fastReflection_LiquidityAdded)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LiquidityAdded) Interface() protoreflect.ProtoMessage {
	return (*LiquidityAdded)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LiquidityAdded) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Provider != "" {
		value := protoreflect.ValueOfString(x.Provider)
		if !f(fd_LiquidityAdded_provider, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_LiquidityAdded_pool_id, value) {
			return
		}
	}
	if len(x.Amount) != 0 {
		value := protoreflect.ValueOfList(&_LiquidityAdded_7_list{list: &x.Amount})
		if !f(fd_LiquidityAdded_amount, value) {
			return
		}
	}
	if x.Shares != "" {
		value := protoreflect.ValueOfString(x.Shares)
		if !f(fd_LiquidityAdded_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LiquidityAdded) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityAdded.provider":
		return x.Provider != ""
	case "swap.stableswap.v1.LiquidityAdded.pool_id":
		return x.PoolId != uint64(0)
	case "swap.stableswap.v1.LiquidityAdded.amount":
		return len(x.Amount) != 0
	case "swap.stableswap.v1.LiquidityAdded.shares":
		return x.Shares != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityAdded"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityAdded does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityAdded) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityAdded.provider":
		x.Provider = ""
	case "swap.stableswap.v1.LiquidityAdded.pool_id":
		x.PoolId = uint64(0)
	case "swap.stableswap.v1.LiquidityAdded.amount":
		x.Amount = nil
	case "swap.stableswap.v1.LiquidityAdded.shares":
		x.Shares = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityAdded"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityAdded does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LiquidityAdded) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "swap.stableswap.v1.LiquidityAdded.provider":
		value := x.Provider
		return protoreflect.ValueOfString(value)
	case "swap.stableswap.v1.LiquidityAdded.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "swap.stableswap.v1.LiquidityAdded.amount":
		if len(x.Amount) == 0 {
			return protoreflect.ValueOfList(&_LiquidityAdded_7_list{})
		}
		listValue := &_LiquidityAdded_7_list{list: &x.Amount}
		return protoreflect.ValueOfList(listValue)
	case "swap.stableswap.v1.LiquidityAdded.shares":
		value := x.Shares
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityAdded"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityAdded does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityAdded) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityAdded.provider":
		x.Provider = value.Interface().(string)
	case "swap.stableswap.v1.LiquidityAdded.pool_id":
		x.PoolId = value.Uint()
	case "swap.stableswap.v1.LiquidityAdded.amount":
		lv := value.List()
		clv := lv.(*_LiquidityAdded_7_list)
		x.Amount = *clv.list
	case "swap.stableswap.v1.LiquidityAdded.shares":
		x.Shares = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityAdded"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityAdded does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityAdded) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityAdded.amount":
		if x.Amount == nil {
			x.Amount = []*v1beta1.Coin{}
		}
		value := &_LiquidityAdded_7_list{list: &x.Amount}
		return protoreflect.ValueOfList(value)
	case "swap.stableswap.v1.LiquidityAdded.provider":
		panic(fmt.Errorf("field provider of message swap.stableswap.v1.LiquidityAdded is not mutable"))
	case "swap.stableswap.v1.LiquidityAdded.pool_id":
		panic(fmt.Errorf("field pool_id of message swap.stableswap.v1.LiquidityAdded is not mutable"))
	case "swap.stableswap.v1.LiquidityAdded.shares":
		panic(fmt.Errorf("field shares of message swap.stableswap.v1.LiquidityAdded is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityAdded"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityAdded does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LiquidityAdded) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityAdded.provider":
		return protoreflect.ValueOfString("")
	case "swap.stableswap.v1.LiquidityAdded.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "swap.stableswap.v1.LiquidityAdded.amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_LiquidityAdded_7_list{list: &list})
	case "swap.stableswap.v1.LiquidityAdded.shares":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityAdded"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityAdded does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LiquidityAdded) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in swap.stableswap.v1.LiquidityAdded", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LiquidityAdded) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityAdded) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LiquidityAdded) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LiquidityAdded) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LiquidityAdded)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Provider)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if len(x.Amount) > 0 {
			for _, e := range x.Amount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Shares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LiquidityAdded)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Amount) > 0 {
			for iNdEx := len(x.Amount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Amount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.Shares) > 0 {
			i -= len(x.Shares)
			copy(dAtA[i:], x.Shares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Shares)))
			i--
			dAtA[i] = 0x22
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Provider) > 0 {
			i -= len(x.Provider)
			copy(dAtA[i:], x.Provider)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Provider)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LiquidityAdded)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidityAdded: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidityAdded: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Provider = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = append(x.Amount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount[len(x.Amount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_LiquidityRemoved_7_list)(nil)

type _LiquidityRemoved_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_LiquidityRemoved_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_LiquidityRemoved_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_LiquidityRemoved_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_LiquidityRemoved_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_LiquidityRemoved_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LiquidityRemoved_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_LiquidityRemoved_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LiquidityRemoved_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_LiquidityRemoved             protoreflect.MessageDescriptor
	fd_LiquidityRemoved_provider    protoreflect.FieldDescriptor
	fd_LiquidityRemoved_pool_id     protoreflect.FieldDescriptor
	fd_LiquidityRemoved_amount      protoreflect.FieldDescriptor
	fd_LiquidityRemoved_shares      protoreflect.FieldDescriptor
	fd_LiquidityRemoved_unlock_time protoreflect.FieldDescriptor
)

func init() {
	file_swap_stableswap_v1_events_proto_init()
	md_LiquidityRemoved = File_swap_stableswap_v1_events_proto.Messages().ByName("LiquidityRemoved")
	fd_LiquidityRemoved_provider = md_LiquidityRemoved.Fields().ByName("provider")
	fd_LiquidityRemoved_pool_id = md_LiquidityRemoved.Fields().ByName("pool_id")
	fd_LiquidityRemoved_amount = md_LiquidityRemoved.Fields().ByName("amount")
	fd_LiquidityRemoved_shares = md_LiquidityRemoved.Fields().ByName("shares")
	fd_LiquidityRemoved_unlock_time = md_LiquidityRemoved.Fields().ByName("unlock_time")
}

var _ protoreflect.Message = (*fastReflection_LiquidityRemoved)(nil)

type fastReflection_LiquidityRemoved LiquidityRemoved

func (x *LiquidityRemoved) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LiquidityRemoved)(x)
}

func (x *LiquidityRemoved) slowProtoReflect() protoreflect.Message {
	mi := &file_swap_stableswap_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LiquidityRemoved_messageType fastReflection_LiquidityRemoved_messageType
var _ protoreflect.MessageType = fastReflection_LiquidityRemoved_messageType{}

type fastReflection_LiquidityRemoved_messageType struct{}

func (x fastReflection_LiquidityRemoved_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LiquidityRemoved)(nil)
}
func (x fastReflection_LiquidityRemoved_messageType) New() protoreflect.Message {
	return new(fastReflection_LiquidityRemoved)
}
func (x fastReflection_LiquidityRemoved_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidityRemoved
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LiquidityRemoved) Descriptor() protoreflect.MessageDescriptor {
	return md_LiquidityRemoved
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LiquidityRemoved) Type() protoreflect.MessageType {
	return _fastReflection_LiquidityRemoved_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LiquidityRemoved) New() protoreflect.Message {
	return new(fastReflection_LiquidityRemoved)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LiquidityRemoved) Interface() protoreflect.ProtoMessage {
	return (*LiquidityRemoved)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LiquidityRemoved) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Provider != "" {
		value := protoreflect.ValueOfString(x.Provider)
		if !f(fd_LiquidityRemoved_provider, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_LiquidityRemoved_pool_id, value) {
			return
		}
	}
	if len(x.Amount) != 0 {
		value := protoreflect.ValueOfList(&_LiquidityRemoved_7_list{list: &x.Amount})
		if !f(fd_LiquidityRemoved_amount, value) {
			return
		}
	}
	if x.Shares != "" {
		value := protoreflect.ValueOfString(x.Shares)
		if !f(fd_LiquidityRemoved_shares, value) {
			return
		}
	}
	if x.UnlockTime != nil {
		value := protoreflect.ValueOfMessage(x.UnlockTime.ProtoReflect())
		if !f(fd_LiquidityRemoved_unlock_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LiquidityRemoved) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityRemoved.provider":
		return x.Provider != ""
	case "swap.stableswap.v1.LiquidityRemoved.pool_id":
		return x.PoolId != uint64(0)
	case "swap.stableswap.v1.LiquidityRemoved.amount":
		return len(x.Amount) != 0
	case "swap.stableswap.v1.LiquidityRemoved.shares":
		return x.Shares != ""
	case "swap.stableswap.v1.LiquidityRemoved.unlock_time":
		return x.UnlockTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityRemoved"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityRemoved does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityRemoved) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityRemoved.provider":
		x.Provider = ""
	case "swap.stableswap.v1.LiquidityRemoved.pool_id":
		x.PoolId = uint64(0)
	case "swap.stableswap.v1.LiquidityRemoved.amount":
		x.Amount = nil
	case "swap.stableswap.v1.LiquidityRemoved.shares":
		x.Shares = ""
	case "swap.stableswap.v1.LiquidityRemoved.unlock_time":
		x.UnlockTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityRemoved"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityRemoved does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LiquidityRemoved) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "swap.stableswap.v1.LiquidityRemoved.provider":
		value := x.Provider
		return protoreflect.ValueOfString(value)
	case "swap.stableswap.v1.LiquidityRemoved.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "swap.stableswap.v1.LiquidityRemoved.amount":
		if len(x.Amount) == 0 {
			return protoreflect.ValueOfList(&_LiquidityRemoved_7_list{})
		}
		listValue := &_LiquidityRemoved_7_list{list: &x.Amount}
		return protoreflect.ValueOfList(listValue)
	case "swap.stableswap.v1.LiquidityRemoved.shares":
		value := x.Shares
		return protoreflect.ValueOfString(value)
	case "swap.stableswap.v1.LiquidityRemoved.unlock_time":
		value := x.UnlockTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityRemoved"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityRemoved does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityRemoved) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityRemoved.provider":
		x.Provider = value.Interface().(string)
	case "swap.stableswap.v1.LiquidityRemoved.pool_id":
		x.PoolId = value.Uint()
	case "swap.stableswap.v1.LiquidityRemoved.amount":
		lv := value.List()
		clv := lv.(*_LiquidityRemoved_7_list)
		x.Amount = *clv.list
	case "swap.stableswap.v1.LiquidityRemoved.shares":
		x.Shares = value.Interface().(string)
	case "swap.stableswap.v1.LiquidityRemoved.unlock_time":
		x.UnlockTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityRemoved"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityRemoved does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityRemoved) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityRemoved.amount":
		if x.Amount == nil {
			x.Amount = []*v1beta1.Coin{}
		}
		value := &_LiquidityRemoved_7_list{list: &x.Amount}
		return protoreflect.ValueOfList(value)
	case "swap.stableswap.v1.LiquidityRemoved.unlock_time":
		if x.UnlockTime == nil {
			x.UnlockTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.UnlockTime.ProtoReflect())
	case "swap.stableswap.v1.LiquidityRemoved.provider":
		panic(fmt.Errorf("field provider of message swap.stableswap.v1.LiquidityRemoved is not mutable"))
	case "swap.stableswap.v1.LiquidityRemoved.pool_id":
		panic(fmt.Errorf("field pool_id of message swap.stableswap.v1.LiquidityRemoved is not mutable"))
	case "swap.stableswap.v1.LiquidityRemoved.shares":
		panic(fmt.Errorf("field shares of message swap.stableswap.v1.LiquidityRemoved is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityRemoved"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityRemoved does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LiquidityRemoved) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "swap.stableswap.v1.LiquidityRemoved.provider":
		return protoreflect.ValueOfString("")
	case "swap.stableswap.v1.LiquidityRemoved.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "swap.stableswap.v1.LiquidityRemoved.amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_LiquidityRemoved_7_list{list: &list})
	case "swap.stableswap.v1.LiquidityRemoved.shares":
		return protoreflect.ValueOfString("")
	case "swap.stableswap.v1.LiquidityRemoved.unlock_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: swap.stableswap.v1.LiquidityRemoved"))
		}
		panic(fmt.Errorf("message swap.stableswap.v1.LiquidityRemoved does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LiquidityRemoved) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in swap.stableswap.v1.LiquidityRemoved", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LiquidityRemoved) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LiquidityRemoved) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LiquidityRemoved) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LiquidityRemoved) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LiquidityRemoved)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Provider)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if len(x.Amount) > 0 {
			for _, e := range x.Amount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Shares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnlockTime != nil {
			l = options.Size(x.UnlockTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LiquidityRemoved)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Amount) > 0 {
			for iNdEx := len(x.Amount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Amount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.Shares) > 0 {
			i -= len(x.Shares)
			copy(dAtA[i:], x.Shares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Shares)))
			i--
			dAtA[i] = 0x22
		}
		if x.UnlockTime != nil {
			encoded, err := options.Marshal(x.UnlockTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Provider) > 0 {
			i -= len(x.Provider)
			copy(dAtA[i:], x.Provider)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Provider)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LiquidityRemoved)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidityRemoved: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LiquidityRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Provider = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = append(x.Amount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount[len(x.Amount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UnlockTime == nil {
					x.UnlockTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnlockTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: swap/stableswap/v1/events.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoolCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Algorithm of the pool.
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Pair asset denom in the pool.
	Pair string `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
	// Protocol fee percentage for the pool.
	ProtocolFeePercentage int64 `protobuf:"varint,4,opt,name=protocol_fee_percentage,json=protocolFeePercentage,proto3" json:"protocol_fee_percentage,omitempty"`
	// Rewards fee for the pool.
	RewardsFee int64 `protobuf:"varint,5,opt,name=rewards_fee,json=rewardsFee,proto3" json:"rewards_fee,omitempty"`
	// Maximum fee allowed for the pool during a swap.
	MaxFee int64 `protobuf:"varint,6,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Initial amplification coefficient.
	InitialA int64 `protobuf:"varint,7,opt,name=initial_a,json=initialA,proto3" json:"initial_a,omitempty"`
	// Initial amplification coefficient.
	InitialATime int64 `protobuf:"varint,8,opt,name=initial_a_time,json=initialATime,proto3" json:"initial_a_time,omitempty"`
	// Future amplification coefficient.
	FutureA int64 `protobuf:"varint,9,opt,name=future_a,json=futureA,proto3" json:"future_a,omitempty"`
	// Time when the amplification change will take full effect.
	FutureATime int64 `protobuf:"varint,10,opt,name=future_a_time,json=futureATime,proto3" json:"future_a_time,omitempty"`
	// Rate multipliers applied to the coins.
	RateMultipliers []*v1beta1.Coin `protobuf:"bytes,11,rep,name=rate_multipliers,json=rateMultipliers,proto3" json:"rate_multipliers,omitempty"`
}

func (x *PoolCreated) Reset() {
	*x = PoolCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_stableswap_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolCreated) ProtoMessage() {}

// Deprecated: Use PoolCreated.ProtoReflect.Descriptor instead.
func (*PoolCreated) Descriptor() ([]byte, []int) {
	return file_swap_stableswap_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *PoolCreated) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PoolCreated) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *PoolCreated) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *PoolCreated) GetProtocolFeePercentage() int64 {
	if x != nil {
		return x.ProtocolFeePercentage
	}
	return 0
}

func (x *PoolCreated) GetRewardsFee() int64 {
	if x != nil {
		return x.RewardsFee
	}
	return 0
}

func (x *PoolCreated) GetMaxFee() int64 {
	if x != nil {
		return x.MaxFee
	}
	return 0
}

func (x *PoolCreated) GetInitialA() int64 {
	if x != nil {
		return x.InitialA
	}
	return 0
}

func (x *PoolCreated) GetInitialATime() int64 {
	if x != nil {
		return x.InitialATime
	}
	return 0
}

func (x *PoolCreated) GetFutureA() int64 {
	if x != nil {
		return x.FutureA
	}
	return 0
}

func (x *PoolCreated) GetFutureATime() int64 {
	if x != nil {
		return x.FutureATime
	}
	return 0
}

func (x *PoolCreated) GetRateMultipliers() []*v1beta1.Coin {
	if x != nil {
		return x.RateMultipliers
	}
	return nil
}

type PoolUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the updated pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Protocol fee percentage for the pool.
	ProtocolFeePercentage int64 `protobuf:"varint,2,opt,name=protocol_fee_percentage,json=protocolFeePercentage,proto3" json:"protocol_fee_percentage,omitempty"`
	// Rewards fee for the pool.
	RewardsFee int64 `protobuf:"varint,3,opt,name=rewards_fee,json=rewardsFee,proto3" json:"rewards_fee,omitempty"`
	// Maximum fee allowed for the pool during a swap.
	MaxFee int64 `protobuf:"varint,4,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	// Future amplification coefficient.
	FutureA int64 `protobuf:"varint,5,opt,name=future_a,json=futureA,proto3" json:"future_a,omitempty"`
	// Time when the amplification change will take full effect.
	FutureATime int64 `protobuf:"varint,6,opt,name=future_a_time,json=futureATime,proto3" json:"future_a_time,omitempty"`
	// Rate multipliers applied to the coins.
	RateMultipliers []*v1beta1.Coin `protobuf:"bytes,7,rep,name=rate_multipliers,json=rateMultipliers,proto3" json:"rate_multipliers,omitempty"`
}

func (x *PoolUpdated) Reset() {
	*x = PoolUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_stableswap_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolUpdated) ProtoMessage() {}

// Deprecated: Use PoolUpdated.ProtoReflect.Descriptor instead.
func (*PoolUpdated) Descriptor() ([]byte, []int) {
	return file_swap_stableswap_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *PoolUpdated) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PoolUpdated) GetProtocolFeePercentage() int64 {
	if x != nil {
		return x.ProtocolFeePercentage
	}
	return 0
}

func (x *PoolUpdated) GetRewardsFee() int64 {
	if x != nil {
		return x.RewardsFee
	}
	return 0
}

func (x *PoolUpdated) GetMaxFee() int64 {
	if x != nil {
		return x.MaxFee
	}
	return 0
}

func (x *PoolUpdated) GetFutureA() int64 {
	if x != nil {
		return x.FutureA
	}
	return 0
}

func (x *PoolUpdated) GetFutureATime() int64 {
	if x != nil {
		return x.FutureATime
	}
	return 0
}

func (x *PoolUpdated) GetRateMultipliers() []*v1beta1.Coin {
	if x != nil {
		return x.RateMultipliers
	}
	return nil
}

type LiquidityAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the liquidity provider.
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// ID of the pool.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Liquidity amount being added.
	Amount []*v1beta1.Coin `protobuf:"bytes,7,rep,name=amount,proto3" json:"amount,omitempty"`
	// Shares issued for the added liquidity.
	Shares string `protobuf:"bytes,4,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (x *LiquidityAdded) Reset() {
	*x = LiquidityAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_stableswap_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityAdded) ProtoMessage() {}

// Deprecated: Use LiquidityAdded.ProtoReflect.Descriptor instead.
func (*LiquidityAdded) Descriptor() ([]byte, []int) {
	return file_swap_stableswap_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *LiquidityAdded) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *LiquidityAdded) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *LiquidityAdded) GetAmount() []*v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *LiquidityAdded) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

type LiquidityRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider address of the liquidity
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// ID of the pool.
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Liquidity amount being removed.
	Amount []*v1beta1.Coin `protobuf:"bytes,7,rep,name=amount,proto3" json:"amount,omitempty"`
	// Shares burned for the removed liquidity.
	Shares string `protobuf:"bytes,4,opt,name=shares,proto3" json:"shares,omitempty"`
	// Time when the removed liquidity will be unlocked.
	UnlockTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (x *LiquidityRemoved) Reset() {
	*x = LiquidityRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_stableswap_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityRemoved) ProtoMessage() {}

// Deprecated: Use LiquidityRemoved.ProtoReflect.Descriptor instead.
func (*LiquidityRemoved) Descriptor() ([]byte, []int) {
	return file_swap_stableswap_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *LiquidityRemoved) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *LiquidityRemoved) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *LiquidityRemoved) GetAmount() []*v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *LiquidityRemoved) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *LiquidityRemoved) GetUnlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

var File_swap_stableswap_v1_events_proto protoreflect.FileDescriptor

var file_swap_stableswap_v1_events_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61,
	0x70, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69,
	0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x03, 0x0a, 0x0b, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x65, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x46, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x9a, 0xe7, 0xb0, 0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x6f,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x12, 0x22,
	0x0a, 0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf,
	0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0, 0x2a, 0x0c, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x73, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0, 0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x79,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f, 0x00, 0xaa,
	0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0, 0x2a, 0x0c,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0xc3, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x76,
	0x31, 0x3b, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x12, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x53, 0x77, 0x61, 0x70,
	0x5c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1e, 0x53, 0x77, 0x61, 0x70, 0x5c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x14, 0x53, 0x77, 0x61, 0x70, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_swap_stableswap_v1_events_proto_rawDescOnce sync.Once
	file_swap_stableswap_v1_events_proto_rawDescData = file_swap_stableswap_v1_events_proto_rawDesc
)

func file_swap_stableswap_v1_events_proto_rawDescGZIP() []byte {
	file_swap_stableswap_v1_events_proto_rawDescOnce.Do(func() {
		file_swap_stableswap_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_swap_stableswap_v1_events_proto_rawDescData)
	})
	return file_swap_stableswap_v1_events_proto_rawDescData
}

var file_swap_stableswap_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_swap_stableswap_v1_events_proto_goTypes = []interface{}{
	(*PoolCreated)(nil),           // 0: swap.stableswap.v1.PoolCreated
	(*PoolUpdated)(nil),           // 1: swap.stableswap.v1.PoolUpdated
	(*LiquidityAdded)(nil),        // 2: swap.stableswap.v1.LiquidityAdded
	(*LiquidityRemoved)(nil),      // 3: swap.stableswap.v1.LiquidityRemoved
	(*v1beta1.Coin)(nil),          // 4: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_swap_stableswap_v1_events_proto_depIdxs = []int32{
	4, // 0: swap.stableswap.v1.PoolCreated.rate_multipliers:type_name -> cosmos.base.v1beta1.Coin
	4, // 1: swap.stableswap.v1.PoolUpdated.rate_multipliers:type_name -> cosmos.base.v1beta1.Coin
	4, // 2: swap.stableswap.v1.LiquidityAdded.amount:type_name -> cosmos.base.v1beta1.Coin
	4, // 3: swap.stableswap.v1.LiquidityRemoved.amount:type_name -> cosmos.base.v1beta1.Coin
	5, // 4: swap.stableswap.v1.LiquidityRemoved.unlock_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_swap_stableswap_v1_events_proto_init() }
func file_swap_stableswap_v1_events_proto_init() {
	if File_swap_stableswap_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_swap_stableswap_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_stableswap_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_stableswap_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_stableswap_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_swap_stableswap_v1_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_swap_stableswap_v1_events_proto_goTypes,
		DependencyIndexes: file_swap_stableswap_v1_events_proto_depIdxs,
		MessageInfos:      file_swap_stableswap_v1_events_proto_msgTypes,
	}.Build()
	File_swap_stableswap_v1_events_proto = out.File
	file_swap_stableswap_v1_events_proto_rawDesc = nil
	file_swap_stableswap_v1_events_proto_goTypes = nil
	file_swap_stableswap_v1_events_proto_depIdxs = nil
}
